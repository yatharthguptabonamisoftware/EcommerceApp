export declare const TwButton: import("tw-element/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly size: import("tw-element/es/utils").BuildPropReturn<StringConstructor, never, false, "default" | "small" | "large", never>;
    readonly disabled: BooleanConstructor;
    readonly type: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
    readonly icon: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly nativeType: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "button", unknown, "button" | "submit" | "reset", unknown>;
    readonly loading: BooleanConstructor;
    readonly loadingIcon: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, () => import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>, unknown, unknown, unknown>;
    readonly plain: BooleanConstructor;
    readonly autofocus: BooleanConstructor;
    readonly round: BooleanConstructor;
    readonly circle: BooleanConstructor;
    readonly color: StringConstructor;
    readonly autoInsertSpace: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, undefined, unknown, unknown, unknown>;
}, {
    buttonRef: import("vue").Ref<any>;
    buttonStyle: import("vue").ComputedRef<{}>;
    buttonSize: import("vue").ComputedRef<"default" | "small" | "large">;
    buttonType: import("vue").ComputedRef<"default" | "" | "primary" | "success" | "warning" | "info" | "danger" | "text">;
    buttonDisabled: import("vue").ComputedRef<boolean>;
    shouldAddSpace: import("vue").ComputedRef<boolean>;
    handleClick: (evt: MouseEvent) => void;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (evt: MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly size: import("tw-element/es/utils").BuildPropReturn<StringConstructor, never, false, "default" | "small" | "large", never>;
    readonly disabled: BooleanConstructor;
    readonly type: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
    readonly icon: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly nativeType: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "button", unknown, "button" | "submit" | "reset", unknown>;
    readonly loading: BooleanConstructor;
    readonly loadingIcon: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, () => import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>, unknown, unknown, unknown>;
    readonly plain: BooleanConstructor;
    readonly autofocus: BooleanConstructor;
    readonly round: BooleanConstructor;
    readonly circle: BooleanConstructor;
    readonly color: StringConstructor;
    readonly autoInsertSpace: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, undefined, unknown, unknown, unknown>;
}>> & {
    onClick?: ((evt: MouseEvent) => any) | undefined;
}, {
    type: import("tw-element/es/utils").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
    icon: import("tw-element/es/utils").BuildPropType<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
    nativeType: import("tw-element/es/utils").BuildPropType<StringConstructor, "button" | "submit" | "reset", unknown>;
    loadingIcon: import("tw-element/es/utils").BuildPropType<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
    autoInsertSpace: import("tw-element/es/utils").BuildPropType<BooleanConstructor, unknown, unknown>;
    size: import("tw-element/es/utils").BuildPropType<StringConstructor, "default" | "small" | "large", never>;
    disabled: boolean;
    loading: boolean;
    plain: boolean;
    autofocus: boolean;
    round: boolean;
    circle: boolean;
}>> & {
    ButtonGroup: import("vue").DefineComponent<{
        readonly size: import("tw-element/es/utils").BuildPropReturn<StringConstructor, never, false, "default" | "small" | "large", never>;
        readonly type: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly size: import("tw-element/es/utils").BuildPropReturn<StringConstructor, never, false, "default" | "small" | "large", never>;
        readonly type: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
    }>>, {
        type: import("tw-element/es/utils").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
        size: import("tw-element/es/utils").BuildPropType<StringConstructor, "default" | "small" | "large", never>;
    }>;
};
export declare const TwButtonGroup: import("tw-element/es/utils").SFCWithInstall<import("vue").DefineComponent<{
    readonly size: import("tw-element/es/utils").BuildPropReturn<StringConstructor, never, false, "default" | "small" | "large", never>;
    readonly type: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
}, {
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly size: import("tw-element/es/utils").BuildPropReturn<StringConstructor, never, false, "default" | "small" | "large", never>;
    readonly type: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
}>>, {
    type: import("tw-element/es/utils").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
    size: import("tw-element/es/utils").BuildPropType<StringConstructor, "default" | "small" | "large", never>;
}>>;
export default TwButton;
export * from './src/button';
