import type { StyleValue, ExtractPropTypes } from 'vue';
declare type AutoSize = {
    minRows?: number;
    maxRows?: number;
} | boolean;
export declare const inputProps: {
    readonly size: import("tw-element/es/utils").BuildPropReturn<StringConstructor, never, false, "default" | "small" | "large", never>;
    readonly disabled: BooleanConstructor;
    readonly modelValue: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | number | null | undefined>, "", unknown, unknown, unknown>;
    readonly type: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "text", unknown, unknown, unknown>;
    readonly resize: import("tw-element/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, "none" | "both" | "horizontal" | "vertical", unknown>;
    readonly autosize: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<AutoSize>, false, unknown, unknown, unknown>;
    readonly autocomplete: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "off", unknown, unknown, unknown>;
    readonly placeholder: import("tw-element/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly form: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly readonly: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly clearable: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly showPassword: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly showWordLimit: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly suffixIcon: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly prefixIcon: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly label: import("tw-element/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly tabindex: import("tw-element/es/utils").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, unknown, unknown, unknown>;
    readonly validateEvent: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly inputStyle: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<StyleValue>, () => import("tw-element/es/utils").Mutable<{}>, unknown, unknown, unknown>;
};
export declare type InputProps = ExtractPropTypes<typeof inputProps>;
export declare const inputEmits: {
    "update:modelValue": (value: string) => boolean;
    input: (value: string) => boolean;
    change: (value: string) => boolean;
    focus: (evt: FocusEvent) => boolean;
    blur: (evt: FocusEvent) => boolean;
    clear: () => boolean;
    mouseleave: (evt: MouseEvent) => boolean;
    mouseenter: (evt: MouseEvent) => boolean;
    keydown: (evt: KeyboardEvent) => boolean;
    compositionstart: (evt: CompositionEvent) => boolean;
    compositionupdate: (evt: CompositionEvent) => boolean;
    compositionend: (evt: CompositionEvent) => boolean;
};
export declare type InputEmits = typeof inputEmits;
export {};
