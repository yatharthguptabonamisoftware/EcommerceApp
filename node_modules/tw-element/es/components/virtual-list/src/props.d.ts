import type { ExtractPropTypes, StyleValue } from 'vue';
import type { ItemSize } from './types';
export declare const virtualizedProps: {
    readonly className: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly containerElement: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | Element>, "div", unknown, unknown, unknown>;
    readonly data: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<any[]>, () => [], unknown, unknown, unknown>;
    readonly direction: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "ltr", false, "ltr" | "rtl", never>;
    readonly height: import("tw-element/es/utils").BuildPropReturn<readonly [StringConstructor, NumberConstructor], unknown, true, unknown, unknown>;
    readonly innerElement: import("tw-element/es/utils").BuildPropReturn<readonly [StringConstructor, ObjectConstructor], "div", unknown, unknown, unknown>;
    readonly style: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<StyleValue>, unknown, unknown, unknown, unknown>;
    readonly useIsScrolling: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly width: import("tw-element/es/utils").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, false, unknown, unknown>;
    readonly perfMode: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly scrollbarAlwaysOn: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
};
export declare const virtualizedListProps: {
    readonly className: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly containerElement: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | Element>, "div", unknown, unknown, unknown>;
    readonly data: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<any[]>, () => [], unknown, unknown, unknown>;
    readonly direction: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "ltr", false, "ltr" | "rtl", never>;
    readonly height: import("tw-element/es/utils").BuildPropReturn<readonly [StringConstructor, NumberConstructor], unknown, true, unknown, unknown>;
    readonly innerElement: import("tw-element/es/utils").BuildPropReturn<readonly [StringConstructor, ObjectConstructor], "div", unknown, unknown, unknown>;
    readonly style: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<StyleValue>, unknown, unknown, unknown, unknown>;
    readonly useIsScrolling: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly width: import("tw-element/es/utils").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, false, unknown, unknown>;
    readonly perfMode: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly scrollbarAlwaysOn: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly cache: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, 2, false, never, never>;
    readonly estimatedItemSize: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, never, false, never, never>;
    readonly layout: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "vertical", false, "horizontal" | "vertical", never>;
    readonly initScrollOffset: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, 0, false, never, never>;
    readonly total: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, never, true, never, never>;
    readonly itemSize: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<number | ItemSize>, never, true, never, never>;
};
export declare const virtualizedGridProps: {
    readonly className: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly containerElement: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<string | Element>, "div", unknown, unknown, unknown>;
    readonly data: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<any[]>, () => [], unknown, unknown, unknown>;
    readonly direction: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "ltr", false, "ltr" | "rtl", never>;
    readonly height: import("tw-element/es/utils").BuildPropReturn<readonly [StringConstructor, NumberConstructor], unknown, true, unknown, unknown>;
    readonly innerElement: import("tw-element/es/utils").BuildPropReturn<readonly [StringConstructor, ObjectConstructor], "div", unknown, unknown, unknown>;
    readonly style: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<StyleValue>, unknown, unknown, unknown, unknown>;
    readonly useIsScrolling: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly width: import("tw-element/es/utils").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, false, unknown, unknown>;
    readonly perfMode: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly scrollbarAlwaysOn: import("tw-element/es/utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly columnCache: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, 2, false, never, never>;
    readonly columnWidth: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<number | ItemSize>, never, true, never, never>;
    readonly estimatedColumnWidth: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, never, false, never, never>;
    readonly estimatedRowHeight: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, never, false, never, never>;
    readonly initScrollLeft: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, 0, false, never, never>;
    readonly initScrollTop: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, 0, false, never, never>;
    readonly rowCache: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, 2, false, never, never>;
    readonly rowHeight: import("tw-element/es/utils").BuildPropReturn<import("tw-element/es/utils").PropWrapper<number | ItemSize>, never, true, never, never>;
    readonly totalColumn: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, never, true, never, never>;
    readonly totalRow: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, never, true, never, never>;
};
export declare const virtualizedScrollbarProps: {
    readonly layout: import("tw-element/es/utils").BuildPropReturn<StringConstructor, "vertical", false, "horizontal" | "vertical", never>;
    readonly total: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, never, true, never, never>;
    readonly ratio: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly clientSize: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly scrollFrom: import("tw-element/es/utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly visible: BooleanConstructor;
};
export declare type VirtualizedProps = ExtractPropTypes<typeof virtualizedProps>;
export declare type VirtualizedListProps = ExtractPropTypes<typeof virtualizedListProps>;
export declare type VirtualizedGridProps = ExtractPropTypes<typeof virtualizedGridProps>;
export declare type VirtualizedScrollbarProps = ExtractPropTypes<typeof virtualizedScrollbarProps>;
