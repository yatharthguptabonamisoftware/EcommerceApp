{"ast":null,"code":"import { defineComponent, nextTick, computed, provide, toRefs, watch, h, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroup } from './useCheckbox.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwCheckboxGroup\",\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => []\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: void 0\n    },\n    max: {\n      type: Number,\n      default: void 0\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    fill: {\n      type: String,\n      default: void 0\n    },\n    textColor: {\n      type: String,\n      default: void 0\n    },\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      TwFormItem\n    } = useCheckboxGroup();\n    const checkboxGroupSize = useSize();\n    const ns = useNamespace(\"checkbox\");\n    const changeEvent = value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => {\n        emit(\"change\", value);\n      });\n    };\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", {\n      name: \"TwCheckboxGroup\",\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent\n    });\n    watch(() => props.modelValue, () => {\n      var _a;\n      (_a = TwFormItem.validate) == null ? void 0 : _a.call(TwFormItem, \"change\");\n    });\n    return () => {\n      return h(props.tag, {\n        class: ns.b(\"group\"),\n        role: \"group\",\n        \"aria-label\": \"checkbox-group\"\n      }, [renderSlot(slots, \"default\")]);\n    };\n  }\n});\nexport { _sfc_main as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","props","modelValue","type","Array","default","disabled","Boolean","min","Number","max","size","String","validator","isValidComponentSize","fill","textColor","tag","emits","UPDATE_MODEL_EVENT","setup","emit","slots","TwFormItem","useCheckboxGroup","checkboxGroupSize","useSize","ns","useNamespace","changeEvent","value","nextTick","computed","get","set","val","provide","toRefs","watch","_a","validate","call","h","class","b","role","renderSlot"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  provide,\n  nextTick,\n  toRefs,\n  h,\n  renderSlot,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@tw-element/constants'\nimport { isValidComponentSize } from '@tw-element/utils'\nimport { useSize, useNamespace } from '@tw-element/hooks'\nimport { useCheckboxGroup } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@tw-element/constants'\n\nexport default defineComponent({\n  name: 'TwCheckboxGroup',\n\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [],\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: undefined,\n    },\n    textColor: {\n      type: String,\n      default: undefined,\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, { emit, slots }) {\n    const { TwFormItem } = useCheckboxGroup()\n    const checkboxGroupSize = useSize()\n    const ns = useNamespace('checkbox')\n\n    const changeEvent = (value) => {\n      emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'TwCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        TwFormItem.validate?.('change')\n      }\n    )\n    return () => {\n      return h(\n        props.tag,\n        {\n          class: ns.b('group'),\n          role: 'group',\n          'aria-label': 'checkbox-group',\n        },\n        [renderSlot(slots, 'default')]\n      )\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;MAmBKA,SAAA,GAAaC,eAAA,CAAa;EAC7BC,IAAA,EAAM;EAENC,KAAA,EAAO;IACLC,UAAA,EAAY;MACVC,IAAA,EAAMC,KAAA;MACNC,OAAA,EAASA,CAAA,KAAM;IAAA;IAEjBC,QAAA,EAAUC,OAAA;IACVC,GAAA,EAAK;MACHL,IAAA,EAAMM,MAAA;MACNJ,OAAA,EAAS;IAAA;IAEXK,GAAA,EAAK;MACHP,IAAA,EAAMM,MAAA;MACNJ,OAAA,EAAS;IAAA;IAEXM,IAAA,EAAM;MACJR,IAAA,EAAMS,MAAA;MACNC,SAAA,EAAWC;IAAA;IAEbC,IAAA,EAAM;MACJZ,IAAA,EAAMS,MAAA;MACNP,OAAA,EAAS;IAAA;IAEXW,SAAA,EAAW;MACTb,IAAA,EAAMS,MAAA;MACNP,OAAA,EAAS;IAAA;IAEXY,GAAA,EAAK;MACHd,IAAA,EAAMS,MAAA;MACNP,OAAA,EAAS;IAAA;EAAA;EAIba,KAAA,EAAO,CAACC,kBAAA,EAAoB;EAE5BC,MAAMnB,KAAA,EAAO;IAAEoB,IAAA;IAAMC;EAAA,GAAS;IAC5B,MAAM;MAAEC;IAAA,IAAeC,gBAAA;IACvB,MAAMC,iBAAA,GAAoBC,OAAA;IAC1B,MAAMC,EAAA,GAAKC,YAAA,CAAa;IAExB,MAAMC,WAAA,GAAeC,KAAA,IAAU;MAC7BT,IAAA,CAAKF,kBAAA,EAAoBW,KAAA;MACzBC,QAAA,CAAS,MAAM;QACbV,IAAA,CAAK,UAAUS,KAAA;MAAA;IAAA;IAInB,MAAM5B,UAAA,GAAa8B,QAAA,CAAS;MAC1BC,IAAA,EAAM;QACJ,OAAOhC,KAAA,CAAMC,UAAA;MAAA;MAEfgC,IAAIC,GAAA,EAAK;QACPN,WAAA,CAAYM,GAAA;MAAA;IAAA;IAIhBC,OAAA,CAAQ,iBAAiB;MACvBpC,IAAA,EAAM;MACNE,UAAA;MAAA,GACGmC,MAAA,CAAOpC,KAAA;MACVwB,iBAAA;MACAI;IAAA;IAGFS,KAAA,CACE,MAAMrC,KAAA,CAAMC,UAAA,EACZ,MAAM;MACJ,IAAAqC,EAAA;MAAsB,CAAAA,EAAA,GAAAhB,UAAA,CAAAiB,QAAA,qBAAAD,EAAA,CAAAE,IAAA,CAAAlB,UAAA;IAG1B;IACE;MAEE,OAAAmB,CAAA,CACSzC,KAAK,CAAAgB,GAAA;QACZ0B,KAAA,EAAAhB,EAAA,CAAAiB,CAAA;QACAC,IAAA;QAAc;MAEG,IAAAC,UAAA,CAAAxB,KAAA;IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}