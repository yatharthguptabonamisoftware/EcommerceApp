{"ast":null,"code":"import { defineComponent, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport TwTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwTree\",\n  components: {\n    TwTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        disabled: \"disabled\"\n      })\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: [String, Object]\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({\n      el$\n    }, store);\n    const isEmpty = computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible);\n    });\n    watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    const getNodeKey$1 = node => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n    const remove = data => {\n      store.value.remove(data);\n    };\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    return {\n      ns,\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, child => {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Tree as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","TwTreeNode","props","data","type","Array","default","emptyText","String","renderAfterExpand","Boolean","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","Number","renderContent","Function","showCheckbox","draggable","allowDrag","allowDrop","Object","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","emits","setup","ctx","t","useLocale","ns","useNamespace","store","ref","TreeStore","key","value","initialize","root","currentNode","el$","dropIndicator$","broadcastExpanded","useNodeExpandEventBroadcast","dragState","useDragNodeHandler","useKeydown","isEmpty","computed","childNodes","length","every","visible","watch","newVal","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","filter","Error","getNodeKey$1","node","getNodeKey","getNodePath","getNode","path","parent","push","reverse","getCheckedNodes","leafOnly","includeHalfChecked","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","setCheckedNodes","nodes","setCheckedKeys","keys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","shouldAutoExpandParent","setUserCurrentNode","setCurrentKey","setCurrentNodeKey","remove","append","parentNode","insertBefore","refNode","insertAfter","handleNodeExpand","nodeData","instance","emit","updateKeyChildren","updateChildren","provide","getCurrentInstance","openBlock","createElementBlock","class","normalizeClass","_ctx","b","is","draggingNode","dropType","createBlock","_component_el_tree_node","child","createElementVNode","e","createCommentVNode","withDirectives"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    ></div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  provide,\n  computed,\n  watch,\n  getCurrentInstance,\n} from 'vue'\nimport { useLocale, useNamespace } from '@tw-element/hooks'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport TwTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType, Component } from 'vue'\nimport type { Nullable } from '@tw-element/utils'\nimport type {\n  TreeComponentProps,\n  TreeNodeData,\n  TreeKey,\n  TreeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'TwTree',\n  components: { TwTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}