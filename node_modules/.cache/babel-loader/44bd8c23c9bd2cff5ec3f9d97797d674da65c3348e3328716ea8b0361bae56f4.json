{"ast":null,"code":"import { defineComponent, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, normalizeStyle, createElementVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport { useTree } from './composables/useTree.mjs';\nimport TwTreeNode from './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwTreeV2\",\n  components: {\n    TwTreeNode,\n    FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance()\n    });\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    } = useTree(props, ctx.emit);\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    });\n    return {\n      t,\n      ns,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_fixed_size_list = resolveComponent(\"fixed-size-list\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [_ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {\n    key: 0,\n    \"class-name\": _ctx.ns.b(\"virtual-list\"),\n    data: _ctx.flattenTree,\n    total: _ctx.flattenTree.length,\n    height: _ctx.height,\n    \"item-size\": _ctx.itemSize,\n    \"perf-mode\": _ctx.perfMode\n  }, {\n    default: withCtx(({\n      data,\n      index,\n      style\n    }) => [(openBlock(), createBlock(_component_el_tree_node, {\n      key: data[index].key,\n      style: normalizeStyle(style),\n      node: data[index],\n      expanded: _ctx.isExpanded(data[index]),\n      \"show-checkbox\": _ctx.showCheckbox,\n      checked: _ctx.isChecked(data[index]),\n      indeterminate: _ctx.isIndeterminate(data[index]),\n      disabled: _ctx.isDisabled(data[index]),\n      current: _ctx.isCurrent(data[index]),\n      \"hidden-expand-icon\": _ctx.isForceHiddenExpandIcon(data[index]),\n      onClick: _ctx.handleNodeClick,\n      onToggle: _ctx.toggleExpand,\n      onCheck: _ctx.handleNodeCheck\n    }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"]))]),\n    _: 1\n  }, 8, [\"class-name\", \"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2))], 2);\n}\nvar TreeV2 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TreeV2 as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","TwTreeNode","FixedSizeList","props","treeProps","emits","treeEmits","setup","ctx","provide","ROOT_TREE_INJECTION_KEY","instance","getCurrentInstance","t","useLocale","ns","useNamespace","flattenTree","isNotEmpty","toggleExpand","isExpanded","isIndeterminate","isChecked","isDisabled","isCurrent","isForceHiddenExpandIcon","toggleCheckbox","handleNodeClick","handleNodeCheck","getCurrentNode","getCurrentKey","setCurrentKey","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","filter","setData","useTree","emit","expose","itemSize","openBlock","createElementBlock","class","normalizeClass","_ctx","b","m","highlightCurrent","key","data","total","length","height","default","withCtx","index","style","createBlock","_component_el_tree_node","normalizeStyle","node","expanded","showCheckbox","checked","indeterminate","disabled","current","onClick","onToggle","createElementVNode","e"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/tree-v2/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), { [ns.m('highlight-current')]: highlightCurrent }]\"\n    role=\"tree\"\n  >\n    <fixed-size-list\n      v-if=\"isNotEmpty\"\n      :class-name=\"ns.b('virtual-list')\"\n      :data=\"flattenTree\"\n      :total=\"flattenTree.length\"\n      :height=\"height\"\n      :item-size=\"itemSize\"\n      :perf-mode=\"perfMode\"\n    >\n      <template #default=\"{ data, index, style }\">\n        <el-tree-node\n          :key=\"data[index].key\"\n          :style=\"style\"\n          :node=\"data[index]\"\n          :expanded=\"isExpanded(data[index])\"\n          :show-checkbox=\"showCheckbox\"\n          :checked=\"isChecked(data[index])\"\n          :indeterminate=\"isIndeterminate(data[index])\"\n          :disabled=\"isDisabled(data[index])\"\n          :current=\"isCurrent(data[index])\"\n          :hidden-expand-icon=\"isForceHiddenExpandIcon(data[index])\"\n          @click=\"handleNodeClick\"\n          @toggle=\"toggleExpand\"\n          @check=\"handleNodeCheck\"\n        ></el-tree-node>\n      </template>\n    </fixed-size-list>\n    <div v-else :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, provide } from 'vue'\nimport { useLocale, useNamespace } from '@tw-element/hooks'\nimport { FixedSizeList } from '@tw-element/components/virtual-list'\nimport { useTree } from './composables/useTree'\nimport TwTreeNode from './tree-node.vue'\nimport { ROOT_TREE_INJECTION_KEY, treeEmits, treeProps } from './virtual-tree'\nimport type { TreeProps } from './types'\n\nexport default defineComponent({\n  name: 'TwTreeV2',\n  components: {\n    TwTreeNode,\n    FixedSizeList,\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props: TreeProps, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance(),\n    })\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      // expose\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    } = useTree(props, ctx.emit)\n\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    })\n\n    return {\n      t,\n      ns,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;AAiDA,MAAKA,SAAA,GAAaC,eAAA,CAAa;EAC7BC,IAAA,EAAM;EACNC,UAAA,EAAY;IACVC,UAAA;IACAC;EAAA;EAEFC,KAAA,EAAOC,SAAA;EACPC,KAAA,EAAOC,SAAA;EACPC,MAAMJ,KAAA,EAAkBK,GAAA,EAAK;IAC3BC,OAAA,CAAQC,uBAAA,EAAyB;MAC/BF,GAAA;MACAL,KAAA;MACAQ,QAAA,EAAUC,kBAAA;IAAA;IAEZ,MAAM;MAAEC;IAAA,IAAMC,SAAA;IACd,MAAMC,EAAA,GAAKC,YAAA,CAAa;IACxB,MAAM;MACJC,WAAA;MACAC,UAAA;MACAC,YAAA;MACAC,UAAA;MACAC,eAAA;MACAC,SAAA;MACAC,UAAA;MACAC,SAAA;MACAC,uBAAA;MACAC,cAAA;MACAC,eAAA;MACAC,eAAA;MAEAC,cAAA;MACAC,aAAA;MACAC,aAAA;MACAC,cAAA;MACAC,eAAA;MACAC,kBAAA;MACAC,mBAAA;MACAC,UAAA;MACAC,cAAA;MACAC,MAAA;MACAC;IAAA,IACEC,OAAA,CAAQrC,KAAA,EAAOK,GAAA,CAAIiC,IAAA;IAEvBjC,GAAA,CAAIkC,MAAA,CAAO;MACTb,cAAA;MACAC,aAAA;MACAC,aAAA;MACAC,cAAA;MACAC,eAAA;MACAC,kBAAA;MACAC,mBAAA;MACAC,UAAA;MACAC,cAAA;MACAC,MAAA;MACAC;IAAA;IAGF,OAAO;MACL1B,CAAA;MACAE,EAAA;MACAE,WAAA;MACA0B,QAAA,EAAU;MACVzB,UAAA;MACAC,YAAA;MACAO,cAAA;MACAN,UAAA;MACAC,eAAA;MACAC,SAAA;MACAC,UAAA;MACAC,SAAA;MACAC,uBAAA;MACAE,eAAA;MACAC;IAAA;EAAA;AAAA;;;;;EAvHoB,OAAAgB,SAAA,IAAAC,kBAAA;IACXC,KAAA,EAAAC,cAAA,EAAAC,IAAA,CAAAjC,EAAA,CAAAkC,CAAA;MAAA,CAAAD,IAAA,CAAAjC,EAAA,CAAAmC,CAAA,wBAAAF,IAAA,CAAAG;IAAA;;EAGH,I;IAELC,GAAA;IACA,cAAAJ,IAAA,CAAAjC,EAAA,CAAAkC,CAAA;IACAI,IAAA,EAAAL,IAAA,CAAA/B,WAAA;IACAqC,KAAA,EAAAN,IAAA,CAAA/B,WAAA,CAAAsC,MAAA;IACAC,MAAA,EAAAR,IAAA,CAAWQ,MAAA;IAAA,aAAAR,IAAA,CAAAL,QAAA;;EAED;IAeOc,OAAA,EAAAC,OAbH;MAAAL,IAAA;MAAAM,KAAA;MAAAC;IAAA,QAAUhB,SAAA,IAAAiB,WAAA,CAAAC,uBAAA;MAEpBV,GAAA,EAAAC,IAAA,CAAAM,KAAA,EAAAP,GAAA;MACAQ,KAAA,EAAAG,cAAA,CAAAH,KAAA;MACAI,IAAA,EAAAX,IAAA,CAAAM,KAAA;MACAM,QAAA,EAAAjB,IAAA,CAAA5B,UAAA,CAAAiC,IAAA,CAAAM,KAAA;MACA,iBAAAX,IAAA,CAAAkB,YAAA;MACAC,OAAA,EAAAnB,IAAA,CAAA1B,SAAA,CAAA+B,IAAA,CAAAM,KAAA,EAA+B;MAC/BS,aAAA,EAAApB,IAAA,CAAA3B,eAAA,CAAAgC,IAAA,CAAAM,KAAA;MACAU,QAAA,EAAArB,IAAA,CAAAzB,UAAA,CAAA8B,IAAA,CAAAM,KAAA;MACAW,OAAA,EAAAtB,IAAA,CAAAxB,SAAA,CAAA6B,IAAA,CAAAM,KAAA;MACA,sBAAAX,IAAA,CAAAvB,uBAAA,CAAA4B,IAAA,CAAAM,KAAA;MACAY,OAAA,EAAAvB,IAAA,CAAArB,eAAA;MAAO6C,QAAA,EAAAxB,IAAA,CAAA7B,YAAA;;;;SAII,wEAAAyB,SAAA,IAAAC,kBAAA;IAAAO,GAAA;;EAChB,IAAcqB,kBAAA;IACH3B,KAAA,EAAAC,cAAA,CAAAC,IAAA,CAAAjC,EAAA,CAAA2D,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}