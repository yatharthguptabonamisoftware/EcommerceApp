{"ast":null,"code":"import { isVNode, defineComponent, renderSlot, createVNode, createTextVNode } from 'vue';\nimport { isString, isArray } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport Item from './item.mjs';\nimport { useSpace } from './use-space.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { isNumber } from '@vueuse/core';\nimport { componentSizes } from '../../../constants/size.mjs';\nimport { isFragment, PatchFlags, isValidElementNode } from '../../../utils/vue/vnode.mjs';\nconst spaceProps = buildProps({\n  direction: {\n    type: String,\n    values: [\"horizontal\", \"vertical\"],\n    default: \"horizontal\"\n  },\n  class: {\n    type: definePropType([String, Object, Array]),\n    default: \"\"\n  },\n  style: {\n    type: definePropType([String, Array, Object]),\n    default: \"\"\n  },\n  alignment: {\n    type: definePropType(String),\n    default: \"center\"\n  },\n  prefixCls: {\n    type: String\n  },\n  spacer: {\n    type: definePropType([Object, String, Number, Array]),\n    default: null,\n    validator: val => isVNode(val) || isNumber(val) || isString(val)\n  },\n  wrap: {\n    type: Boolean,\n    default: false\n  },\n  fill: {\n    type: Boolean,\n    default: false\n  },\n  fillRatio: {\n    type: Number,\n    default: 100\n  },\n  size: {\n    type: [String, Array, Number],\n    values: componentSizes,\n    validator: val => {\n      return isNumber(val) || isArray(val) && val.length === 2 && val.every(i => isNumber(i));\n    }\n  }\n});\nvar Space = defineComponent({\n  name: \"TwSpace\",\n  props: spaceProps,\n  setup(props, {\n    slots\n  }) {\n    const {\n      classes,\n      containerStyle,\n      itemStyle\n    } = useSpace(props);\n    return () => {\n      var _a;\n      const {\n        spacer,\n        prefixCls,\n        direction\n      } = props;\n      const children = renderSlot(slots, \"default\", {\n        key: 0\n      }, () => []);\n      if (((_a = children.children) != null ? _a : []).length === 0) return null;\n      if (isArray(children.children)) {\n        let extractedChildren = [];\n        children.children.forEach((child, loopKey) => {\n          if (isFragment(child)) {\n            if (isArray(child.children)) {\n              child.children.forEach((nested, key) => {\n                extractedChildren.push(createVNode(Item, {\n                  style: itemStyle.value,\n                  prefixCls,\n                  key: `nested-${key}`\n                }, {\n                  default: () => [nested]\n                }, PatchFlags.PROPS | PatchFlags.STYLE, [\"style\", \"prefixCls\"]));\n              });\n            }\n          } else if (isValidElementNode(child)) {\n            extractedChildren.push(createVNode(Item, {\n              style: itemStyle.value,\n              prefixCls,\n              key: `LoopKey${loopKey}`\n            }, {\n              default: () => [child]\n            }, PatchFlags.PROPS | PatchFlags.STYLE, [\"style\", \"prefixCls\"]));\n          }\n        });\n        if (spacer) {\n          const len = extractedChildren.length - 1;\n          extractedChildren = extractedChildren.reduce((acc, child, idx) => {\n            const children2 = [...acc, child];\n            if (idx !== len) {\n              children2.push(createVNode(\"span\", {\n                style: [itemStyle.value, direction === \"vertical\" ? \"width: 100%\" : null],\n                key: idx\n              }, [isVNode(spacer) ? spacer : createTextVNode(spacer, PatchFlags.TEXT)], PatchFlags.STYLE));\n            }\n            return children2;\n          }, []);\n        }\n        return createVNode(\"div\", {\n          class: classes.value,\n          style: containerStyle.value\n        }, extractedChildren, PatchFlags.STYLE | PatchFlags.CLASS);\n      }\n      return children.children;\n    };\n  }\n});\nexport { Space as default, spaceProps };","map":{"version":3,"names":["spaceProps","buildProps","direction","type","String","values","default","class","definePropType","Object","Array","style","alignment","prefixCls","spacer","Number","validator","val","isVNode","isNumber","isString","wrap","Boolean","fill","fillRatio","size","componentSizes","isArray","length","every","i","Space","defineComponent","name","props","setup","slots","classes","containerStyle","itemStyle","useSpace","_a","children","renderSlot","key","extractedChildren","forEach","child","loopKey","isFragment","nested","push","createVNode","Item","value","PatchFlags","PROPS","STYLE","isValidElementNode","len","reduce","acc","idx","children2","createTextVNode","TEXT","CLASS"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/space/src/space.ts"],"sourcesContent":["import {\n  defineComponent,\n  renderSlot,\n  createVNode,\n  createTextVNode,\n  isVNode,\n} from 'vue'\nimport { isString } from '@vue/shared'\nimport {\n  PatchFlags,\n  isFragment,\n  isValidElementNode,\n  buildProps,\n  definePropType,\n  isArray,\n  isNumber,\n} from '@tw-element/utils'\nimport { componentSizes } from '@tw-element/constants'\nimport Item from './item.vue'\nimport { useSpace } from './use-space'\n\nimport type { VNode, StyleValue, ExtractPropTypes, VNodeChild } from 'vue'\nimport type { AlignItemsProperty } from 'csstype'\n\nexport const spaceProps = buildProps({\n  direction: {\n    type: String,\n    values: ['horizontal', 'vertical'],\n    default: 'horizontal',\n  },\n\n  class: {\n    type: definePropType<string | string[] | Record<string, boolean>>([\n      String,\n      Object,\n      Array,\n    ]),\n    default: '',\n  },\n\n  style: {\n    type: definePropType<StyleValue>([String, Array, Object]),\n    default: '',\n  },\n\n  alignment: {\n    type: definePropType<AlignItemsProperty>(String),\n    default: 'center',\n  },\n\n  prefixCls: {\n    type: String,\n  },\n\n  spacer: {\n    type: definePropType<VNodeChild>([Object, String, Number, Array]),\n    default: null,\n    validator: (val: unknown) => isVNode(val) || isNumber(val) || isString(val),\n  },\n\n  wrap: {\n    type: Boolean,\n    default: false,\n  },\n\n  fill: {\n    type: Boolean,\n    default: false,\n  },\n\n  fillRatio: {\n    type: Number,\n    default: 100,\n  },\n\n  size: {\n    type: [String, Array, Number],\n    values: componentSizes,\n    validator: (val: unknown): val is [number, number] | number => {\n      return (\n        isNumber(val) ||\n        (isArray(val) && val.length === 2 && val.every((i) => isNumber(i)))\n      )\n    },\n  },\n} as const)\nexport type SpaceProps = ExtractPropTypes<typeof spaceProps>\n\nexport default defineComponent({\n  name: 'TwSpace',\n\n  props: spaceProps,\n\n  setup(props, { slots }) {\n    const { classes, containerStyle, itemStyle } = useSpace(props)\n\n    return () => {\n      const { spacer, prefixCls, direction } = props\n\n      const children = renderSlot(slots, 'default', { key: 0 }, () => [])\n      // retrieve the children out via a simple for loop\n      // the edge case here is that when users uses directives like <v-for>, <v-if>\n      // we need to go one layer deeper\n\n      if ((children.children ?? []).length === 0) return null\n\n      // loop the children, if current children is rendered via `renderList` or `<v-for>`\n      if (isArray(children.children)) {\n        let extractedChildren: VNode[] = []\n        children.children.forEach((child, loopKey) => {\n          if (isFragment(child)) {\n            if (isArray(child.children)) {\n              child.children.forEach((nested, key) => {\n                extractedChildren.push(\n                  createVNode(\n                    Item,\n                    {\n                      style: itemStyle.value,\n                      prefixCls,\n                      key: `nested-${key}`,\n                    },\n                    {\n                      default: () => [nested],\n                    },\n                    PatchFlags.PROPS | PatchFlags.STYLE,\n                    ['style', 'prefixCls']\n                  )\n                )\n              })\n            }\n            // if the current child is valid vnode, then append this current vnode\n            // to item as child node.\n          } else if (isValidElementNode(child)) {\n            extractedChildren.push(\n              createVNode(\n                Item,\n                {\n                  style: itemStyle.value,\n                  prefixCls,\n                  key: `LoopKey${loopKey}`,\n                },\n                {\n                  default: () => [child],\n                },\n                PatchFlags.PROPS | PatchFlags.STYLE,\n                ['style', 'prefixCls']\n              )\n            )\n          }\n        })\n\n        if (spacer) {\n          // track the current rendering index, when encounters the last element\n          // then no need to add a spacer after it.\n          const len = extractedChildren.length - 1\n          extractedChildren = extractedChildren.reduce<VNode[]>(\n            (acc, child, idx) => {\n              const children = [...acc, child]\n              if (idx !== len) {\n                children.push(\n                  createVNode(\n                    'span',\n                    // adding width 100% for vertical alignment,\n                    // when the spacer inherit the width from the\n                    // parent, this span's width was not set, so space\n                    // might disappear\n                    {\n                      style: [\n                        itemStyle.value,\n                        direction === 'vertical' ? 'width: 100%' : null,\n                      ],\n                      key: idx,\n                    },\n                    [\n                      // if spacer is already a valid vnode, then append it to the current\n                      // span element.\n                      // otherwise, treat it as string.\n                      isVNode(spacer)\n                        ? spacer\n                        : createTextVNode(spacer as string, PatchFlags.TEXT),\n                    ],\n                    PatchFlags.STYLE\n                  )\n                )\n              }\n              return children\n            },\n            []\n          )\n        }\n\n        // spacer container.\n        return createVNode(\n          'div',\n          {\n            class: classes.value,\n            style: containerStyle.value,\n          },\n          extractedChildren,\n          PatchFlags.STYLE | PatchFlags.CLASS\n        )\n      }\n\n      return children.children\n    }\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}