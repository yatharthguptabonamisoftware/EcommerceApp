{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, provide, reactive, watch, onBeforeUpdate, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock } from 'vue';\nimport { isEqual, flattenDeep } from 'lodash-unified';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport TwCascaderMenu from './menu.mjs';\nimport Store from './store.mjs';\nimport Node, { ExpandTrigger } from './node2.mjs';\nimport { CommonProps, useCascaderConfig } from './config.mjs';\nimport { sortByOriginalOrder, checkNode, getMenuIndex } from './utils.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { isEmpty } from '../../../utils/types.mjs';\nimport { unique, castArray } from '../../../utils/arrays.mjs';\nimport { scrollIntoView } from '../../../utils/dom/scroll.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwCascaderPanel\",\n  components: {\n    TwCascaderMenu\n  },\n  props: {\n    ...CommonProps,\n    border: {\n      type: Boolean,\n      default: true\n    },\n    renderLabel: Function\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"close\", \"expand-change\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    let manualChecked = false;\n    const config = useCascaderConfig(props);\n    let store = null;\n    const initialLoaded = ref(true);\n    const menuList = ref([]);\n    const checkedValue = ref(null);\n    const menus = ref([]);\n    const expandingNode = ref(null);\n    const checkedNodes = ref([]);\n    const isHoverMenu = computed(() => config.value.expandTrigger === ExpandTrigger.HOVER);\n    const renderLabelFn = computed(() => props.renderLabel || slots.default);\n    const initStore = () => {\n      const {\n        options\n      } = props;\n      const cfg = config.value;\n      manualChecked = false;\n      store = new Store(options, cfg);\n      menus.value = [store.getNodes()];\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false;\n        lazyLoad(void 0, list => {\n          if (list) {\n            store = new Store(list, cfg);\n            menus.value = [store.getNodes()];\n          }\n          initialLoaded.value = true;\n          syncCheckedValue(false, true);\n        });\n      } else {\n        syncCheckedValue(false, true);\n      }\n    };\n    const lazyLoad = (node, cb) => {\n      const cfg = config.value;\n      node = node || new Node({}, cfg, void 0, true);\n      node.loading = true;\n      const resolve = dataList => {\n        const _node = node;\n        const parent = _node.root ? null : _node;\n        dataList && (store == null ? void 0 : store.appendNodes(dataList, parent));\n        _node.loading = false;\n        _node.loaded = true;\n        _node.childrenData = _node.childrenData || [];\n        cb && cb(dataList);\n      };\n      cfg.lazyLoad(node, resolve);\n    };\n    const expandNode = (node, silent) => {\n      var _a;\n      const {\n        level\n      } = node;\n      const newMenus = menus.value.slice(0, level);\n      let newExpandingNode;\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2];\n      } else {\n        newExpandingNode = node;\n        newMenus.push(node.children);\n      }\n      if (((_a = expandingNode.value) == null ? void 0 : _a.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {\n        expandingNode.value = node;\n        menus.value = newMenus;\n        !silent && emit(\"expand-change\", (node == null ? void 0 : node.pathValues) || []);\n      }\n    };\n    const handleCheckChange = (node, checked, emitClose = true) => {\n      const {\n        checkStrictly,\n        multiple\n      } = config.value;\n      const oldNode = checkedNodes.value[0];\n      manualChecked = true;\n      !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));\n      node.doCheck(checked);\n      calculateCheckedValue();\n      emitClose && !multiple && !checkStrictly && emit(\"close\");\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node);\n    };\n    const expandParentNode = node => {\n      if (!node) return;\n      node = node.parent;\n      expandParentNode(node);\n      node && expandNode(node);\n    };\n    const getFlattedNodes = leafOnly => {\n      return store == null ? void 0 : store.getFlattedNodes(leafOnly);\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = getFlattedNodes(leafOnly)) == null ? void 0 : _a.filter(node => node.checked !== false);\n    };\n    const clearCheckedNodes = () => {\n      checkedNodes.value.forEach(node => node.doCheck(false));\n      calculateCheckedValue();\n    };\n    const calculateCheckedValue = () => {\n      var _a;\n      const {\n        checkStrictly,\n        multiple\n      } = config.value;\n      const oldNodes = checkedNodes.value;\n      const newNodes = getCheckedNodes(!checkStrictly);\n      const nodes = sortByOriginalOrder(oldNodes, newNodes);\n      const values = nodes.map(node => node.valueByOption);\n      checkedNodes.value = nodes;\n      checkedValue.value = multiple ? values : (_a = values[0]) != null ? _a : null;\n    };\n    const syncCheckedValue = (loaded = false, forced = false) => {\n      const {\n        modelValue\n      } = props;\n      const {\n        lazy,\n        multiple,\n        checkStrictly\n      } = config.value;\n      const leafOnly = !checkStrictly;\n      if (!initialLoaded.value || manualChecked || !forced && isEqual(modelValue, checkedValue.value)) return;\n      if (lazy && !loaded) {\n        const values = unique(flattenDeep(castArray(modelValue)));\n        const nodes = values.map(val => store == null ? void 0 : store.getNodeByValue(val)).filter(node => !!node && !node.loaded && !node.loading);\n        if (nodes.length) {\n          nodes.forEach(node => {\n            lazyLoad(node, () => syncCheckedValue(false, forced));\n          });\n        } else {\n          syncCheckedValue(true, forced);\n        }\n      } else {\n        const values = multiple ? castArray(modelValue) : [modelValue];\n        const nodes = unique(values.map(val => store == null ? void 0 : store.getNodeByValue(val, leafOnly)));\n        syncMenuState(nodes, false);\n        checkedValue.value = modelValue;\n      }\n    };\n    const syncMenuState = (newCheckedNodes, reserveExpandingState = true) => {\n      const {\n        checkStrictly\n      } = config.value;\n      const oldNodes = checkedNodes.value;\n      const newNodes = newCheckedNodes.filter(node => !!node && (checkStrictly || node.isLeaf));\n      const oldExpandingNode = store == null ? void 0 : store.getSameNode(expandingNode.value);\n      const newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach(node => expandNode(node, true));\n      } else {\n        expandingNode.value = null;\n      }\n      oldNodes.forEach(node => node.doCheck(false));\n      newNodes.forEach(node => node.doCheck(true));\n      checkedNodes.value = newNodes;\n      nextTick(scrollToExpandingNode);\n    };\n    const scrollToExpandingNode = () => {\n      if (!isClient) return;\n      menuList.value.forEach(menu => {\n        const menuElement = menu == null ? void 0 : menu.$el;\n        if (menuElement) {\n          const container = menuElement.querySelector(\".el-scrollbar__wrap\");\n          const activeNode = menuElement.querySelector(\".el-cascader-node.is-active\") || menuElement.querySelector(\".el-cascader-node.in-active-path\");\n          scrollIntoView(container, activeNode);\n        }\n      });\n    };\n    const handleKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            e.preventDefault();\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, '.el-cascader-node[tabindex=\"-1\"]'));\n            break;\n          }\n        case EVENT_CODE.left:\n          {\n            e.preventDefault();\n            const preMenu = menuList.value[getMenuIndex(target) - 1];\n            const expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector('.el-cascader-node[aria-expanded=\"true\"]');\n            focusNode(expandedNode);\n            break;\n          }\n        case EVENT_CODE.right:\n          {\n            e.preventDefault();\n            const nextMenu = menuList.value[getMenuIndex(target) + 1];\n            const firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector('.el-cascader-node[tabindex=\"-1\"]');\n            focusNode(firstNode);\n            break;\n          }\n        case EVENT_CODE.enter:\n          checkNode(target);\n          break;\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          emit(\"close\");\n          break;\n      }\n    };\n    provide(CASCADER_PANEL_INJECTION_KEY, reactive({\n      config,\n      expandingNode,\n      checkedNodes,\n      isHoverMenu,\n      initialLoaded,\n      renderLabelFn,\n      lazyLoad,\n      expandNode,\n      handleCheckChange\n    }));\n    watch([config, () => props.options], initStore, {\n      deep: true,\n      immediate: true\n    });\n    watch(() => props.modelValue, () => {\n      manualChecked = false;\n      syncCheckedValue();\n    });\n    watch(checkedValue, val => {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n      }\n    });\n    onBeforeUpdate(() => menuList.value = []);\n    onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue());\n    return {\n      menuList,\n      menus,\n      checkedNodes,\n      handleKeyDown,\n      handleCheckChange,\n      getFlattedNodes,\n      getCheckedNodes,\n      clearCheckedNodes,\n      calculateCheckedValue,\n      scrollToExpandingNode\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_menu = resolveComponent(\"el-cascader-menu\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-cascader-panel\", _ctx.border && \"is-bordered\"]),\n    onKeydown: _cache[0] || (_cache[0] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.menus, (menu, index) => {\n    return openBlock(), createBlock(_component_el_cascader_menu, {\n      key: index,\n      ref_for: true,\n      ref: item => _ctx.menuList[index] = item,\n      index,\n      nodes: menu\n    }, null, 8, [\"index\", \"nodes\"]);\n  }), 128))], 34);\n}\nvar CascaderPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { CascaderPanel as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","TwCascaderMenu","props","CommonProps","border","type","Boolean","default","renderLabel","Function","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","slots","manualChecked","config","useCascaderConfig","store","initialLoaded","ref","menuList","checkedValue","menus","expandingNode","checkedNodes","isHoverMenu","computed","value","expandTrigger","ExpandTrigger","HOVER","renderLabelFn","initStore","options","cfg","Store","getNodes","lazy","isEmpty","lazyLoad","list","syncCheckedValue","node","cb","Node","loading","resolve","dataList","_node","parent","root","appendNodes","loaded","childrenData","expandNode","silent","_a","level","newMenus","slice","newExpandingNode","isLeaf","pathNodes","push","children","uid","pathValues","handleCheckChange","checked","emitClose","checkStrictly","multiple","oldNode","doCheck","calculateCheckedValue","expandParentNode","getFlattedNodes","leafOnly","getCheckedNodes","filter","clearCheckedNodes","forEach","oldNodes","newNodes","nodes","sortByOriginalOrder","values","map","valueByOption","forced","modelValue","isEqual","unique","flattenDeep","castArray","val","getNodeByValue","length","syncMenuState","newCheckedNodes","reserveExpandingState","oldExpandingNode","getSameNode","nextTick","scrollToExpandingNode","isClient","menu","menuElement","$el","container","querySelector","activeNode","scrollIntoView","handleKeyDown","e","target","code","EVENT_CODE","up","down","preventDefault","distance","focusNode","getSibling","left","preMenu","getMenuIndex","expandedNode","right","nextMenu","firstNode","enter","checkNode","esc","tab","provide","CASCADER_PANEL_INJECTION_KEY","reactive","watch","deep","immediate","onBeforeUpdate","onMounted","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_el_cascader_menu","resolveComponent","args","openBlock","createBlock","key","index","ref_for"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/cascader-panel/src/index.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"['el-cascader-panel', border && 'is-bordered']\"\n    @keydown=\"handleKeyDown\"\n  >\n    <el-cascader-menu\n      v-for=\"(menu, index) in menus\"\n      :key=\"index\"\n      :ref=\"(item) => (menuList[index] = item)\"\n      :index=\"index\"\n      :nodes=\"menu\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUpdate,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { isEqual, flattenDeep } from 'lodash-unified'\nimport { isClient } from '@vueuse/core'\nimport {\n  focusNode,\n  getSibling,\n  isEmpty,\n  unique,\n  castArray,\n  scrollIntoView,\n} from '@tw-element/utils'\nimport {\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n  CHANGE_EVENT,\n} from '@tw-element/constants'\n\nimport TwCascaderMenu from './menu.vue'\nimport Store from './store'\nimport Node, { ExpandTrigger } from './node'\nimport { CommonProps, useCascaderConfig } from './config'\nimport { checkNode, getMenuIndex, sortByOriginalOrder } from './utils'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@tw-element/utils'\nimport type {\n  CascaderValue,\n  CascaderNodeValue,\n  CascaderOption,\n  RenderLabel,\n  default as CascaderNode,\n} from './node'\n\nimport type { TwCascaderPanelContext } from './types'\n\nexport default defineComponent({\n  name: 'TwCascaderPanel',\n\n  components: {\n    TwCascaderMenu,\n  },\n\n  props: {\n    ...CommonProps,\n    border: {\n      type: Boolean,\n      default: true,\n    },\n    renderLabel: Function as PropType<RenderLabel>,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, 'close', 'expand-change'],\n\n  setup(props, { emit, slots }) {\n    // for interrupt sync check status in lazy mode\n    let manualChecked = false\n\n    const config = useCascaderConfig(props)\n\n    let store: Nullable<Store> = null\n    const initialLoaded = ref(true)\n    const menuList = ref<any[]>([])\n    const checkedValue = ref<Nullable<CascaderValue>>(null)\n    const menus = ref<CascaderNode[][]>([])\n    const expandingNode = ref<Nullable<CascaderNode>>(null)\n    const checkedNodes = ref<CascaderNode[]>([])\n\n    const isHoverMenu = computed(\n      () => config.value.expandTrigger === ExpandTrigger.HOVER\n    )\n    const renderLabelFn = computed(() => props.renderLabel || slots.default)\n\n    const initStore = () => {\n      const { options } = props\n      const cfg = config.value\n\n      manualChecked = false\n      store = new Store(options, cfg)\n      menus.value = [store.getNodes()]\n\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false\n        lazyLoad(undefined, (list) => {\n          if (list) {\n            store = new Store(list, cfg)\n            menus.value = [store.getNodes()]\n          }\n          initialLoaded.value = true\n          syncCheckedValue(false, true)\n        })\n      } else {\n        syncCheckedValue(false, true)\n      }\n    }\n\n    const lazyLoad: TwCascaderPanelContext['lazyLoad'] = (node, cb) => {\n      const cfg = config.value\n      node! = node || new Node({}, cfg, undefined, true)\n      node.loading = true\n\n      const resolve = (dataList: CascaderOption[]) => {\n        const _node = node as Node\n        const parent = _node.root ? null : _node\n        dataList && store?.appendNodes(dataList, parent as any)\n        _node.loading = false\n        _node.loaded = true\n        _node.childrenData = _node.childrenData || []\n        cb && cb(dataList)\n      }\n\n      cfg.lazyLoad(node, resolve as any)\n    }\n\n    const expandNode: TwCascaderPanelContext['expandNode'] = (node, silent) => {\n      const { level } = node\n      const newMenus = menus.value.slice(0, level)\n      let newExpandingNode: Nullable<CascaderNode>\n\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2]\n      } else {\n        newExpandingNode = node\n        newMenus.push(node.children)\n      }\n\n      if (expandingNode.value?.uid !== newExpandingNode?.uid) {\n        expandingNode.value = node\n        menus.value = newMenus\n        !silent && emit('expand-change', node?.pathValues || [])\n      }\n    }\n\n    const handleCheckChange: TwCascaderPanelContext['handleCheckChange'] = (\n      node,\n      checked,\n      emitClose = true\n    ) => {\n      const { checkStrictly, multiple } = config.value\n      const oldNode = checkedNodes.value[0]\n      manualChecked = true\n\n      !multiple && oldNode?.doCheck(false)\n      node.doCheck(checked)\n      calculateCheckedValue()\n      emitClose && !multiple && !checkStrictly && emit('close')\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node)\n    }\n\n    const expandParentNode = (node) => {\n      if (!node) return\n      node = node.parent\n      expandParentNode(node)\n      node && expandNode(node)\n    }\n\n    const getFlattedNodes = (leafOnly: boolean) => {\n      return store?.getFlattedNodes(leafOnly)\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return getFlattedNodes(leafOnly)?.filter((node) => node.checked !== false)\n    }\n\n    const clearCheckedNodes = () => {\n      checkedNodes.value.forEach((node) => node.doCheck(false))\n      calculateCheckedValue()\n    }\n\n    const calculateCheckedValue = () => {\n      const { checkStrictly, multiple } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = getCheckedNodes(!checkStrictly)!\n      // ensure the original order\n      const nodes = sortByOriginalOrder(oldNodes, newNodes)\n      const values = nodes.map((node) => node.valueByOption)\n      checkedNodes.value = nodes\n      checkedValue.value = multiple ? values : values[0] ?? null\n    }\n\n    const syncCheckedValue = (loaded = false, forced = false) => {\n      const { modelValue } = props\n      const { lazy, multiple, checkStrictly } = config.value\n      const leafOnly = !checkStrictly\n\n      if (\n        !initialLoaded.value ||\n        manualChecked ||\n        (!forced && isEqual(modelValue, checkedValue.value))\n      )\n        return\n\n      if (lazy && !loaded) {\n        const values: CascaderNodeValue[] = unique(\n          flattenDeep(castArray(modelValue))\n        )\n        const nodes = values\n          .map((val) => store?.getNodeByValue(val))\n          .filter((node) => !!node && !node.loaded && !node.loading) as Node[]\n\n        if (nodes.length) {\n          nodes.forEach((node) => {\n            lazyLoad(node, () => syncCheckedValue(false, forced))\n          })\n        } else {\n          syncCheckedValue(true, forced)\n        }\n      } else {\n        const values = multiple ? castArray(modelValue) : [modelValue]\n        const nodes = unique(\n          values.map((val) => store?.getNodeByValue(val, leafOnly))\n        ) as Node[]\n        syncMenuState(nodes, false)\n        checkedValue.value = modelValue!\n      }\n    }\n\n    const syncMenuState = (\n      newCheckedNodes: CascaderNode[],\n      reserveExpandingState = true\n    ) => {\n      const { checkStrictly } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = newCheckedNodes.filter(\n        (node) => !!node && (checkStrictly || node.isLeaf)\n      )\n      const oldExpandingNode = store?.getSameNode(expandingNode.value!)\n      const newExpandingNode =\n        (reserveExpandingState && oldExpandingNode) || newNodes[0]\n\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach((node) => expandNode(node, true))\n      } else {\n        expandingNode.value = null\n      }\n\n      oldNodes.forEach((node) => node.doCheck(false))\n      newNodes.forEach((node) => node.doCheck(true))\n\n      checkedNodes.value = newNodes\n      nextTick(scrollToExpandingNode)\n    }\n\n    const scrollToExpandingNode = () => {\n      if (!isClient) return\n\n      menuList.value.forEach((menu) => {\n        const menuElement = menu?.$el\n        if (menuElement) {\n          const container = (menuElement as HTMLElement).querySelector(\n            '.el-scrollbar__wrap'\n          )\n          const activeNode =\n            menuElement.querySelector('.el-cascader-node.is-active') ||\n            menuElement.querySelector('.el-cascader-node.in-active-path')\n          scrollIntoView(container as HTMLElement, activeNode)\n        }\n      })\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          e.preventDefault()\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(target, distance, '.el-cascader-node[tabindex=\"-1\"]')\n          )\n          break\n        }\n        case EVENT_CODE.left: {\n          e.preventDefault()\n          const preMenu = menuList.value[getMenuIndex(target) - 1]\n          const expandedNode = preMenu?.$el.querySelector(\n            '.el-cascader-node[aria-expanded=\"true\"]'\n          )\n          focusNode(expandedNode)\n          break\n        }\n        case EVENT_CODE.right: {\n          e.preventDefault()\n          const nextMenu = menuList.value[getMenuIndex(target) + 1]\n          const firstNode = nextMenu?.$el.querySelector(\n            '.el-cascader-node[tabindex=\"-1\"]'\n          )\n          focusNode(firstNode)\n          break\n        }\n        case EVENT_CODE.enter:\n          checkNode(target)\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          emit('close')\n          break\n      }\n    }\n\n    provide(\n      CASCADER_PANEL_INJECTION_KEY,\n      reactive({\n        config,\n        expandingNode,\n        checkedNodes,\n        isHoverMenu,\n        initialLoaded,\n        renderLabelFn,\n        lazyLoad,\n        expandNode,\n        handleCheckChange,\n      })\n    )\n\n    watch([config, () => props.options], initStore, {\n      deep: true,\n      immediate: true,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        manualChecked = false\n        syncCheckedValue()\n      }\n    )\n\n    watch(checkedValue, (val) => {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val)\n        emit(CHANGE_EVENT, val)\n      }\n    })\n\n    onBeforeUpdate(() => (menuList.value = []))\n\n    onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue())\n\n    return {\n      menuList,\n      menus,\n      checkedNodes,\n      handleKeyDown,\n      handleCheckChange,\n      getFlattedNodes,\n      getCheckedNodes,\n      clearCheckedNodes,\n      calculateCheckedValue,\n      scrollToExpandingNode,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}