{"ast":null,"code":"import { defineComponent, inject, computed, ref, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { selectKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/dom/resize-event.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwSelectDropdown\",\n  componentName: \"TwSelectDropdown\",\n  setup() {\n    const select = inject(selectKey);\n    const ns = useNamespace(\"select\");\n    const popperClass = computed(() => select.props.popperClass);\n    const isMultiple = computed(() => select.props.multiple);\n    const isFitInputWidth = computed(() => select.props.fitInputWidth);\n    const minWidth = ref(\"\");\n    function updateMinWidth() {\n      var _a;\n      minWidth.value = `${(_a = select.selectWrapper) == null ? void 0 : _a.getBoundingClientRect().width}px`;\n    }\n    onMounted(() => {\n      updateMinWidth();\n      addResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    onBeforeUnmount(() => {\n      removeResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    return {\n      ns,\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(\"dropdown\"), _ctx.ns.is(\"multiple\", _ctx.isMultiple), _ctx.popperClass]),\n    style: normalizeStyle({\n      [_ctx.isFitInputWidth ? \"width\" : \"minWidth\"]: _ctx.minWidth\n    })\n  }, [renderSlot(_ctx.$slots, \"default\")], 6);\n}\nvar TwSelectMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TwSelectMenu as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","componentName","setup","select","inject","selectKey","ns","useNamespace","popperClass","computed","props","isMultiple","multiple","isFitInputWidth","fitInputWidth","minWidth","ref","updateMinWidth","_a","value","selectWrapper","getBoundingClientRect","width","onMounted","addResizeListener","onBeforeUnmount","removeResizeListener","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","class","normalizeClass","b","is"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/select/src/select-dropdown.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('dropdown'), ns.is('multiple', isMultiple), popperClass]\"\n    :style=\"{ [isFitInputWidth ? 'width' : 'minWidth']: minWidth }\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  onMounted,\n  onBeforeUnmount,\n  inject,\n  ref,\n} from 'vue'\nimport { useNamespace } from '@tw-element/hooks'\nimport { addResizeListener, removeResizeListener } from '@tw-element/utils'\nimport { selectKey } from './token'\nimport type { ResizableElement } from '@tw-element/utils'\n\nexport default defineComponent({\n  name: 'TwSelectDropdown',\n\n  componentName: 'TwSelectDropdown',\n\n  setup() {\n    const select = inject(selectKey)!\n    const ns = useNamespace('select')\n\n    // computed\n    const popperClass = computed(() => select.props.popperClass)\n    const isMultiple = computed(() => select.props.multiple)\n    const isFitInputWidth = computed(() => select.props.fitInputWidth)\n    const minWidth = ref('')\n\n    function updateMinWidth() {\n      minWidth.value = `${\n        select.selectWrapper?.getBoundingClientRect().width\n      }px`\n    }\n\n    onMounted(() => {\n      // TODO: updatePopper\n      // popper.value.update()\n      updateMinWidth()\n      addResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    return {\n      ns,\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;AAuBA,MAAKA,SAAA,GAAaC,eAAA,CAAa;EAC7BC,IAAA,EAAM;EAENC,aAAA,EAAe;EAEfC,MAAA,EAAQ;IACN,MAAMC,MAAA,GAASC,MAAA,CAAOC,SAAA;IACtB,MAAMC,EAAA,GAAKC,YAAA,CAAa;IAGxB,MAAMC,WAAA,GAAcC,QAAA,CAAS,MAAMN,MAAA,CAAOO,KAAA,CAAMF,WAAA;IAChD,MAAMG,UAAA,GAAaF,QAAA,CAAS,MAAMN,MAAA,CAAOO,KAAA,CAAME,QAAA;IAC/C,MAAMC,eAAA,GAAkBJ,QAAA,CAAS,MAAMN,MAAA,CAAOO,KAAA,CAAMI,aAAA;IACpD,MAAMC,QAAA,GAAWC,GAAA,CAAI;IAErB,SAAAC,eAAA,EAA0B;MACxB,IAAAC,EAAA;MACgDH,QAAA,CAAAI,KAAA,OAAAD,EAAA,GAAAf,MAAA,CAAAiB,aAAA,qBAAAF,EAAA,CAAAG,qBAAA,GAAAC,KAAA;IAIlD;IAGEC,SAAA;MACAN,cAAA;MAEEO,iBAAA,CAAArB,MAAA,CAAAiB,aAAA,EAAAH,cAAA;IAIJ;IACEQ,eAAA;MAEEC,oBAAA,CAAAvB,MAAA,CAAAiB,aAAA,EAAAH,cAAA;IAIJ;IAAO;MAELX,EAAA;MACAS,QAAA;MACAP,WAAA;MACAG,UAAA;MAAAE;IAAA;EAAA;;SAhEIc,YAAAC,IAAA,EAAAC,MAAA,EAAAC,MAAA,EAAOC,MAAA,EAAAC,KAAA,EAAAC,QAAA;EAAc,OAAAC,SAAA,IAAAC,kBAAA;IACiCC,KAAA,EAAAC,cAAA,EAAAT,IAAA,CAAAtB,EAAA,CAAAgC,CAAA,cAAAV,IAAA,CAAAtB,EAAA,CAAAiC,EAAA,aAAAX,IAAA,CAAAjB,UAAA,GAAAiB,IAAA,CAAApB,WAAA;;;;EAE5D,I"},"metadata":{},"sourceType":"module","externalDependencies":[]}