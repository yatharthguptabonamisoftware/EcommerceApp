{"ast":null,"code":"import { warn } from 'vue';\nimport { fromPairs } from 'lodash-unified';\nimport '../types.mjs';\nimport '../objects.mjs';\nimport { isObject, hasOwn } from '@vue/shared';\nconst wrapperKey = Symbol();\nconst propKey = \"__elPropsReservedKey\";\nfunction buildProp(option, key) {\n  if (!isObject(option) || !!option[propKey]) return option;\n  const {\n    values,\n    required,\n    default: defaultValue,\n    type,\n    validator\n  } = option;\n  const _validator = values || validator ? val => {\n    let valid = false;\n    let allowedValues = [];\n    if (values) {\n      allowedValues = Array.from(values);\n      if (hasOwn(option, \"default\")) {\n        allowedValues.push(defaultValue);\n      }\n      valid || (valid = allowedValues.includes(val));\n    }\n    if (validator) valid || (valid = validator(val));\n    if (!valid && allowedValues.length > 0) {\n      const allowValuesText = [...new Set(allowedValues)].map(value => JSON.stringify(value)).join(\", \");\n      warn(`Invalid prop: validation failed${key ? ` for prop \"${key}\"` : \"\"}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);\n    }\n    return valid;\n  } : void 0;\n  const prop = {\n    type: isObject(type) && Object.getOwnPropertySymbols(type).includes(wrapperKey) ? type[wrapperKey] : type,\n    required: !!required,\n    validator: _validator,\n    [propKey]: true\n  };\n  if (hasOwn(option, \"default\")) prop.default = defaultValue;\n  return prop;\n}\nconst buildProps = props => fromPairs(Object.entries(props).map(([key, option]) => [key, buildProp(option, key)]));\nconst definePropType = val => ({\n  [wrapperKey]: val\n});\nexport { buildProp, buildProps, definePropType, propKey };","map":{"version":3,"names":["wrapperKey","Symbol","propKey","buildProp","option","key","isObject","values","required","default","defaultValue","type","validator","_validator","val","valid","allowedValues","Array","from","hasOwn","push","includes","length","allowValuesText","Set","map","value","JSON","stringify","join","warn","prop","Object","getOwnPropertySymbols","buildProps","props","fromPairs","entries","definePropType"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/utils/vue/props.ts"],"sourcesContent":["import { warn } from 'vue'\nimport { fromPairs } from 'lodash-unified'\nimport { isObject } from '../types'\nimport { hasOwn } from '../objects'\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nconst wrapperKey = Symbol()\nexport type PropWrapper<T> = { [wrapperKey]: T }\n\nexport const propKey = '__elPropsReservedKey'\n\ntype ResolveProp<T> = ExtractPropTypes<{\n  key: { type: T; required: true }\n}>['key']\ntype ResolvePropType<T> = ResolveProp<T> extends { type: infer V }\n  ? V\n  : ResolveProp<T>\ntype ResolvePropTypeWithReadonly<T> = Readonly<T> extends Readonly<\n  Array<infer A>\n>\n  ? ResolvePropType<A[]>\n  : ResolvePropType<T>\n\ntype IfUnknown<T, V> = [unknown] extends [T] ? V : T\n\nexport type BuildPropOption<T, D extends BuildPropType<T, V, C>, R, V, C> = {\n  type?: T\n  values?: readonly V[]\n  required?: R\n  default?: R extends true\n    ? never\n    : D extends Record<string, unknown> | Array<any>\n    ? () => D\n    : (() => D) | D\n  validator?: ((val: any) => val is C) | ((val: any) => boolean)\n}\n\ntype _BuildPropType<T, V, C> =\n  | (T extends PropWrapper<unknown>\n      ? T[typeof wrapperKey]\n      : [V] extends [never]\n      ? ResolvePropTypeWithReadonly<T>\n      : never)\n  | V\n  | C\nexport type BuildPropType<T, V, C> = _BuildPropType<\n  IfUnknown<T, never>,\n  IfUnknown<V, never>,\n  IfUnknown<C, never>\n>\n\ntype _BuildPropDefault<T, D> = [T] extends [\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  Record<string, unknown> | Array<any> | Function\n]\n  ? D\n  : D extends () => T\n  ? ReturnType<D>\n  : D\n\nexport type BuildPropDefault<T, D, R> = R extends true\n  ? { readonly default?: undefined }\n  : {\n      readonly default: Exclude<D, undefined> extends never\n        ? undefined\n        : Exclude<_BuildPropDefault<T, D>, undefined>\n    }\nexport type BuildPropReturn<T, D, R, V, C> = {\n  readonly type: PropType<BuildPropType<T, V, C>>\n  readonly required: IfUnknown<R, false>\n  readonly validator: ((val: unknown) => boolean) | undefined\n  [propKey]: true\n} & BuildPropDefault<\n  BuildPropType<T, V, C>,\n  IfUnknown<D, never>,\n  IfUnknown<R, false>\n>\n\n/**\n * @description Build prop. It can better optimize prop types\n * @description 生成 prop，能更好地优化类型\n * @example\n  // limited options\n  // the type will be PropType<'light' | 'dark'>\n  buildProp({\n    type: String,\n    values: ['light', 'dark'],\n  } as const)\n  * @example\n  // limited options and other types\n  // the type will be PropType<'small' | 'large' | number>\n  buildProp({\n    type: [String, Number],\n    values: ['small', 'large'],\n    validator: (val: unknown): val is number => typeof val === 'number',\n  } as const)\n  @link see more: https://github.com/element-plus/element-plus/pull/3341\n */\nexport function buildProp<\n  T = never,\n  D extends BuildPropType<T, V, C> = never,\n  R extends boolean = false,\n  V = never,\n  C = never\n>(\n  option: BuildPropOption<T, D, R, V, C>,\n  key?: string\n): BuildPropReturn<T, D, R, V, C> {\n  // filter native prop type and nested prop, e.g `null`, `undefined` (from `buildProps`)\n  if (!isObject(option) || !!option[propKey]) return option as any\n\n  const { values, required, default: defaultValue, type, validator } = option\n\n  const _validator =\n    values || validator\n      ? (val: unknown) => {\n          let valid = false\n          let allowedValues: unknown[] = []\n\n          if (values) {\n            allowedValues = Array.from(values)\n            if (hasOwn(option, 'default')) {\n              allowedValues.push(defaultValue)\n            }\n            valid ||= allowedValues.includes(val)\n          }\n          if (validator) valid ||= validator(val)\n\n          if (!valid && allowedValues.length > 0) {\n            const allowValuesText = [...new Set(allowedValues)]\n              .map((value) => JSON.stringify(value))\n              .join(', ')\n            warn(\n              `Invalid prop: validation failed${\n                key ? ` for prop \"${key}\"` : ''\n              }. Expected one of [${allowValuesText}], got value ${JSON.stringify(\n                val\n              )}.`\n            )\n          }\n          return valid\n        }\n      : undefined\n\n  const prop: any = {\n    type:\n      isObject(type) && Object.getOwnPropertySymbols(type).includes(wrapperKey)\n        ? type[wrapperKey]\n        : type,\n    required: !!required,\n    validator: _validator,\n    [propKey]: true,\n  }\n  if (hasOwn(option, 'default')) prop.default = defaultValue\n\n  return prop as BuildPropReturn<T, D, R, V, C>\n}\n\ntype NativePropType = [\n  ((...args: any) => any) | { new (...args: any): any } | undefined | null\n]\n\nexport const buildProps = <\n  O extends {\n    [K in keyof O]: O[K] extends BuildPropReturn<any, any, any, any, any>\n      ? O[K]\n      : [O[K]] extends NativePropType\n      ? O[K]\n      : O[K] extends BuildPropOption<\n          infer T,\n          infer D,\n          infer R,\n          infer V,\n          infer C\n        >\n      ? D extends BuildPropType<T, V, C>\n        ? BuildPropOption<T, D, R, V, C>\n        : never\n      : never\n  }\n>(\n  props: O\n) =>\n  fromPairs(\n    Object.entries(props).map(([key, option]) => [\n      key,\n      buildProp(option as any, key),\n    ])\n  ) as unknown as {\n    [K in keyof O]: O[K] extends { [propKey]: boolean }\n      ? O[K]\n      : [O[K]] extends NativePropType\n      ? O[K]\n      : O[K] extends BuildPropOption<\n          infer T,\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          infer _D,\n          infer R,\n          infer V,\n          infer C\n        >\n      ? BuildPropReturn<T, O[K]['default'], R, V, C>\n      : never\n  }\n\nexport const definePropType = <T>(val: any) =>\n  ({ [wrapperKey]: val } as PropWrapper<T>)\n"],"mappings":";;;;;AAIA,MAAMA,UAAU,GAAGC,MAAM,EAAE;AACf,MAACC,OAAO,GAAG;AAChB,SAASC,SAASA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACrC,IAAI,CAACC,QAAQ,CAACF,MAAM,CAAC,IAAI,CAAC,CAACA,MAAM,CAACF,OAAO,CAAC,EACxC,OAAOE,MAAM;EACf,MAAM;IAAEG,MAAM;IAAEC,QAAQ;IAAEC,OAAO,EAAEC,YAAY;IAAEC,IAAI;IAAEC;EAAS,CAAE,GAAGR,MAAM;EAC3E,MAAMS,UAAU,GAAGN,MAAM,IAAIK,SAAS,GAAIE,GAAG,IAAK;IAChD,IAAIC,KAAK,GAAG,KAAK;IACjB,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAIT,MAAM,EAAE;MACVS,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACX,MAAM,CAAC;MAClC,IAAIY,MAAM,CAACf,MAAM,EAAE,SAAS,CAAC,EAAE;QAC7BY,aAAa,CAACI,IAAI,CAACV,YAAY,CAAC;MACxC;MACMK,KAAK,KAAKA,KAAK,GAAGC,aAAa,CAACK,QAAQ,CAACP,GAAG,CAAC,CAAC;IACpD;IACI,IAAIF,SAAS,EACXG,KAAK,KAAKA,KAAK,GAAGH,SAAS,CAACE,GAAG,CAAC,CAAC;IACnC,IAAI,CAACC,KAAK,IAAIC,aAAa,CAACM,MAAM,GAAG,CAAC,EAAE;MACtC,MAAMC,eAAe,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACR,aAAa,CAAC,CAAC,CAACS,GAAG,CAAEC,KAAK,IAAKC,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;MACpGC,IAAI,CAAE,kCAAiCzB,GAAG,GAAI,cAAaA,GAAI,GAAE,GAAG,EAAG,sBAAqBkB,eAAgB,gBAAeI,IAAI,CAACC,SAAS,CAACd,GAAG,CAAE,GAAE,CAAC;IACxJ;IACI,OAAOC,KAAK;EAChB,CAAG,GAAG,KAAK,CAAC;EACV,MAAMgB,IAAI,GAAG;IACXpB,IAAI,EAAEL,QAAQ,CAACK,IAAI,CAAC,IAAIqB,MAAM,CAACC,qBAAqB,CAACtB,IAAI,CAAC,CAACU,QAAQ,CAACrB,UAAU,CAAC,GAAGW,IAAI,CAACX,UAAU,CAAC,GAAGW,IAAI;IACzGH,QAAQ,EAAE,CAAC,CAACA,QAAQ;IACpBI,SAAS,EAAEC,UAAU;IACrB,CAACX,OAAO,GAAG;EACf,CAAG;EACD,IAAIiB,MAAM,CAACf,MAAM,EAAE,SAAS,CAAC,EAC3B2B,IAAI,CAACtB,OAAO,GAAGC,YAAY;EAC7B,OAAOqB,IAAI;AACb;AACY,MAACG,UAAU,GAAIC,KAAK,IAAKC,SAAS,CAACJ,MAAM,CAACK,OAAO,CAACF,KAAK,CAAC,CAACV,GAAG,CAAC,CAAC,CAACpB,GAAG,EAAED,MAAM,CAAC,KAAK,CAC1FC,GAAG,EACHF,SAAS,CAACC,MAAM,EAAEC,GAAG,CAAC,CACvB,CAAC;AACU,MAACiC,cAAc,GAAIxB,GAAG,KAAM;EAAE,CAACd,UAAU,GAAGc;AAAG,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}