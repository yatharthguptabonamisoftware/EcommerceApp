{"ast":null,"code":"import { h, render, watch, isVNode } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport MessageBoxConstructor from './index.mjs';\nimport { hasOwn, isString } from '@vue/shared';\nconst messageInstance = /* @__PURE__ */new Map();\nconst initInstance = (props, container) => {\n  const vnode = h(MessageBoxConstructor, props);\n  render(vnode, container);\n  document.body.appendChild(container.firstElementChild);\n  return vnode.component;\n};\nconst genContainer = () => {\n  return document.createElement(\"div\");\n};\nconst showMessage = options => {\n  const container = genContainer();\n  options.onVanish = () => {\n    render(null, container);\n    messageInstance.delete(vm);\n  };\n  options.onAction = action => {\n    const currentMsg = messageInstance.get(vm);\n    let resolve;\n    if (options.showInput) {\n      resolve = {\n        value: vm.inputValue,\n        action\n      };\n    } else {\n      resolve = action;\n    }\n    if (options.callback) {\n      options.callback(resolve, instance.proxy);\n    } else {\n      if (action === \"cancel\" || action === \"close\") {\n        if (options.distinguishCancelAndClose && action !== \"cancel\") {\n          currentMsg.reject(\"close\");\n        } else {\n          currentMsg.reject(\"cancel\");\n        }\n      } else {\n        currentMsg.resolve(resolve);\n      }\n    }\n  };\n  const instance = initInstance(options, container);\n  const vm = instance.proxy;\n  for (const prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop] = options[prop];\n    }\n  }\n  watch(() => vm.message, (newVal, oldVal) => {\n    if (isVNode(newVal)) {\n      instance.slots.default = () => [newVal];\n    } else if (isVNode(oldVal) && !isVNode(newVal)) {\n      delete instance.slots.default;\n    }\n  }, {\n    immediate: true\n  });\n  vm.visible = true;\n  return vm;\n};\nfunction MessageBox(options) {\n  if (!isClient) return;\n  let callback;\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  } else {\n    callback = options.callback;\n  }\n  return new Promise((resolve, reject) => {\n    const vm = showMessage(options);\n    messageInstance.set(vm, {\n      options,\n      callback,\n      resolve,\n      reject\n    });\n  });\n}\nMessageBox.alert = (message, title, options) => {\n  if (typeof title === \"object\") {\n    options = title;\n    title = \"\";\n  } else if (title === void 0) {\n    title = \"\";\n  }\n  return MessageBox(Object.assign({\n    title,\n    message,\n    type: \"\",\n    closeOnPressEscape: false,\n    closeOnClickModal: false\n  }, options, {\n    boxType: \"alert\"\n  }));\n};\nMessageBox.confirm = (message, title, options) => {\n  if (typeof title === \"object\") {\n    options = title;\n    title = \"\";\n  } else if (title === void 0) {\n    title = \"\";\n  }\n  return MessageBox(Object.assign({\n    title,\n    message,\n    type: \"\",\n    showCancTwButton: true\n  }, options, {\n    boxType: \"confirm\"\n  }));\n};\nMessageBox.prompt = (message, title, options) => {\n  if (typeof title === \"object\") {\n    options = title;\n    title = \"\";\n  } else if (title === void 0) {\n    title = \"\";\n  }\n  return MessageBox(Object.assign({\n    title,\n    message,\n    showCancTwButton: true,\n    showInput: true,\n    type: \"\"\n  }, options, {\n    boxType: \"prompt\"\n  }));\n};\nMessageBox.close = () => {\n  messageInstance.forEach((_, vm) => {\n    vm.doClose();\n  });\n  messageInstance.clear();\n};\nexport { MessageBox as default };","map":{"version":3,"names":["messageInstance","Map","initInstance","props","container","vnode","h","MessageBoxConstructor","render","document","body","appendChild","firstElementChild","component","genContainer","createElement","showMessage","options","onVanish","delete","vm","onAction","action","currentMsg","get","resolve","showInput","value","inputValue","callback","instance","proxy","distinguishCancelAndClose","reject","prop","hasOwn","$props","watch","message","newVal","oldVal","isVNode","slots","default","immediate","visible","MessageBox","isClient","isString","Promise","set","alert","title","Object","assign","type","closeOnPressEscape","closeOnClickModal","boxType","confirm","showCancTwButton","prompt","close","forEach","_","doClose","clear"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/message-box/src/messageBox.ts"],"sourcesContent":["import { h, watch, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { isVNode, isString, hasOwn } from '@tw-element/utils'\nimport MessageBoxConstructor from './index.vue'\n\nimport type { ComponentPublicInstance, VNode } from 'vue'\nimport type {\n  Action,\n  Callback,\n  MessageBoxState,\n  ITwMessageBox,\n  TwMessageBoxOptions,\n  MessageBoxData,\n} from './message-box.type'\n\n// component default merge props & data\n\nconst messageInstance = new Map<\n  ComponentPublicInstance<{ doClose: () => void }>, // marking doClose as function\n  {\n    options: any\n    callback: Callback\n    resolve: (res: any) => void\n    reject: (reason?: any) => void\n  }\n>()\n\nconst initInstance = (props: any, container: HTMLElement) => {\n  const vnode = h(MessageBoxConstructor, props)\n  render(vnode, container)\n  document.body.appendChild(container.firstElementChild)\n  return vnode.component\n}\n\nconst genContainer = () => {\n  return document.createElement('div')\n}\n\nconst showMessage = (options: any) => {\n  const container = genContainer()\n  // Adding destruct method.\n  // when transition leaves emitting `vanish` evt. so that we can do the clean job.\n  options.onVanish = () => {\n    // not sure if this causes mem leak, need proof to verify that.\n    // maybe calling out like 1000 msg-box then close them all.\n    render(null, container)\n    messageInstance.delete(vm) // Remove vm to avoid mem leak.\n    // here we were suppose to call document.body.removeChild(container.firstElementChild)\n    // but render(null, container) did that job for us. so that we do not call that directly\n  }\n\n  options.onAction = (action: Action) => {\n    const currentMsg = messageInstance.get(vm)\n    let resolve: Action | { value: string; action: Action }\n    if (options.showInput) {\n      resolve = { value: vm.inputValue, action }\n    } else {\n      resolve = action\n    }\n    if (options.callback) {\n      options.callback(resolve, instance.proxy)\n    } else {\n      if (action === 'cancel' || action === 'close') {\n        if (options.distinguishCancelAndClose && action !== 'cancel') {\n          currentMsg.reject('close')\n        } else {\n          currentMsg.reject('cancel')\n        }\n      } else {\n        currentMsg.resolve(resolve)\n      }\n    }\n  }\n\n  const instance = initInstance(options, container)\n\n  // This is how we use message box programmably.\n  // Maybe consider releasing a template version?\n  // get component instance like v2.\n  const vm = instance.proxy as ComponentPublicInstance<\n    {\n      visible: boolean\n      doClose: () => void\n    } & MessageBoxState\n  >\n\n  for (const prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop as string] = options[prop]\n    }\n  }\n\n  watch(\n    () => vm.message,\n    (newVal, oldVal) => {\n      if (isVNode(newVal)) {\n        // Override slots since message is vnode type.\n        instance.slots.default = () => [newVal]\n      } else if (isVNode(oldVal) && !isVNode(newVal)) {\n        delete instance.slots.default\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  // change visibility after everything is settled\n  vm.visible = true\n  return vm\n}\n\nasync function MessageBox(options: TwMessageBoxOptions): Promise<MessageBoxData>\nfunction MessageBox(\n  options: TwMessageBoxOptions | string | VNode\n): Promise<{ value: string; action: Action } | Action> {\n  if (!isClient) return\n  let callback\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options,\n    }\n  } else {\n    callback = options.callback\n  }\n\n  return new Promise((resolve, reject) => {\n    const vm = showMessage(options)\n    // collect this vm in order to handle upcoming events.\n    messageInstance.set(vm, {\n      options,\n      callback,\n      resolve,\n      reject,\n    })\n  })\n}\n\nMessageBox.alert = (\n  message: string,\n  title: string,\n  options?: TwMessageBoxOptions\n) => {\n  if (typeof title === 'object') {\n    options = title\n    title = ''\n  } else if (title === undefined) {\n    title = ''\n  }\n\n  return MessageBox(\n    Object.assign(\n      {\n        title,\n        message,\n        type: '',\n        closeOnPressEscape: false,\n        closeOnClickModal: false,\n      },\n      options,\n      {\n        boxType: 'alert',\n      }\n    )\n  )\n}\n\nMessageBox.confirm = (\n  message: string,\n  title: string,\n  options?: TwMessageBoxOptions\n) => {\n  if (typeof title === 'object') {\n    options = title\n    title = ''\n  } else if (title === undefined) {\n    title = ''\n  }\n  return MessageBox(\n    Object.assign(\n      {\n        title,\n        message,\n        type: '',\n        showCancTwButton: true,\n      },\n      options,\n      {\n        boxType: 'confirm',\n      }\n    )\n  )\n}\n\nMessageBox.prompt = (\n  message: string,\n  title: string,\n  options?: TwMessageBoxOptions\n) => {\n  if (typeof title === 'object') {\n    options = title\n    title = ''\n  } else if (title === undefined) {\n    title = ''\n  }\n  return MessageBox(\n    Object.assign(\n      {\n        title,\n        message,\n        showCancTwButton: true,\n        showInput: true,\n        type: '',\n      },\n      options,\n      {\n        boxType: 'prompt',\n      }\n    )\n  )\n}\n\nMessageBox.close = () => {\n  // instance.setupInstall.doClose()\n  // instance.setupInstall.state.visible = false\n\n  messageInstance.forEach((_, vm) => {\n    vm.doClose()\n  })\n\n  messageInstance.clear()\n}\n\nexport default MessageBox as ITwMessageBox\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}