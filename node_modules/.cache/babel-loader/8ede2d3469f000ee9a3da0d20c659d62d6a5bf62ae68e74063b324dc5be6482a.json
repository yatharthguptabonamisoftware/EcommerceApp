{"ast":null,"code":"const twFormKey = Symbol(\"TwForm\");\nconst twFormItemKey = Symbol(\"TwFormItem\");\nexport { twFormItemKey, twFormKey };","map":{"version":3,"names":["twFormKey","Symbol","twFormItemKey"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/tokens/form.ts"],"sourcesContent":["import type { InjectionKey } from 'vue'\nimport type { ValidateFieldsError } from 'async-validator'\nimport type { ComponentSize } from '@tw-element/constants'\n\nexport interface TwFormContext {\n  registerLabelWidth(width: number, oldWidth: number): void\n  deregisterLabelWidth(width: number): void\n  autoLabelWidth: string | undefined\n  emit: (evt: string, ...args: any[]) => void\n  addField: (field: TwFormItemContext) => void\n  removeField: (field: TwFormItemContext) => void\n  resetFields: () => void\n  clearValidate: (props: string | string[]) => void\n  validateField: (props: string | string[], cb: ValidateFieldCallback) => void\n  labelSuffix: string\n  inline?: boolean\n  inlineMessage?: boolean\n  model?: Record<string, unknown>\n  size?: ComponentSize\n  showMessage?: boolean\n  labelPosition?: string\n  labelWidth?: string | number\n  rules?: Record<string, unknown>\n  statusIcon?: boolean\n  hideRequiredAsterisk?: boolean\n  disabled?: boolean\n}\n\nexport interface ValidateFieldCallback {\n  (isValid?: string, invalidFields?: ValidateFieldsError): void\n}\n\nexport interface TwFormItemContext {\n  prop?: string\n  size?: ComponentSize\n  validateState: string\n  $el: HTMLDivElement\n  validate(trigger: string, callback?: ValidateFieldCallback): void\n  updateComputedLabelWidth(width: number): void\n  evaluateValidationEnabled(): void\n  resetField(): void\n  clearValidate(): void\n}\n\nexport const twFormKey: InjectionKey<TwFormContext> = Symbol('TwForm')\nexport const twFormItemKey: InjectionKey<TwFormItemContext> =\n  Symbol('TwFormItem')\n"],"mappings":"AAAY,MAACA,SAAS,GAAGC,MAAM,CAAC,QAAQ;AAC5B,MAACC,aAAa,GAAGD,MAAM,CAAC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}