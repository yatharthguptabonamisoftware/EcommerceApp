{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwColorHueSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: Boolean\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const thumb = ref(null);\n    const bar = ref(null);\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const hueValue = computed(() => {\n      return props.color.get(\"hue\");\n    });\n    watch(() => hueValue.value, () => {\n      update();\n    });\n    function handleClick(event) {\n      const target = event.target;\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let hue;\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        hue = Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);\n      } else {\n        let top = clientY - rect.top;\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);\n      }\n      props.color.set(\"hue\", hue);\n    }\n    function getThumbLeft() {\n      const el = instance.vnode.el;\n      if (props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);\n    }\n    function getThumbTop() {\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);\n    }\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n    }\n    onMounted(() => {\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-color-hue-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: \"el-color-hue-slider__bar\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 512), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: \"el-color-hue-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\nvar HueSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { HueSlider as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","props","color","type","Object","required","vertical","Boolean","setup","instance","getCurrentInstance","thumb","ref","bar","thumbLeft","thumbTop","hueValue","computed","get","watch","value","update","handleClick","event","target","handleDrag","el","vnode","rect","getBoundingClientRect","clientX","clientY","getClientXY","hue","left","Math","min","width","offsetWidth","max","round","top","height","offsetHeight","set","getThumbLeft","getThumbTop","onMounted","dragConfig","drag","end","draggable","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","class","normalizeClass","_ctx","createElementVNode","onClick","args","style","normalizeStyle"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/color-picker/src/components/hue-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-hue-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div ref=\"bar\" class=\"el-color-hue-slider__bar\" @click=\"handleClick\"></div>\n    <div\n      ref=\"thumb\"\n      class=\"el-color-hue-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    ></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  ref,\n  computed,\n  watch,\n  onMounted,\n  getCurrentInstance,\n  defineComponent,\n} from 'vue'\nimport { getClientXY } from '@tw-element/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'TwColorHueSlider',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n\n    vertical: Boolean,\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = ref<HTMLElement | null>(null)\n    const bar = ref<HTMLElement | null>(null)\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    // computed\n    const hueValue = computed(() => {\n      return props.color.get('hue')\n    })\n    // watch\n    watch(\n      () => hueValue.value,\n      () => {\n        update()\n      }\n    )\n\n    // methods\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n      let hue\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n\n        hue = Math.round(\n          ((left - thumb.value.offsetWidth / 2) /\n            (rect.width - thumb.value.offsetWidth)) *\n            360\n        )\n      } else {\n        let top = clientY - rect.top\n\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        hue = Math.round(\n          ((top - thumb.value.offsetHeight / 2) /\n            (rect.height - thumb.value.offsetHeight)) *\n            360\n        )\n      }\n      props.color.set('hue', hue)\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el\n\n      if (props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 360\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el as HTMLElement\n      if (!props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 360\n      )\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}