{"ast":null,"code":"import { defineComponent, ref, inject, computed, Text, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, Fragment, renderSlot, createBlock, withCtx, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { useCssVar } from '@vueuse/core';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { TwIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { buttonProps, buttonEmits } from './button2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { buttonGroupContextKey } from '../../../tokens/button.mjs';\nimport { useGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwButton\",\n  components: {\n    TwIcon,\n    Loading\n  },\n  props: buttonProps,\n  emits: buttonEmits,\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const buttonRef = ref();\n    const buttonGroupContext = inject(buttonGroupContextKey, void 0);\n    const globalConfig = useGlobalConfig(\"button\");\n    const ns = useNamespace(\"button\");\n    const autoInsertSpace = computed(() => {\n      var _a, _b, _c;\n      return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;\n    });\n    const shouldAddSpace = computed(() => {\n      var _a;\n      const defaultSlot = (_a = slots.default) == null ? void 0 : _a.call(slots);\n      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n        const slot = defaultSlot[0];\n        if ((slot == null ? void 0 : slot.type) === Text) {\n          const text = slot.children;\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text);\n        }\n      }\n      return false;\n    });\n    const {\n      form\n    } = useFormItem();\n    const buttonSize = useSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));\n    const buttonDisabled = useDisabled();\n    const buttonType = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || \"\");\n    const typeColor = computed(() => useCssVar(`--tw-color-${props.type}`).value);\n    const buttonStyle = computed(() => {\n      let styles = {};\n      const buttonColor = props.color || typeColor.value;\n      if (buttonColor) {\n        const shadeBgColor = new TinyColor(buttonColor).shade(10).toString();\n        if (props.plain) {\n          styles = {\n            \"--tw-button-bg-color\": new TinyColor(buttonColor).tint(90).toString(),\n            \"--tw-button-text-color\": buttonColor,\n            \"--tw-button-hover-text-color\": \"var(--tw-color-white)\",\n            \"--tw-button-hover-bg-color\": buttonColor,\n            \"--tw-button-hover-border-color\": buttonColor,\n            \"--tw-button-active-bg-color\": shadeBgColor,\n            \"--tw-button-active-text-color\": \"var(--tw-color-white)\",\n            \"--tw-button-active-border-color\": shadeBgColor\n          };\n        } else {\n          const tintBgColor = new TinyColor(buttonColor).tint(20).toString();\n          styles = {\n            \"--tw-button-bg-color\": buttonColor,\n            \"--tw-button-border-color\": buttonColor,\n            \"--tw-button-hover-bg-color\": tintBgColor,\n            \"--tw-button-hover-border-color\": tintBgColor,\n            \"--tw-button-active-bg-color\": shadeBgColor,\n            \"--tw-button-active-border-color\": shadeBgColor\n          };\n        }\n        if (buttonDisabled.value) {\n          const disabledButtonColor = new TinyColor(buttonColor).tint(50).toString();\n          styles[\"--tw-button-disabled-bg-color\"] = disabledButtonColor;\n          styles[\"--tw-button-disabled-border-color\"] = disabledButtonColor;\n        }\n      }\n      return styles;\n    });\n    const handleClick = evt => {\n      if (props.nativeType === \"reset\") {\n        form == null ? void 0 : form.resetFields();\n      }\n      emit(\"click\", evt);\n    };\n    return {\n      buttonRef,\n      buttonStyle,\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n      shouldAddSpace,\n      handleClick,\n      ns\n    };\n  }\n});\nconst _hoisted_1 = [\"disabled\", \"autofocus\", \"type\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  return openBlock(), createElementBlock(\"button\", {\n    ref: \"buttonRef\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.buttonType), _ctx.ns.m(_ctx.buttonSize), _ctx.ns.is(\"disabled\", _ctx.buttonDisabled), _ctx.ns.is(\"loading\", _ctx.loading), _ctx.ns.is(\"plain\", _ctx.plain), _ctx.ns.is(\"round\", _ctx.round), _ctx.ns.is(\"circle\", _ctx.circle)]),\n    disabled: _ctx.buttonDisabled || _ctx.loading,\n    autofocus: _ctx.autofocus,\n    type: _ctx.nativeType,\n    style: normalizeStyle(_ctx.buttonStyle),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [_ctx.loading ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [_ctx.$slots.loading ? renderSlot(_ctx.$slots, \"loading\", {\n    key: 0\n  }) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass(_ctx.ns.is(\"loading\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))]),\n    _: 1\n  }, 8, [\"class\"]))], 2112)) : _ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 1\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), _ctx.$slots.default ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    class: normalizeClass({\n      [_ctx.ns.em(\"text\", \"expand\")]: _ctx.shouldAddSpace\n    })\n  }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true)], 14, _hoisted_1);\n}\nvar Button = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Button as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","TwIcon","Loading","props","buttonProps","emits","buttonEmits","setup","emit","slots","buttonRef","ref","buttonGroupContext","inject","buttonGroupContextKey","globalConfig","useGlobalConfig","ns","useNamespace","autoInsertSpace","computed","_a","_b","_c","value","shouldAddSpace","defaultSlot","default","call","length","slot","type","Text","text","children","test","form","useFormItem","buttonSize","useSize","size","buttonDisabled","useDisabled","buttonType","typeColor","useCssVar","buttonStyle","styles","buttonColor","color","shadeBgColor","TinyColor","shade","toString","plain","tint","tintBgColor","disabledButtonColor","handleClick","evt","nativeType","resetFields","_hoisted_1","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_el_icon","resolveComponent","openBlock","createElementBlock","class","normalizeClass","b","m","is","round","circle","disabled","loading","style","normalizeStyle","args","key","_","createBlock","resolveDynamicComponent","icon","$slots"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/button/src/button.vue"],"sourcesContent":["<template>\n  <button\n    ref=\"buttonRef\"\n    :class=\"[\n      ns.b(),\n      ns.m(buttonType),\n      ns.m(buttonSize),\n      ns.is('disabled', buttonDisabled),\n      ns.is('loading', loading),\n      ns.is('plain', plain),\n      ns.is('round', round),\n      ns.is('circle', circle),\n    ]\"\n    :disabled=\"buttonDisabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <template v-if=\"loading\">\n      <slot v-if=\"$slots.loading\" name=\"loading\"></slot>\n      <el-icon v-else :class=\"ns.is('loading')\">\n        <component :is=\"loadingIcon\" />\n      </el-icon>\n    </template>\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ [ns.em('text', 'expand')]: shouldAddSpace }\"\n    >\n      <slot></slot>\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent, Text, ref } from 'vue'\nimport { useCssVar } from '@vueuse/core'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { TwIcon } from '@tw-element/components/icon'\nimport {\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useNamespace,\n  useSize,\n} from '@tw-element/hooks'\nimport { buttonGroupContextKey } from '@tw-element/tokens'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport { buttonEmits, buttonProps } from './button'\n\nexport default defineComponent({\n  name: 'TwButton',\n\n  components: {\n    TwIcon,\n    Loading,\n  },\n\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(props, { emit, slots }) {\n    const buttonRef = ref()\n    const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n    const globalConfig = useGlobalConfig('button')\n    const ns = useNamespace('button')\n    const autoInsertSpace = computed(\n      () =>\n        props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n    )\n\n    // add space between two characters in Chinese\n    const shouldAddSpace = computed(() => {\n      const defaultSlot = slots.default?.()\n      if (autoInsertSpace.value && defaultSlot?.length === 1) {\n        const slot = defaultSlot[0]\n        if (slot?.type === Text) {\n          const text = slot.children\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text as string)\n        }\n      }\n      return false\n    })\n\n    const { form } = useFormItem()\n    const buttonSize = useSize(computed(() => buttonGroupContext?.size))\n    const buttonDisabled = useDisabled()\n    const buttonType = computed(\n      () => props.type || buttonGroupContext?.type || ''\n    )\n\n    // calculate hover & active color by color\n    const typeColor = computed(\n      () => useCssVar(`--tw-color-${props.type}`).value\n    )\n    const buttonStyle = computed(() => {\n      let styles = {}\n\n      const buttonColor = props.color || typeColor.value\n\n      if (buttonColor) {\n        const shadeBgColor = new TinyColor(buttonColor).shade(10).toString()\n        if (props.plain) {\n          styles = {\n            '--tw-button-bg-color': new TinyColor(buttonColor)\n              .tint(90)\n              .toString(),\n            '--tw-button-text-color': buttonColor,\n            '--tw-button-hover-text-color': 'var(--tw-color-white)',\n            '--tw-button-hover-bg-color': buttonColor,\n            '--tw-button-hover-border-color': buttonColor,\n            '--tw-button-active-bg-color': shadeBgColor,\n            '--tw-button-active-text-color': 'var(--tw-color-white)',\n            '--tw-button-active-border-color': shadeBgColor,\n          }\n        } else {\n          const tintBgColor = new TinyColor(buttonColor).tint(20).toString()\n          styles = {\n            '--tw-button-bg-color': buttonColor,\n            '--tw-button-border-color': buttonColor,\n            '--tw-button-hover-bg-color': tintBgColor,\n            '--tw-button-hover-border-color': tintBgColor,\n            '--tw-button-active-bg-color': shadeBgColor,\n            '--tw-button-active-border-color': shadeBgColor,\n          }\n        }\n\n        if (buttonDisabled.value) {\n          const disabledButtonColor = new TinyColor(buttonColor)\n            .tint(50)\n            .toString()\n          styles['--tw-button-disabled-bg-color'] = disabledButtonColor\n          styles['--tw-button-disabled-border-color'] = disabledButtonColor\n        }\n      }\n\n      return styles\n    })\n\n    const handleClick = (evt: MouseEvent) => {\n      if (props.nativeType === 'reset') {\n        form?.resetFields()\n      }\n      emit('click', evt)\n    }\n\n    return {\n      buttonRef,\n      buttonStyle,\n\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n\n      shouldAddSpace,\n\n      handleClick,\n\n      ns,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;AAsDA,MAAKA,SAAA,GAAaC,eAAA,CAAa;EAC7BC,IAAA,EAAM;EAENC,UAAA,EAAY;IACVC,MAAA;IACAC;EAAA;EAGFC,KAAA,EAAOC,WAAA;EACPC,KAAA,EAAOC,WAAA;EAEPC,MAAMJ,KAAA,EAAO;IAAEK,IAAA;IAAMC;EAAA,GAAS;IAC5B,MAAMC,SAAA,GAAYC,GAAA;IAClB,MAAMC,kBAAA,GAAqBC,MAAA,CAAOC,qBAAA,EAAuB;IACzD,MAAMC,YAAA,GAAeC,eAAA,CAAgB;IACrC,MAAMC,EAAA,GAAKC,YAAA,CAAa;IACxB,MAAMC,eAAA,GAAkBC,QAAA,CACtB,MACE;MAIJ,IAAMC,EAAA,EAAAC,EAAA,EAAAC,EAAA;MACJ,QAAAA,EAAA,IAAAD,EAAA,GAAAnB,KAAA,CAAAgB,eAAA,YAAAG,EAAA,IAAAD,EAAA,GAAAN,YAAA,CAAAS,KAAA,qBAAAH,EAAA,CAAAF,eAAA,YAAAI,EAAA;IACA;IACE,MAAAE,cAAA,GAAAL,QAAA;MACA,IAAAC,EAAI;MACF,MAAAK,WAAa,IAAAL,EAAA,GAAAZ,KAAA,CAAAkB,OAAA,qBAAAN,EAAA,CAAAO,IAAA,CAAAnB,KAAA;MACb,IAAAU,eAAA,CAAAK,KAAA,KAAAE,WAAqC,oBAAAA,WAAA,CAAAG,MAAA;QAAK,MAAAC,IAAA,GAAAJ,WAAA;QAAA,KAAAI,IAAA,oBAAAA,IAAA,CAAAC,IAAA,MAAAC,IAAA;UAG9C,MAAAC,IAAA,GAAAH,IAAA,CAAAI,QAAA;UAAO,qCAAAC,IAAA,CAAAF,IAAA;QAGT;MACA;MACA;IACA;IAKA,MAAM;MAAAG;IAAA,IAAAC,WAAA;IAGN,MAAMC,UAAA,GAAAC,OAAA,CAAAnB,QAA6B,OAAAR,kBAAA,oBAAAA,kBAAA,CAAA4B,IAAA;IACjC,MAAIC,cAAA,GAAAC,WAAA;IAEJ,MAAAC,UAAA,GAAAvB,QAAA,CAA0B,MAAAjB,KAAA,CAAA4B,IAAA,KAAAnB,kBAAA,oBAAAA,kBAAA,CAAAmB,IAAA;IAE1B,MAAIa,SAAA,GAAAxB,QAAA,OAAAyB,SAAA,eAAA1C,KAAA,CAAA4B,IAAA,IAAAP,KAAA;IACF,MAAAsB,WAAA,GAAA1B,QAAA,CAAyB;MACzB,IAAA2B,MAAA;MACE,MAAAC,WAAA,GAAA7C,KAAA,CAAA8C,KAAA,IAAAL,SAAA,CAAApB,KAAA;MAAS,IAAAwB,WAAA;QAGJ,MAAAE,YAAA,OAAAC,SAAA,CAAAH,WAAA,EAAAI,KAAA,KAAAC,QAAA;QACuB,IAC1BlD,KAAA,CAAAmD,KAAA;UAAgCP,MAAA;YAEhC,4BAAAI,SAAA,CAAAH,WAAA,EAAAO,IAAA,KAAAF,QAAA;YACA,0BAAAL,WAAA;YACA;YACA,8BAAAA,WAAA;YAAmC,kCAAAA,WAAA;YAAA,+BAAAE,YAAA;YAGrC;YACA,mCAAAA;UAAS;QACiB;UACI,MAAAM,WAAA,OAAAL,SAAA,CAAAH,WAAA,EAAAO,IAAA,KAAAF,QAAA;UACEN,MAAA;YAE9B,wBAAAC,WAAA;YACA,4BAAAA,WAAA;YAAmC,8BAAAQ,WAAA;YAAA,kCAAAA,WAAA;YAInC,+BAAAN,YAAA;YACF,mCAAAA;UAGA;QACA;QAA8C,IAAAT,cAAA,CAAAjB,KAAA;UAAA,MAAAiC,mBAAA,OAAAN,SAAA,CAAAH,WAAA,EAAAO,IAAA,KAAAF,QAAA;UAIlDN,MAAA,oCAAAU,mBAAA;UAAOV,MAAA,wCAAAU,mBAAA;QAGT;MACE;MACE,OAAAV,MAAA;IAAM;IAER,MAAAW,WAAA,GAAAC,GAAA;MAAc,IAAAxD,KAAA,CAAAyD,UAAA;QAGhBxB,IAAA,oBAAAA,IAAA,CAAAyB,WAAA;MAAO;MAELrD,IAAA,UAAAmD,GAAA;IAAA;IAEA;MAEAjD,SAAA;MAEAoC,WAAA;MAEAR,UAAA;MAEAK,UAAA;MAAAF,cAAA;MAAAhB,cAAA;MAAAiC,WAAA;;;;;AAhKa,MAAAI,UAAA;AACT,SAAAC,YAAAC,IAAA,EAAcC,MAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,QAAA;EAAA,MAAAC,kBAAA,GAAAC,gBAAA;EAAa,OAAAC,SAAA,IAAAC,kBAAA;IAA0B9D,GAAA;IAAwB+D,KAAA,EAAAC,cAAA,EAAqEX,IAAA,CAAA/C,EAAA,CAAG2D,CAAA,EAAE,EAAwBZ,IAAA,CAAA/C,EAAA,CAAG4D,CAAA,CAAAb,IAAA,CAAArB,UAAA,GAA0BqB,IAAA,CAAA/C,EAAA,CAAG4D,CAAA,CAAAb,IAAA,CAAA1B,UAAa,GAAA0B,IAAA,CAAA/C,EAAA,CAAA6D,EAAA,aAAAd,IAAA,CAAAvB,cAAA,G,6CAWxNqC,EAAA,UAAAd,IAAA,CAAAV,KAAA,CAAW,EAAAU,IAAA,CAAA/C,EAAA,CAAA6D,EAAA,UAAAd,IAAA,CAAAe,KAAA,GACdf,IACD,CAAA/C,EAAA,CAAA6D,EAAA,WAAAd,IAAA,CAAAgB,MAAA;IACAC,QAAA,EAAAjB,IAAA,CAAAvB,cAAA,IAAAuB,IAAA,CAAAkB,OAAA;;IAEUnD,IAAA,EAAAiC,IAAA,CAAAJ,UAAA;IACYuB,KAAA,EAA1BC,cAAA,CAAApB,IAAA,CAAAlB,WAAA;aACsBmB,MAAA,QAAAA,MAAA,UAAAoB,IAAA,KAAArB,IAAA,CAAAN,WAAA,IAAAM,IAAA,CAAAN,WAAA,IAAA2B,IAAA;EAAA,I;;;;;IACpBC,GAAA;;;kGAIsB;IAAxBC,CAAA;;;;2BAGoB,EAAAf,SAAA,IAAAgB,WAAA,CAAAC,uBAAA,CAAAzB,IAAA,CAAA0B,IAAA,I;IACdH,CAAA;0CAENvB,IAAA,CAAA2B,MAAA,CAAAhE,OAAA,IAAA6C,SAAA,IAAAC,kBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}