{"ast":null,"code":"var _jsxFileName = \"/home/bonami/Desktop/Projects/ECommerce/src/components/FriendList.js\";\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\nimport './../styles/FriendList.css';\nimport { useState } from 'react';\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FriendList = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Adress\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      friends: ['']\n    },\n    validate: values => {\n      const errors = {};\n      if (!values.email) {\n        errors.friends = 'Required';\n      }\n      {\n        errors.friends = 'Adress Required';\n      }\n      return errors;\n    },\n    onSubmit: values => setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n    }, 500),\n    render: ({\n      values,\n      touched,\n      errors\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(FieldArray, {\n        name: \"friends\",\n        render: arrayHelpers => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"adressmain\",\n          children: [values.friends && values.friends.length > 0 ? values.friends.map((friend, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"eachadresssection\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"adresssectionlabel\",\n              children: [\"Adress-\", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"fieldadress\",\n              name: `friends.${index}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => arrayHelpers.remove(index) // remove a friend from the list\n              ,\n              children: \"Delete Adress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 23\n            }, this), errors.friends && touched.friends && errors.friends]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => arrayHelpers.push('') // insert an empty string at a position\n            ,\n            children: \"Add a Adress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n_c = FriendList;\nvar _c;\n$RefreshReg$(_c, \"FriendList\");","map":{"version":3,"names":["React","Formik","Form","Field","FieldArray","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","FriendList","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","friends","validate","values","errors","email","onSubmit","setTimeout","alert","JSON","stringify","render","touched","name","arrayHelpers","className","length","map","friend","index","type","onClick","remove","push","_c","$RefreshReg$"],"sources":["/home/bonami/Desktop/Projects/ECommerce/src/components/FriendList.js"],"sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\nimport './../styles/FriendList.css'\nimport { useState } from 'react';\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\n\nexport const FriendList = () => (\n\n  <div>\n    <h1>Adress</h1>\n    <Formik\n      initialValues={{ friends: [''] }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.friends = 'Required';\n        } {\n          errors.friends = 'Adress Required';\n        }\n        return errors;\n      }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values , touched , errors }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div className='adressmain'>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div className='eachadresssection' key={index} >\n                        <label className='adresssectionlabel'>Adress-{index+1}</label>\n                      <Field className=\"fieldadress\" name={`friends.${index}`} />\n                      {/* <input className='inputfriendlist' placeholder='Type your Adress'/> */}\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        Delete Adress\n                      </button>\n                     {errors.friends && touched.friends && errors.friends\n                     }\n                    </div>\n                  ))\n                  \n                ) : <></>}\n                 <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.push( '')} // insert an empty string at a position\n                      >\n                        Add a Adress\n                      </button>\n                <div>\n                 \n                </div>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    />\n  </div>\n);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}