{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, unref, nextTick, onMounted, onUpdated, h, resolveDynamicComponent } from 'vue';\nimport { isNumber, isClient } from '@vueuse/core';\nimport '../../../../utils/index.mjs';\nimport ScrollBar from '../components/scrollbar.mjs';\nimport { useGridWheel } from '../hooks/use-grid-wheel.mjs';\nimport { useCache } from '../hooks/use-cache.mjs';\nimport { virtualizedGridProps } from '../props.mjs';\nimport { isRTL, getRTLOffsetType, getScrollDir } from '../utils.mjs';\nimport { ITEM_RENDER_EVT, SCROLL_EVT, FORWARD, BACKWARD, RTL_OFFSET_POS_DESC, RTL_OFFSET_NAG, AUTO_ALIGNMENT, RTL, RTL_OFFSET_POS_ASC } from '../defaults.mjs';\nimport { getScrollBarWidth } from '../../../../utils/dom/scroll.mjs';\nimport { hasOwn, isString } from '@vue/shared';\nconst createGrid = ({\n  name,\n  clearCache,\n  getColumnPosition,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getColumnOffset,\n  getRowOffset,\n  getRowPosition,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initCache,\n  validateProps\n}) => {\n  return defineComponent({\n    name: name != null ? name : \"ElVirtualList\",\n    props: virtualizedGridProps,\n    emits: [ITEM_RENDER_EVT, SCROLL_EVT],\n    setup(props, {\n      emit,\n      expose,\n      slots\n    }) {\n      validateProps(props);\n      const instance = getCurrentInstance();\n      const cache = ref(initCache(props, instance));\n      const windowRef = ref();\n      const hScrollbar = ref();\n      const vScrollbar = ref();\n      const innerRef = ref(null);\n      const states = ref({\n        isScrolling: false,\n        scrollLeft: isNumber(props.initScrollLeft) ? props.initScrollLeft : 0,\n        scrollTop: isNumber(props.initScrollTop) ? props.initScrollTop : 0,\n        updateRequested: false,\n        xAxisScrollDir: FORWARD,\n        yAxisScrollDir: FORWARD\n      });\n      const getItemStyleCache = useCache();\n      const parsedHeight = computed(() => parseInt(`${props.height}`, 10));\n      const parsedWidth = computed(() => parseInt(`${props.width}`, 10));\n      const columnsToRender = computed(() => {\n        const {\n          totalColumn,\n          totalRow,\n          columnCache\n        } = props;\n        const {\n          isScrolling,\n          xAxisScrollDir,\n          scrollLeft\n        } = unref(states);\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0];\n        }\n        const startIndex = getColumnStartIndexForOffset(props, scrollLeft, unref(cache));\n        const stopIndex = getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, unref(cache));\n        const cacheBackward = !isScrolling || xAxisScrollDir === BACKWARD ? Math.max(1, columnCache) : 1;\n        const cacheForward = !isScrolling || xAxisScrollDir === FORWARD ? Math.max(1, columnCache) : 1;\n        return [Math.max(0, startIndex - cacheBackward), Math.max(0, Math.min(totalColumn - 1, stopIndex + cacheForward)), startIndex, stopIndex];\n      });\n      const rowsToRender = computed(() => {\n        const {\n          totalColumn,\n          totalRow,\n          rowCache\n        } = props;\n        const {\n          isScrolling,\n          yAxisScrollDir,\n          scrollTop\n        } = unref(states);\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0];\n        }\n        const startIndex = getRowStartIndexForOffset(props, scrollTop, unref(cache));\n        const stopIndex = getRowStopIndexForStartIndex(props, startIndex, scrollTop, unref(cache));\n        const cacheBackward = !isScrolling || yAxisScrollDir === BACKWARD ? Math.max(1, rowCache) : 1;\n        const cacheForward = !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1;\n        return [Math.max(0, startIndex - cacheBackward), Math.max(0, Math.min(totalRow - 1, stopIndex + cacheForward)), startIndex, stopIndex];\n      });\n      const estimatedTotalHeight = computed(() => getEstimatedTotalHeight(props, unref(cache)));\n      const estimatedTotalWidth = computed(() => getEstimatedTotalWidth(props, unref(cache)));\n      const windowStyle = computed(() => {\n        var _a;\n        return [{\n          position: \"relative\",\n          overflow: \"hidden\",\n          WebkitOverflowScrolling: \"touch\",\n          willChange: \"transform\"\n        }, {\n          direction: props.direction,\n          height: isNumber(props.height) ? `${props.height}px` : props.height,\n          width: isNumber(props.width) ? `${props.width}px` : props.width\n        }, (_a = props.style) != null ? _a : {}];\n      });\n      const innerStyle = computed(() => {\n        const width = `${unref(estimatedTotalWidth)}px`;\n        const height = `${unref(estimatedTotalHeight)}px`;\n        return {\n          height,\n          pointerEvents: unref(states).isScrolling ? \"none\" : void 0,\n          width\n        };\n      });\n      const emitEvents = () => {\n        const {\n          totalColumn,\n          totalRow\n        } = props;\n        if (totalColumn > 0 && totalRow > 0) {\n          const [columnCacheStart, columnCacheEnd, columnVisibleStart, columnVisibleEnd] = unref(columnsToRender);\n          const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] = unref(rowsToRender);\n          emit(ITEM_RENDER_EVT, columnCacheStart, columnCacheEnd, rowCacheStart, rowCacheEnd, columnVisibleStart, columnVisibleEnd, rowVisibleStart, rowVisibleEnd);\n        }\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested,\n          xAxisScrollDir,\n          yAxisScrollDir\n        } = unref(states);\n        emit(SCROLL_EVT, xAxisScrollDir, scrollLeft, yAxisScrollDir, scrollTop, updateRequested);\n      };\n      const onScroll = e => {\n        const {\n          clientHeight,\n          clientWidth,\n          scrollHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth\n        } = e.currentTarget;\n        const _states = unref(states);\n        if (_states.scrollTop === scrollTop && _states.scrollLeft === scrollLeft) {\n          return;\n        }\n        let _scrollLeft = scrollLeft;\n        if (isRTL(props.direction)) {\n          switch (getRTLOffsetType()) {\n            case RTL_OFFSET_NAG:\n              _scrollLeft = -scrollLeft;\n              break;\n            case RTL_OFFSET_POS_DESC:\n              _scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n        states.value = {\n          ..._states,\n          isScrolling: true,\n          scrollLeft: _scrollLeft,\n          scrollTop: Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight)),\n          updateRequested: false,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop)\n        };\n        nextTick(resetIsScrolling);\n        emitEvents();\n      };\n      const onVerticalScroll = (distance, totalSteps) => {\n        const height = unref(parsedHeight);\n        const offset = (estimatedTotalHeight.value - height) / totalSteps * distance;\n        scrollTo({\n          scrollTop: Math.min(estimatedTotalHeight.value - height, offset)\n        });\n      };\n      const onHorizontalScroll = (distance, totalSteps) => {\n        const width = unref(parsedWidth);\n        const offset = (estimatedTotalWidth.value - width) / totalSteps * distance;\n        scrollTo({\n          scrollLeft: Math.min(estimatedTotalWidth.value - width, offset)\n        });\n      };\n      const {\n        onWheel\n      } = useGridWheel({\n        atXStartEdge: computed(() => states.value.scrollLeft <= 0),\n        atXEndEdge: computed(() => states.value.scrollLeft >= estimatedTotalWidth.value),\n        atYStartEdge: computed(() => states.value.scrollTop <= 0),\n        atYEndEdge: computed(() => states.value.scrollTop >= estimatedTotalHeight.value)\n      }, (x, y) => {\n        var _a, _b, _c, _d;\n        (_b = (_a = hScrollbar.value) == null ? void 0 : _a.onMouseUp) == null ? void 0 : _b.call(_a);\n        (_d = (_c = hScrollbar.value) == null ? void 0 : _c.onMouseUp) == null ? void 0 : _d.call(_c);\n        const width = unref(parsedWidth);\n        const height = unref(parsedHeight);\n        scrollTo({\n          scrollLeft: Math.min(states.value.scrollLeft + x, estimatedTotalWidth.value - width),\n          scrollTop: Math.min(states.value.scrollTop + y, estimatedTotalHeight.value - height)\n        });\n      });\n      const scrollTo = ({\n        scrollLeft = states.value.scrollLeft,\n        scrollTop = states.value.scrollTop\n      }) => {\n        scrollLeft = Math.max(scrollLeft, 0);\n        scrollTop = Math.max(scrollTop, 0);\n        const _states = unref(states);\n        if (scrollTop === _states.scrollTop && scrollLeft === _states.scrollLeft) {\n          return;\n        }\n        states.value = {\n          ..._states,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n          scrollLeft,\n          scrollTop,\n          updateRequested: true\n        };\n        nextTick(resetIsScrolling);\n      };\n      const scrollToItem = (rowIndex = 0, columnIdx = 0, alignment = AUTO_ALIGNMENT) => {\n        const _states = unref(states);\n        columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn - 1));\n        rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow - 1));\n        const scrollBarWidth = getScrollBarWidth();\n        const _cache = unref(cache);\n        const estimatedHeight = getEstimatedTotalHeight(props, _cache);\n        const estimatedWidth = getEstimatedTotalWidth(props, _cache);\n        scrollTo({\n          scrollLeft: getColumnOffset(props, columnIdx, alignment, _states.scrollLeft, _cache, estimatedWidth > props.width ? scrollBarWidth : 0),\n          scrollTop: getRowOffset(props, rowIndex, alignment, _states.scrollTop, _cache, estimatedHeight > props.height ? scrollBarWidth : 0)\n        });\n      };\n      const getItemStyle = (rowIndex, columnIndex) => {\n        const {\n          columnWidth,\n          direction,\n          rowHeight\n        } = props;\n        const itemStyleCache = getItemStyleCache.value(clearCache && columnWidth, clearCache && rowHeight, clearCache && direction);\n        const key = `${rowIndex},${columnIndex}`;\n        if (hasOwn(itemStyleCache, key)) {\n          return itemStyleCache[key];\n        } else {\n          const [, left] = getColumnPosition(props, columnIndex, unref(cache));\n          const _cache = unref(cache);\n          const rtl = isRTL(direction);\n          const [height, top] = getRowPosition(props, rowIndex, _cache);\n          const [width] = getColumnPosition(props, columnIndex, _cache);\n          itemStyleCache[key] = {\n            position: \"absolute\",\n            left: rtl ? void 0 : `${left}px`,\n            right: rtl ? `${left}px` : void 0,\n            top: `${top}px`,\n            height: `${height}px`,\n            width: `${width}px`\n          };\n          return itemStyleCache[key];\n        }\n      };\n      const resetIsScrolling = () => {\n        states.value.isScrolling = false;\n        nextTick(() => {\n          getItemStyleCache.value(-1, null, null);\n        });\n      };\n      onMounted(() => {\n        if (!isClient) return;\n        const {\n          initScrollLeft,\n          initScrollTop\n        } = props;\n        const windowElement = unref(windowRef);\n        if (windowElement) {\n          if (isNumber(initScrollLeft)) {\n            windowElement.scrollLeft = initScrollLeft;\n          }\n          if (isNumber(initScrollTop)) {\n            windowElement.scrollTop = initScrollTop;\n          }\n        }\n        emitEvents();\n      });\n      onUpdated(() => {\n        const {\n          direction\n        } = props;\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested\n        } = unref(states);\n        const windowElement = unref(windowRef);\n        if (updateRequested && windowElement) {\n          if (direction === RTL) {\n            switch (getRTLOffsetType()) {\n              case RTL_OFFSET_NAG:\n                {\n                  windowElement.scrollLeft = -scrollLeft;\n                  break;\n                }\n              case RTL_OFFSET_POS_ASC:\n                {\n                  windowElement.scrollLeft = scrollLeft;\n                  break;\n                }\n              default:\n                {\n                  const {\n                    clientWidth,\n                    scrollWidth\n                  } = windowElement;\n                  windowElement.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n                  break;\n                }\n            }\n          } else {\n            windowElement.scrollLeft = Math.max(0, scrollLeft);\n          }\n          windowElement.scrollTop = Math.max(0, scrollTop);\n        }\n      });\n      expose({\n        windowRef,\n        innerRef,\n        getItemStyleCache,\n        scrollTo,\n        scrollToItem,\n        states\n      });\n      const renderScrollbars = () => {\n        const {\n          totalColumn,\n          totalRow\n        } = props;\n        const width = unref(parsedWidth);\n        const height = unref(parsedHeight);\n        const estimatedWidth = unref(estimatedTotalWidth);\n        const estimatedHeight = unref(estimatedTotalHeight);\n        const {\n          scrollLeft,\n          scrollTop\n        } = unref(states);\n        const horizontalScrollbar = h(ScrollBar, {\n          ref: hScrollbar,\n          clientSize: width,\n          layout: \"horizontal\",\n          onScroll: onHorizontalScroll,\n          ratio: width * 100 / estimatedWidth,\n          scrollFrom: scrollLeft / (estimatedWidth - width),\n          total: totalRow,\n          visible: true\n        });\n        const verticalScrollbar = h(ScrollBar, {\n          ref: vScrollbar,\n          clientSize: height,\n          layout: \"vertical\",\n          onScroll: onVerticalScroll,\n          ratio: height * 100 / estimatedHeight,\n          scrollFrom: scrollTop / (estimatedHeight - height),\n          total: totalColumn,\n          visible: true\n        });\n        return {\n          horizontalScrollbar,\n          verticalScrollbar\n        };\n      };\n      const renderItems = () => {\n        var _a;\n        const [columnStart, columnEnd] = unref(columnsToRender);\n        const [rowStart, rowEnd] = unref(rowsToRender);\n        const {\n          data,\n          totalColumn,\n          totalRow,\n          useIsScrolling\n        } = props;\n        const children = [];\n        if (totalRow > 0 && totalColumn > 0) {\n          for (let row = rowStart; row <= rowEnd; row++) {\n            for (let column = columnStart; column <= columnEnd; column++) {\n              children.push((_a = slots.default) == null ? void 0 : _a.call(slots, {\n                columnIndex: column,\n                data,\n                key: column,\n                isScrolling: useIsScrolling ? unref(states).isScrolling : void 0,\n                style: getItemStyle(row, column),\n                rowIndex: row\n              }));\n            }\n          }\n        }\n        return children;\n      };\n      const renderInner = () => {\n        const Inner = resolveDynamicComponent(props.innerElement);\n        const children = renderItems();\n        return [h(Inner, {\n          style: unref(innerStyle),\n          ref: innerRef\n        }, !isString(Inner) ? {\n          default: () => children\n        } : children)];\n      };\n      const renderWindow = () => {\n        const Container = resolveDynamicComponent(props.containerElement);\n        const {\n          horizontalScrollbar,\n          verticalScrollbar\n        } = renderScrollbars();\n        const Inner = renderInner();\n        return h(\"div\", {\n          key: 0,\n          class: \"el-vg__wrapper\"\n        }, [h(Container, {\n          class: props.className,\n          style: unref(windowStyle),\n          onScroll,\n          onWheel,\n          ref: windowRef\n        }, !isString(Container) ? {\n          default: () => Inner\n        } : Inner), horizontalScrollbar, verticalScrollbar]);\n      };\n      return renderWindow;\n    }\n  });\n};\nexport { createGrid as default };","map":{"version":3,"names":["createGrid","name","clearCache","getColumnPosition","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getEstimatedTotalHeight","getEstimatedTotalWidth","getColumnOffset","getRowOffset","getRowPosition","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initCache","validateProps","defineComponent","props","virtualizedGridProps","emits","ITEM_RENDER_EVT","SCROLL_EVT","setup","emit","expose","slots","instance","getCurrentInstance","cache","ref","windowRef","hScrollbar","vScrollbar","innerRef","states","isScrolling","scrollLeft","isNumber","initScrollLeft","scrollTop","initScrollTop","updateRequested","xAxisScrollDir","FORWARD","yAxisScrollDir","getItemStyleCache","useCache","parsedHeight","computed","parseInt","height","parsedWidth","width","columnsToRender","totalColumn","totalRow","columnCache","unref","startIndex","stopIndex","cacheBackward","BACKWARD","Math","max","cacheForward","min","rowsToRender","rowCache","estimatedTotalHeight","estimatedTotalWidth","windowStyle","_a","position","overflow","WebkitOverflowScrolling","willChange","direction","style","innerStyle","pointerEvents","emitEvents","columnCacheStart","columnCacheEnd","columnVisibleStart","columnVisibleEnd","rowCacheStart","rowCacheEnd","rowVisibleStart","rowVisibleEnd","onScroll","e","clientHeight","clientWidth","scrollHeight","scrollWidth","currentTarget","_states","_scrollLeft","isRTL","getRTLOffsetType","RTL_OFFSET_NAG","RTL_OFFSET_POS_DESC","value","getScrollDir","nextTick","resetIsScrolling","onVerticalScroll","distance","totalSteps","offset","scrollTo","onHorizontalScroll","onWheel","useGridWheel","atXStartEdge","atXEndEdge","atYStartEdge","atYEndEdge","x","y","_b","_c","_d","onMouseUp","call","scrollToItem","rowIndex","columnIdx","alignment","AUTO_ALIGNMENT","scrollBarWidth","getScrollBarWidth","_cache","estimatedHeight","estimatedWidth","getItemStyle","columnIndex","columnWidth","rowHeight","itemStyleCache","key","hasOwn","left","rtl","top","right","onMounted","isClient","windowElement","onUpdated","RTL","RTL_OFFSET_POS_ASC","renderScrollbars","horizontalScrollbar","h","ScrollBar","clientSize","layout","ratio","scrollFrom","total","visible","verticalScrollbar","renderItems","columnStart","columnEnd","rowStart","rowEnd","data","useIsScrolling","children","row","column","push","default","renderInner","Inner","resolveDynamicComponent","innerElement","isString","renderWindow","Container","containerElement","class","className"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/virtual-list/src/builders/build-grid.ts"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  ref,\n  nextTick,\n  onMounted,\n  onUpdated,\n  resolveDynamicComponent,\n  h,\n  unref,\n} from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  hasOwn,\n  isNumber,\n  isString,\n  getScrollBarWidth,\n} from '@tw-element/utils'\nimport Scrollbar from '../components/scrollbar'\nimport { useGridWheel } from '../hooks/use-grid-wheel'\nimport { useCache } from '../hooks/use-cache'\nimport { virtualizedGridProps } from '../props'\nimport { getScrollDir, getRTLOffsetType, isRTL } from '../utils'\nimport {\n  AUTO_ALIGNMENT,\n  BACKWARD,\n  FORWARD,\n  RTL,\n  ITEM_RENDER_EVT,\n  SCROLL_EVT,\n  RTL_OFFSET_NAG,\n  RTL_OFFSET_POS_DESC,\n  RTL_OFFSET_POS_ASC,\n} from '../defaults'\n\nimport type { CSSProperties, VNode, VNodeChild, StyleValue } from 'vue'\nimport type { GridConstructorProps, Alignment, ScrollbarExpose } from '../types'\nimport type { VirtualizedGridProps } from '../props'\n\nconst createGrid = ({\n  name,\n  clearCache,\n  getColumnPosition,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getColumnOffset,\n  getRowOffset,\n  getRowPosition,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n\n  initCache,\n  validateProps,\n}: GridConstructorProps<VirtualizedGridProps>) => {\n  return defineComponent({\n    name: name ?? 'ElVirtualList',\n    props: virtualizedGridProps,\n    emits: [ITEM_RENDER_EVT, SCROLL_EVT],\n    setup(props, { emit, expose, slots }) {\n      validateProps(props)\n      const instance = getCurrentInstance()!\n      const cache = ref(initCache(props, instance))\n      // refs\n      // here windowRef and innerRef can be type of HTMLElement\n      // or user defined component type, depends on the type passed\n      // by user\n      const windowRef = ref<HTMLElement>()\n      const hScrollbar = ref<ScrollbarExpose>()\n      const vScrollbar = ref<ScrollbarExpose>()\n      // innerRef is the actual container element which contains all the elements\n      const innerRef = ref(null)\n      const states = ref({\n        isScrolling: false,\n        scrollLeft: isNumber(props.initScrollLeft) ? props.initScrollLeft : 0,\n        scrollTop: isNumber(props.initScrollTop) ? props.initScrollTop : 0,\n        updateRequested: false,\n        xAxisScrollDir: FORWARD,\n        yAxisScrollDir: FORWARD,\n      })\n\n      const getItemStyleCache = useCache()\n\n      // computed\n      const parsedHeight = computed(() => parseInt(`${props.height}`, 10))\n      const parsedWidth = computed(() => parseInt(`${props.width}`, 10))\n      const columnsToRender = computed(() => {\n        const { totalColumn, totalRow, columnCache } = props\n        const { isScrolling, xAxisScrollDir, scrollLeft } = unref(states)\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0]\n        }\n\n        const startIndex = getColumnStartIndexForOffset(\n          props,\n          scrollLeft,\n          unref(cache)\n        )\n        const stopIndex = getColumnStopIndexForStartIndex(\n          props,\n          startIndex,\n          scrollLeft,\n          unref(cache)\n        )\n\n        const cacheBackward =\n          !isScrolling || xAxisScrollDir === BACKWARD\n            ? Math.max(1, columnCache)\n            : 1\n        const cacheForward =\n          !isScrolling || xAxisScrollDir === FORWARD\n            ? Math.max(1, columnCache)\n            : 1\n\n        return [\n          Math.max(0, startIndex - cacheBackward),\n          Math.max(0, Math.min(totalColumn! - 1, stopIndex + cacheForward)),\n          startIndex,\n          stopIndex,\n        ]\n      })\n\n      const rowsToRender = computed(() => {\n        const { totalColumn, totalRow, rowCache } = props\n        const { isScrolling, yAxisScrollDir, scrollTop } = unref(states)\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0]\n        }\n\n        const startIndex = getRowStartIndexForOffset(\n          props,\n          scrollTop,\n          unref(cache)\n        )\n        const stopIndex = getRowStopIndexForStartIndex(\n          props,\n          startIndex,\n          scrollTop,\n          unref(cache)\n        )\n\n        const cacheBackward =\n          !isScrolling || yAxisScrollDir === BACKWARD\n            ? Math.max(1, rowCache)\n            : 1\n        const cacheForward =\n          !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1\n\n        return [\n          Math.max(0, startIndex - cacheBackward),\n          Math.max(0, Math.min(totalRow! - 1, stopIndex + cacheForward)),\n          startIndex,\n          stopIndex,\n        ]\n      })\n\n      const estimatedTotalHeight = computed(() =>\n        getEstimatedTotalHeight(props, unref(cache))\n      )\n      const estimatedTotalWidth = computed(() =>\n        getEstimatedTotalWidth(props, unref(cache))\n      )\n\n      const windowStyle = computed<StyleValue>(() => [\n        {\n          position: 'relative',\n          overflow: 'hidden',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n        },\n        {\n          direction: props.direction,\n          height: isNumber(props.height) ? `${props.height}px` : props.height,\n          width: isNumber(props.width) ? `${props.width}px` : props.width,\n        },\n        props.style ?? {},\n      ])\n\n      const innerStyle = computed(() => {\n        const width = `${unref(estimatedTotalWidth)}px`\n        const height = `${unref(estimatedTotalHeight)}px`\n\n        return {\n          height,\n          pointerEvents: unref(states).isScrolling ? 'none' : undefined,\n          width,\n        }\n      })\n\n      // methods\n      const emitEvents = () => {\n        const { totalColumn, totalRow } = props\n\n        if (totalColumn! > 0 && totalRow! > 0) {\n          const [\n            columnCacheStart,\n            columnCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n          ] = unref(columnsToRender)\n          const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] =\n            unref(rowsToRender)\n          // emit the render item event with\n          // [xAxisInvisibleStart, xAxisInvisibleEnd, xAxisVisibleStart, xAxisVisibleEnd]\n          // [yAxisInvisibleStart, yAxisInvisibleEnd, yAxisVisibleStart, yAxisVisibleEnd]\n          emit(\n            ITEM_RENDER_EVT,\n            columnCacheStart,\n            columnCacheEnd,\n            rowCacheStart,\n            rowCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n            rowVisibleStart,\n            rowVisibleEnd\n          )\n        }\n\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested,\n          xAxisScrollDir,\n          yAxisScrollDir,\n        } = unref(states)\n        emit(\n          SCROLL_EVT,\n          xAxisScrollDir,\n          scrollLeft,\n          yAxisScrollDir,\n          scrollTop,\n          updateRequested\n        )\n      }\n\n      const onScroll = (e: Event) => {\n        const {\n          clientHeight,\n          clientWidth,\n          scrollHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth,\n        } = e.currentTarget as HTMLElement\n\n        const _states = unref(states)\n        if (\n          _states.scrollTop === scrollTop &&\n          _states.scrollLeft === scrollLeft\n        ) {\n          return\n        }\n\n        let _scrollLeft = scrollLeft\n\n        if (isRTL(props.direction)) {\n          switch (getRTLOffsetType()) {\n            case RTL_OFFSET_NAG:\n              _scrollLeft = -scrollLeft\n              break\n            case RTL_OFFSET_POS_DESC:\n              _scrollLeft = scrollWidth - clientWidth - scrollLeft\n              break\n          }\n        }\n\n        states.value = {\n          ..._states,\n          isScrolling: true,\n          scrollLeft: _scrollLeft,\n          scrollTop: Math.max(\n            0,\n            Math.min(scrollTop, scrollHeight - clientHeight)\n          ),\n          updateRequested: false,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n        }\n\n        nextTick(resetIsScrolling)\n\n        emitEvents()\n      }\n\n      const onVerticalScroll = (distance: number, totalSteps: number) => {\n        const height = unref(parsedHeight)\n        const offset =\n          ((estimatedTotalHeight.value - height) / totalSteps) * distance\n        scrollTo({\n          scrollTop: Math.min(estimatedTotalHeight.value - height, offset),\n        })\n      }\n\n      const onHorizontalScroll = (distance: number, totalSteps: number) => {\n        const width = unref(parsedWidth)\n        const offset =\n          ((estimatedTotalWidth.value - width) / totalSteps) * distance\n        scrollTo({\n          scrollLeft: Math.min(estimatedTotalWidth.value - width, offset),\n        })\n      }\n\n      const { onWheel } = useGridWheel(\n        {\n          atXStartEdge: computed(() => states.value.scrollLeft <= 0),\n          atXEndEdge: computed(\n            () => states.value.scrollLeft >= estimatedTotalWidth.value\n          ),\n          atYStartEdge: computed(() => states.value.scrollTop <= 0),\n          atYEndEdge: computed(\n            () => states.value.scrollTop >= estimatedTotalHeight.value\n          ),\n        },\n        (x: number, y: number) => {\n          hScrollbar.value?.onMouseUp?.()\n          hScrollbar.value?.onMouseUp?.()\n          const width = unref(parsedWidth)\n          const height = unref(parsedHeight)\n          scrollTo({\n            scrollLeft: Math.min(\n              states.value.scrollLeft + x,\n              estimatedTotalWidth.value - width\n            ),\n            scrollTop: Math.min(\n              states.value.scrollTop + y,\n              estimatedTotalHeight.value - height\n            ),\n          })\n        }\n      )\n\n      const scrollTo = ({\n        scrollLeft = states.value.scrollLeft,\n        scrollTop = states.value.scrollTop,\n      }) => {\n        scrollLeft = Math.max(scrollLeft, 0)\n        scrollTop = Math.max(scrollTop, 0)\n        const _states = unref(states)\n        if (\n          scrollTop === _states.scrollTop &&\n          scrollLeft === _states.scrollLeft\n        ) {\n          return\n        }\n\n        states.value = {\n          ..._states,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n          scrollLeft,\n          scrollTop,\n          updateRequested: true,\n        }\n\n        nextTick(resetIsScrolling)\n      }\n\n      const scrollToItem = (\n        rowIndex = 0,\n        columnIdx = 0,\n        alignment: Alignment = AUTO_ALIGNMENT\n      ) => {\n        const _states = unref(states)\n        columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn! - 1))\n        rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow! - 1))\n        const scrollBarWidth = getScrollBarWidth()\n\n        const _cache = unref(cache)\n        const estimatedHeight = getEstimatedTotalHeight(props, _cache)\n        const estimatedWidth = getEstimatedTotalWidth(props, _cache)\n\n        scrollTo({\n          scrollLeft: getColumnOffset(\n            props,\n            columnIdx,\n            alignment,\n            _states.scrollLeft,\n            _cache,\n            estimatedWidth > props.width! ? scrollBarWidth : 0\n          ),\n          scrollTop: getRowOffset(\n            props,\n            rowIndex,\n            alignment,\n            _states.scrollTop,\n            _cache,\n            estimatedHeight > props.height! ? scrollBarWidth : 0\n          ),\n        })\n      }\n\n      const getItemStyle = (\n        rowIndex: number,\n        columnIndex: number\n      ): CSSProperties => {\n        const { columnWidth, direction, rowHeight } = props\n\n        const itemStyleCache = getItemStyleCache.value(\n          clearCache && columnWidth,\n          clearCache && rowHeight,\n          clearCache && direction\n        )\n        // since there was no need to introduce an nested array into cache object\n        // we use row,column to construct the key for indexing the map.\n        const key = `${rowIndex},${columnIndex}`\n\n        if (hasOwn(itemStyleCache, key)) {\n          return itemStyleCache[key]\n        } else {\n          const [, left] = getColumnPosition(props, columnIndex, unref(cache))\n          const _cache = unref(cache)\n\n          const rtl = isRTL(direction)\n          const [height, top] = getRowPosition(props, rowIndex, _cache)\n          const [width] = getColumnPosition(props, columnIndex, _cache)\n\n          itemStyleCache[key] = {\n            position: 'absolute',\n            left: rtl ? undefined : `${left}px`,\n            right: rtl ? `${left}px` : undefined,\n            top: `${top}px`,\n            height: `${height}px`,\n            width: `${width}px`,\n          }\n\n          return itemStyleCache[key]\n        }\n      }\n\n      // TODO: debounce setting is scrolling.\n\n      const resetIsScrolling = () => {\n        // timer = null\n\n        states.value.isScrolling = false\n        nextTick(() => {\n          getItemStyleCache.value(-1, null, null)\n        })\n      }\n\n      // life cycles\n      onMounted(() => {\n        // for SSR\n        if (!isClient) return\n        const { initScrollLeft, initScrollTop } = props\n        const windowElement = unref(windowRef)\n        if (windowElement) {\n          if (isNumber(initScrollLeft)) {\n            windowElement.scrollLeft = initScrollLeft\n          }\n          if (isNumber(initScrollTop)) {\n            windowElement.scrollTop = initScrollTop\n          }\n        }\n        emitEvents()\n      })\n\n      onUpdated(() => {\n        const { direction } = props\n        const { scrollLeft, scrollTop, updateRequested } = unref(states)\n\n        const windowElement = unref(windowRef)\n\n        if (updateRequested && windowElement) {\n          if (direction === RTL) {\n            switch (getRTLOffsetType()) {\n              case RTL_OFFSET_NAG: {\n                windowElement.scrollLeft = -scrollLeft\n                break\n              }\n              case RTL_OFFSET_POS_ASC: {\n                windowElement.scrollLeft = scrollLeft\n                break\n              }\n              default: {\n                const { clientWidth, scrollWidth } = windowElement\n                windowElement.scrollLeft =\n                  scrollWidth - clientWidth - scrollLeft\n                break\n              }\n            }\n          } else {\n            windowElement.scrollLeft = Math.max(0, scrollLeft)\n          }\n\n          windowElement.scrollTop = Math.max(0, scrollTop)\n        }\n      })\n\n      expose({\n        windowRef,\n        innerRef,\n        getItemStyleCache,\n        scrollTo,\n        scrollToItem,\n        states,\n      })\n\n      // rendering part\n\n      const renderScrollbars = () => {\n        const { totalColumn, totalRow } = props\n\n        const width = unref(parsedWidth)\n        const height = unref(parsedHeight)\n        const estimatedWidth = unref(estimatedTotalWidth)\n        const estimatedHeight = unref(estimatedTotalHeight)\n        const { scrollLeft, scrollTop } = unref(states)\n        const horizontalScrollbar = h(Scrollbar, {\n          ref: hScrollbar,\n          clientSize: width,\n          layout: 'horizontal',\n          onScroll: onHorizontalScroll,\n          ratio: (width * 100) / estimatedWidth,\n          scrollFrom: scrollLeft / (estimatedWidth - width),\n          total: totalRow,\n          visible: true,\n        })\n\n        const verticalScrollbar = h(Scrollbar, {\n          ref: vScrollbar,\n          clientSize: height,\n          layout: 'vertical',\n          onScroll: onVerticalScroll,\n          ratio: (height * 100) / estimatedHeight,\n          scrollFrom: scrollTop / (estimatedHeight - height),\n          total: totalColumn,\n          visible: true,\n        })\n\n        return {\n          horizontalScrollbar,\n          verticalScrollbar,\n        }\n      }\n\n      const renderItems = () => {\n        const [columnStart, columnEnd] = unref(columnsToRender)\n        const [rowStart, rowEnd] = unref(rowsToRender)\n        const { data, totalColumn, totalRow, useIsScrolling } = props\n        const children: VNodeChild[] = []\n        if (totalRow > 0 && totalColumn > 0) {\n          for (let row = rowStart; row <= rowEnd; row++) {\n            for (let column = columnStart; column <= columnEnd; column++) {\n              children.push(\n                slots.default?.({\n                  columnIndex: column,\n                  data,\n                  key: column,\n                  isScrolling: useIsScrolling\n                    ? unref(states).isScrolling\n                    : undefined,\n                  style: getItemStyle(row, column),\n                  rowIndex: row,\n                })\n              )\n            }\n          }\n        }\n        return children\n      }\n\n      const renderInner = () => {\n        const Inner = resolveDynamicComponent(props.innerElement) as VNode\n        const children = renderItems()\n        return [\n          h(\n            Inner,\n            {\n              style: unref(innerStyle),\n              ref: innerRef,\n            },\n            !isString(Inner)\n              ? {\n                  default: () => children,\n                }\n              : children\n          ),\n        ]\n      }\n\n      const renderWindow = () => {\n        const Container = resolveDynamicComponent(\n          props.containerElement\n        ) as VNode\n        const { horizontalScrollbar, verticalScrollbar } = renderScrollbars()\n        const Inner = renderInner()\n\n        return h(\n          'div',\n          {\n            key: 0,\n            class: 'el-vg__wrapper',\n          },\n          [\n            h(\n              Container,\n              {\n                class: props.className,\n                style: unref(windowStyle),\n                onScroll,\n                onWheel,\n                ref: windowRef,\n              },\n              !isString(Container) ? { default: () => Inner } : Inner\n            ),\n            horizontalScrollbar,\n            verticalScrollbar,\n          ]\n        )\n      }\n\n      return renderWindow\n    },\n  })\n}\nexport default createGrid\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}