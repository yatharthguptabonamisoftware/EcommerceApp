{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, createElementVNode, openBlock, createElementBlock, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElSlPanel\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const cursorTop = ref(0);\n    const cursorLeft = ref(0);\n    const background = ref(\"hsl(0, 100%, 50%)\");\n    const colorValue = computed(() => {\n      const hue = props.color.get(\"hue\");\n      const value = props.color.get(\"value\");\n      return {\n        hue,\n        value\n      };\n    });\n    function update() {\n      const saturation = props.color.get(\"saturation\");\n      const value = props.color.get(\"value\");\n      const el = instance.vnode.el;\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = el;\n      cursorLeft.value = saturation * width / 100;\n      cursorTop.value = (100 - value) * height / 100;\n      background.value = `hsl(${props.color.get(\"hue\")}, 100%, 50%)`;\n    }\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let left = clientX - rect.left;\n      let top = clientY - rect.top;\n      left = Math.max(0, left);\n      left = Math.min(left, rect.width);\n      top = Math.max(0, top);\n      top = Math.min(top, rect.height);\n      cursorLeft.value = left;\n      cursorTop.value = top;\n      props.color.set({\n        saturation: left / rect.width * 100,\n        value: 100 - top / rect.height * 100\n      });\n    }\n    watch(() => colorValue.value, () => {\n      update();\n    });\n    onMounted(() => {\n      draggable(instance.vnode.el, {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      });\n      update();\n    });\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update\n    };\n  }\n});\nconst _hoisted_1 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__white\"\n}, null, -1);\nconst _hoisted_2 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__black\"\n}, null, -1);\nconst _hoisted_3 = /* @__PURE__ */createElementVNode(\"div\", null, null, -1);\nconst _hoisted_4 = [_hoisted_3];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"el-color-svpanel\",\n    style: normalizeStyle({\n      backgroundColor: _ctx.background\n    })\n  }, [_hoisted_1, _hoisted_2, createElementVNode(\"div\", {\n    class: \"el-color-svpanel__cursor\",\n    style: normalizeStyle({\n      top: _ctx.cursorTop + \"px\",\n      left: _ctx.cursorLeft + \"px\"\n    })\n  }, _hoisted_4, 4)], 4);\n}\nvar SvPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { SvPanel as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","props","color","type","Object","required","setup","instance","getCurrentInstance","cursorTop","ref","cursorLeft","background","colorValue","computed","hue","get","value","update","saturation","el","vnode","clientWidth","width","clientHeight","height","handleDrag","event","rect","getBoundingClientRect","clientX","clientY","getClientXY","left","top","Math","max","min","set","watch","onMounted","draggable","drag","end","class","_hoisted_4","_hoisted_3","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","style","normalizeStyle","backgroundColor","_ctx","_hoisted_1","_hoisted_2","createElementVNode"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/color-picker/src/components/sv-panel.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-color-svpanel\"\n    :style=\"{\n      backgroundColor: background,\n    }\"\n  >\n    <div class=\"el-color-svpanel__white\"></div>\n    <div class=\"el-color-svpanel__black\"></div>\n    <div\n      class=\"el-color-svpanel__cursor\"\n      :style=\"{\n        top: cursorTop + 'px',\n        left: cursorLeft + 'px',\n      }\"\n    >\n      <div></div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  watch,\n  getCurrentInstance,\n  onMounted,\n} from 'vue'\nimport { getClientXY } from '@tw-element/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElSlPanel',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    // instance\n    const instance = getCurrentInstance()\n    // data\n    const cursorTop = ref(0)\n    const cursorLeft = ref(0)\n    const background = ref('hsl(0, 100%, 50%)')\n    const colorValue = computed(() => {\n      const hue = props.color.get('hue')\n      const value = props.color.get('value')\n      return { hue, value }\n    })\n\n    // methods\n    function update() {\n      const saturation = props.color.get('saturation')\n      const value = props.color.get('value')\n\n      const el = instance.vnode.el\n      const { clientWidth: width, clientHeight: height } = el\n\n      cursorLeft.value = (saturation * width) / 100\n      cursorTop.value = ((100 - value) * height) / 100\n\n      background.value = `hsl(${props.color.get('hue')}, 100%, 50%)`\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      let left = clientX - rect.left\n      let top = clientY - rect.top\n      left = Math.max(0, left)\n      left = Math.min(left, rect.width)\n\n      top = Math.max(0, top)\n      top = Math.min(top, rect.height)\n\n      cursorLeft.value = left\n      cursorTop.value = top\n      props.color.set({\n        saturation: (left / rect.width) * 100,\n        value: 100 - (top / rect.height) * 100,\n      })\n    }\n\n    // watch\n    watch(\n      () => colorValue.value,\n      () => {\n        update()\n      }\n    )\n    // mounted\n    onMounted(() => {\n      draggable(instance.vnode.el as HTMLElement, {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      })\n\n      update()\n    })\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}