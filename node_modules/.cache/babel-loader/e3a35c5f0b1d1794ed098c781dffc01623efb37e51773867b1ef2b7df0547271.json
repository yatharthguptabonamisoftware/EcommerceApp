{"ast":null,"code":"import './hooks/index.mjs';\nimport { version } from './version.mjs';\nimport { provideGlobalConfig } from './hooks/use-global-config/index.mjs';\nconst INSTALLED_KEY = Symbol(\"INSTALLED_KEY\");\nconst makeInstaller = (components = []) => {\n  const install = (app, options = {}) => {\n    if (app[INSTALLED_KEY]) return;\n    app[INSTALLED_KEY] = true;\n    components.forEach(c => app.use(c));\n    provideGlobalConfig(options, app, true);\n  };\n  return {\n    version,\n    install\n  };\n};\nexport { makeInstaller };","map":{"version":3,"names":["INSTALLED_KEY","Symbol","makeInstaller","components","install","app","options","forEach","c","use","provideGlobalConfig","version"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/tw-element/make-installer.ts"],"sourcesContent":["import { provideGlobalConfig } from '@tw-element/hooks'\nimport { version } from './version'\nimport type { App, Plugin } from 'vue'\nimport type { ConfigProviderContext } from '@tw-element/tokens'\n\nconst INSTALLED_KEY = Symbol('INSTALLED_KEY')\n\nexport const makeInstaller = (components: Plugin[] = []) => {\n  const install = (app: App, options: ConfigProviderContext = {}) => {\n    if (app[INSTALLED_KEY]) return\n\n    app[INSTALLED_KEY] = true\n    components.forEach((c) => app.use(c))\n    provideGlobalConfig(options, app, true)\n  }\n\n  return {\n    version,\n    install,\n  }\n}\n"],"mappings":";;;AAEA,MAAMA,aAAa,GAAGC,MAAM,CAAC,eAAe,CAAC;AACjC,MAACC,aAAa,GAAGA,CAACC,UAAU,GAAG,EAAE,KAAK;EAChD,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,OAAO,GAAG,EAAE,KAAK;IACrC,IAAID,GAAG,CAACL,aAAa,CAAC,EACpB;IACFK,GAAG,CAACL,aAAa,CAAC,GAAG,IAAI;IACzBG,UAAU,CAACI,OAAO,CAAEC,CAAC,IAAKH,GAAG,CAACI,GAAG,CAACD,CAAC,CAAC,CAAC;IACrCE,mBAAmB,CAACJ,OAAO,EAAED,GAAG,EAAE,IAAI,CAAC;EAC3C,CAAG;EACD,OAAO;IACLM,OAAO;IACPP;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}