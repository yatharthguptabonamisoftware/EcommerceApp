{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed, resolveComponent, openBlock, createBlock, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { TwScrollbar } from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { TwIcon } from '../../icon/index.mjs';\nimport TwCascaderNode from './node.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwCascaderMenu\",\n  components: {\n    Loading,\n    TwIcon,\n    TwScrollbar,\n    TwCascaderNode\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const {\n      t\n    } = useLocale();\n    const id = generateId();\n    let activeNode = null;\n    let hoverTimer = null;\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = ref(null);\n    const isEmpty = computed(() => !props.nodes.length);\n    const isLoading = computed(() => !panel.initialLoaded);\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`);\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return {\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 0,\n  class: \"el-cascader-menu__empty-text\"\n};\nconst _hoisted_2 = {\n  key: 1,\n  class: \"el-cascader-menu__empty-text\"\n};\nconst _hoisted_3 = {\n  key: 2,\n  ref: \"hoverZone\",\n  class: \"el-cascader-menu__hover-zone\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: \"el-cascader-menu\",\n    \"wrap-class\": \"el-cascader-menu__wrap\",\n    \"view-class\": [\"el-cascader-menu__list\", _ctx.isEmpty && \"is-empty\"],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: withCtx(() => {\n      var _a;\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, node => {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [createVNode(_component_el_icon, {\n        size: \"14\",\n        class: \"is-loading\"\n      }, {\n        default: withCtx(() => [createVNode(_component_loading)]),\n        _: 1\n      }), createTextVNode(\" \" + toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)])) : _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", _hoisted_2, toDisplayString(_ctx.t(\"el.cascader.noData\")), 1)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", _hoisted_3, null, 512)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\nvar TwCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TwCascaderMenu as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","Loading","TwIcon","TwScrollbar","TwCascaderNode","props","nodes","type","Array","required","index","Number","setup","instance","getCurrentInstance","t","useLocale","id","generateId","activeNode","hoverTimer","panel","inject","CASCADER_PANEL_INJECTION_KEY","hoverZone","ref","isEmpty","computed","length","isLoading","initialLoaded","menuId","handleExpand","e","target","handleMouseMove","isHoverMenu","value","contains","clearHoverTimer","el","vnode","left","getBoundingClientRect","offsetWidth","offsetHeight","startX","clientX","top","offsetTop","bottom","innerHTML","window","setTimeout","clearHoverZone","config","hoverThreshold","clearTimeout","key","class","openBlock","createBlock","_component_el_scrollbar","_ctx","tag","role","onMousemove","onMouseleave","_a","createElementBlock","Fragment","renderList","node","_component_el_cascader_node","uid","_hoisted_1","createVNode","_component_el_icon"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    class=\"el-cascader-menu\"\n    wrap-class=\"el-cascader-menu__wrap\"\n    :view-class=\"['el-cascader-menu__list', isEmpty && 'is-empty']\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" class=\"el-cascader-menu__empty-text\">\n      <el-icon size=\"14\" class=\"is-loading\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" class=\"el-cascader-menu__empty-text\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      class=\"el-cascader-menu__hover-zone\"\n    ></svg>\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport TwScrollbar from '@tw-element/components/scrollbar'\nimport { useLocale } from '@tw-element/hooks'\nimport { generateId } from '@tw-element/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport TwIcon from '@tw-element/components/icon'\nimport TwCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@tw-element/utils'\n\nexport default defineComponent({\n  name: 'TwCascaderMenu',\n\n  components: {\n    Loading,\n    TwIcon,\n    TwScrollbar,\n    TwCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}