{"ast":null,"code":"import { defineComponent, watch, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { provideGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nconst messageConfig = {};\nconst configProviderProps = buildProps({\n  locale: {\n    type: definePropType(Object)\n  },\n  size: {\n    type: String,\n    values: [\"large\", \"default\", \"small\"]\n  },\n  button: {\n    type: definePropType(Object)\n  },\n  message: {\n    type: definePropType(Object)\n  },\n  zIndex: {\n    type: Number\n  },\n  namespace: {\n    type: String,\n    default: \"el\"\n  }\n});\nvar ConfigProvider = defineComponent({\n  name: \"TwConfigProvider\",\n  props: configProviderProps,\n  setup(props, {\n    slots\n  }) {\n    watch(() => props.message, val => {\n      Object.assign(messageConfig, val != null ? val : {});\n    }, {\n      immediate: true,\n      deep: true\n    });\n    const config = provideGlobalConfig(props);\n    return () => renderSlot(slots, \"default\", {\n      config: config == null ? void 0 : config.value\n    });\n  }\n});\nexport { configProviderProps, ConfigProvider as default, messageConfig };","map":{"version":3,"names":["messageConfig","configProviderProps","buildProps","locale","type","definePropType","Object","size","String","values","button","message","zIndex","Number","namespace","default","ConfigProvider","defineComponent","name","props","setup","slots","watch","val","assign","immediate","deep","config","provideGlobalConfig","renderSlot","value"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/config-provider/src/config-provider.ts"],"sourcesContent":["import { defineComponent, renderSlot, watch } from 'vue'\nimport { buildProps, definePropType } from '@tw-element/utils'\nimport { provideGlobalConfig } from '@tw-element/hooks'\nimport type { Language } from '@tw-element/locale'\nimport type { ButtonConfigContext } from '@tw-element/components/button'\nimport type { MessageConfigContext } from '@tw-element/components/message'\n\nexport const messageConfig: MessageConfigContext = {}\n\nexport const configProviderProps = buildProps({\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n\n  size: {\n    type: String,\n    values: ['large', 'default', 'small'],\n  },\n\n  button: {\n    type: definePropType<ButtonConfigContext>(Object),\n  },\n\n  message: {\n    type: definePropType<MessageConfigContext>(Object),\n  },\n\n  zIndex: {\n    type: Number,\n  },\n\n  namespace: {\n    type: String,\n    default: 'el',\n  },\n} as const)\n\nexport default defineComponent({\n  name: 'TwConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    const config = provideGlobalConfig(props)\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\n"],"mappings":";;;;;AAGY,MAACA,aAAa,GAAG;AACjB,MAACC,mBAAmB,GAAGC,UAAU,CAAC;EAC5CC,MAAM,EAAE;IACNC,IAAI,EAAEC,cAAc,CAACC,MAAM;EAC/B,CAAG;EACDC,IAAI,EAAE;IACJH,IAAI,EAAEI,MAAM;IACZC,MAAM,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO;EACxC,CAAG;EACDC,MAAM,EAAE;IACNN,IAAI,EAAEC,cAAc,CAACC,MAAM;EAC/B,CAAG;EACDK,OAAO,EAAE;IACPP,IAAI,EAAEC,cAAc,CAACC,MAAM;EAC/B,CAAG;EACDM,MAAM,EAAE;IACNR,IAAI,EAAES;EACV,CAAG;EACDC,SAAS,EAAE;IACTV,IAAI,EAAEI,MAAM;IACZO,OAAO,EAAE;EACb;AACA,CAAC;AACD,IAAAC,cAAA,GAAeC,eAAe,CAAC;EAC7BC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAElB,mBAAmB;EAC1BmB,KAAKA,CAACD,KAAK,EAAE;IAAEE;EAAK,CAAE,EAAE;IACtBC,KAAK,CAAC,MAAMH,KAAK,CAACR,OAAO,EAAGY,GAAG,IAAK;MAClCjB,MAAM,CAACkB,MAAM,CAACxB,aAAa,EAAEuB,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,EAAE,CAAC;IAC1D,CAAK,EAAE;MAAEE,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAI,CAAE,CAAC;IACnC,MAAMC,MAAM,GAAGC,mBAAmB,CAACT,KAAK,CAAC;IACzC,OAAO,MAAMU,UAAU,CAACR,KAAK,EAAE,SAAS,EAAE;MAAEM,MAAM,EAAEA,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACG;IAAK,CAAE,CAAC;EACjG;AACA,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}