{"ast":null,"code":"import { onMounted, onBeforeUnmount } from 'vue';\nimport '../../utils/index.mjs';\nimport '../../constants/index.mjs';\nimport { EVENT_CODE } from '../../constants/aria.mjs';\nimport { on, off } from '../../utils/dom/event.mjs';\nconst useEscapeKeydown = handler => {\n  const cachedHandler = e => {\n    const event = e;\n    if (event.key === EVENT_CODE.esc) {\n      handler == null ? void 0 : handler(event);\n    }\n  };\n  onMounted(() => {\n    on(document, \"keydown\", cachedHandler);\n  });\n  onBeforeUnmount(() => {\n    off(document, \"keydown\", cachedHandler);\n  });\n};\nexport { useEscapeKeydown };","map":{"version":3,"names":["useEscapeKeydown","handler","cachedHandler","e","event","key","EVENT_CODE","esc","onMounted","on","document","onBeforeUnmount","off"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/hooks/use-escape-keydown/index.ts"],"sourcesContent":["import { onMounted, onBeforeUnmount } from 'vue'\nimport { on, off } from '@tw-element/utils'\nimport { EVENT_CODE } from '@tw-element/constants'\n\nexport const useEscapeKeydown = (handler?: (e: KeyboardEvent) => void) => {\n  const cachedHandler = (e: Event) => {\n    const event = e as KeyboardEvent\n    if (event.key === EVENT_CODE.esc) {\n      handler?.(event)\n    }\n  }\n  onMounted(() => {\n    on(document, 'keydown', cachedHandler)\n  })\n\n  onBeforeUnmount(() => {\n    off(document, 'keydown', cachedHandler)\n  })\n}\n"],"mappings":";;;;;AAGY,MAACA,gBAAgB,GAAIC,OAAO,IAAK;EAC3C,MAAMC,aAAa,GAAIC,CAAC,IAAK;IAC3B,MAAMC,KAAK,GAAGD,CAAC;IACf,IAAIC,KAAK,CAACC,GAAG,KAAKC,UAAU,CAACC,GAAG,EAAE;MAChCN,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACG,KAAK,CAAC;IAC/C;EACA,CAAG;EACDI,SAAS,CAAC,MAAM;IACdC,EAAE,CAACC,QAAQ,EAAE,SAAS,EAAER,aAAa,CAAC;EAC1C,CAAG,CAAC;EACFS,eAAe,CAAC,MAAM;IACpBC,GAAG,CAACF,QAAQ,EAAE,SAAS,EAAER,aAAa,CAAC;EAC3C,CAAG,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}