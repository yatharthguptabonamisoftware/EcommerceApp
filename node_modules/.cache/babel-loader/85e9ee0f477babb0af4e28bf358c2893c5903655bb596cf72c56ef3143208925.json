{"ast":null,"code":"import { defineComponent, inject, ref, unref, toRef, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport { useTooltipTriggerProps } from './tooltip.mjs';\nimport { whenTrigger } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TwPopperTrigger from '../../popper/src/trigger.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTooltipTrigger\",\n  components: {\n    TwPopperTrigger\n  },\n  props: useTooltipTriggerProps,\n  setup(props) {\n    const ns = useNamespace(\"tooltip\");\n    const {\n      controlled,\n      id,\n      open,\n      onOpen,\n      onClose,\n      onToggle\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const triggerRef = ref(null);\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n    const trigger = toRef(props, \"trigger\");\n    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onOpen));\n    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onClose));\n    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"click\", e => {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onOpen));\n    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onClose));\n    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"contextmenu\", e => {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, e => {\n      const {\n        code\n      } = e;\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n        onToggle(e);\n      }\n    });\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_popper_trigger = resolveComponent(\"el-popper-trigger\");\n  return openBlock(), createBlock(_component_el_popper_trigger, {\n    id: _ctx.id,\n    \"virtual-ref\": _ctx.virtualRef,\n    open: _ctx.open,\n    \"virtual-triggering\": _ctx.virtualTriggering,\n    class: normalizeClass(_ctx.ns.e(\"trigger\")),\n    onBlur: _ctx.onBlur,\n    onClick: _ctx.onClick,\n    onContextmenu: _ctx.onContextMenu,\n    onFocus: _ctx.onFocus,\n    onMouseenter: _ctx.onMouseenter,\n    onMouseleave: _ctx.onMouseleave,\n    onKeydown: _ctx.onKeydown\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"id\", \"virtual-ref\", \"open\", \"virtual-triggering\", \"class\", \"onBlur\", \"onClick\", \"onContextmenu\", \"onFocus\", \"onMouseenter\", \"onMouseleave\", \"onKeydown\"]);\n}\nvar ElTooltipTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ElTooltipTrigger as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","TwPopperTrigger","props","useTooltipTriggerProps","setup","ns","useNamespace","controlled","id","open","onOpen","onClose","onToggle","inject","TOOLTIP_INJECTION_KEY","triggerRef","ref","stopWhenControlledOrDisabled","unref","disabled","trigger","toRef","onMouseenter","composeEventHandlers","whenTrigger","onMouseleave","onClick","e","button","onFocus","onBlur","onContextMenu","preventDefault","onKeydown","code","EVENT_CODE","enter","space","openBlock","createBlock","_component_el_popper_trigger","_ctx","virtualRef","virtualTriggering","class","normalizeClass","onContextmenu","withCtx","renderSlot","$slots"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/tooltip/src/trigger.vue"],"sourcesContent":["<template>\n  <el-popper-trigger\n    :id=\"id\"\n    :virtual-ref=\"virtualRef\"\n    :open=\"open\"\n    :virtual-triggering=\"virtualTriggering\"\n    :class=\"ns.e('trigger')\"\n    @blur=\"onBlur\"\n    @click=\"onClick\"\n    @contextmenu=\"onContextMenu\"\n    @focus=\"onFocus\"\n    @mouseenter=\"onMouseenter\"\n    @mouseleave=\"onMouseleave\"\n    @keydown=\"onKeydown\"\n  >\n    <slot />\n  </el-popper-trigger>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, unref, toRef } from 'vue'\nimport { TwPopperTrigger } from '@tw-element/components/popper'\nimport { composeEventHandlers } from '@tw-element/utils'\nimport { EVENT_CODE } from '@tw-element/constants'\nimport { useNamespace } from '@tw-element/hooks'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\nimport { useTooltipTriggerProps } from './tooltip'\nimport { whenTrigger } from './utils'\n\nimport type { ElOnlyChildExpose } from '@tw-element/components/slot'\n\nexport default defineComponent({\n  name: 'ElTooltipTrigger',\n  components: {\n    TwPopperTrigger,\n  },\n  props: useTooltipTriggerProps,\n  setup(props) {\n    const ns = useNamespace('tooltip')\n    const { controlled, id, open, onOpen, onClose, onToggle } = inject(\n      TOOLTIP_INJECTION_KEY,\n      undefined\n    )!\n    const triggerRef = ref<ElOnlyChildExpose | null>(null)\n\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true\n      }\n    }\n    const trigger = toRef(props, 'trigger')\n    const onMouseenter = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onOpen)\n    )\n    const onMouseleave = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onClose)\n    )\n    const onClick = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'click', (e) => {\n        // distinguish left click\n        if ((e as MouseEvent).button === 0) {\n          onToggle(e)\n        }\n      })\n    )\n\n    const onFocus = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onOpen)\n    )\n\n    const onBlur = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onClose)\n    )\n\n    const onContextMenu = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'contextmenu', (e: Event) => {\n        e.preventDefault()\n        onToggle(e)\n      })\n    )\n\n    const onKeydown = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      (e: KeyboardEvent) => {\n        const { code } = e\n        if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n          onToggle(e)\n        }\n      }\n    )\n\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;AA+BA,MAAKA,SAAA,GAAaC,eAAA,CAAa;EAC7BC,IAAA,EAAM;EACNC,UAAA,EAAY;IACVC;EAAA;EAEFC,KAAA,EAAOC,sBAAA;EACPC,MAAMF,KAAA,EAAO;IACX,MAAMG,EAAA,GAAKC,YAAA,CAAa;IACxB,MAAM;MAAEC,UAAA;MAAYC,EAAA;MAAIC,IAAA;MAAMC,MAAA;MAAQC,OAAA;MAASC;IAAA,IAAaC,MAAA,CAC1DC,qBAAA,EACA;IAEF,MAAMC,UAAA,GAAaC,GAAA,CAA8B;IAEjD,MAAMC,4BAAA,GAA+BA,CAAA,KAAM;MACzC,IAAIC,KAAA,CAAMX,UAAA,KAAeL,KAAA,CAAMiB,QAAA,EAAU;QACvC,OAAO;MAAA;IAAA;IAGX,MAAMC,OAAA,GAAUC,KAAA,CAAMnB,KAAA,EAAO;IAC7B,MAAMoB,YAAA,GAAeC,oBAAA,CACnBN,4BAAA,EACAO,WAAA,CAAYJ,OAAA,EAAS,SAASV,MAAA;IAEhC,MAAMe,YAAA,GAAeF,oBAAA,CACnBN,4BAAA,EACAO,WAAA,CAAYJ,OAAA,EAAS,SAAST,OAAA;IAEhC,MAAMe,OAAA,GAAUH,oBAAA,CACdN,4BAAA,EACAO,WAAA,CAAYJ,OAAA,EAAS,SAAUO,CAAA,IAAM;MAEnC,IAAKA,CAAA,CAAiBC,MAAA,KAAW,GAAG;QAClChB,QAAA,CAASe,CAAA;MAAA;IAAA;IAKf,MAAME,OAAA,GAAUN,oBAAA,CACdN,4BAAA,EACAO,WAAA,CAAYJ,OAAA,EAAS,SAASV,MAAA;IAGhC,MAAMoB,MAAA,GAASP,oBAAA,CACbN,4BAAA,EACAO,WAAA,CAAYJ,OAAA,EAAS,SAAST,OAAA;IAGhC,MAAMoB,aAAA,GAAgBR,oBAAA,CACpBN,4BAAA,EACAO,WAAA,CAAYJ,OAAA,EAAS,eAAgBO,CAAA,IAAa;MAChDA,CAAA,CAAEK,cAAA;MACFpB,QAAA,CAASe,CAAA;IAAA;IAIb,MAAMM,SAAA,GAAYV,oBAAA,CAChBN,4BAAA,EACCU,CAAA,IAAqB;MACpB,MAAM;QAAEO;MAAA,IAASP,CAAA;MACjB,IAAIO,IAAA,KAASC,UAAA,CAAWC,KAAA,IAASF,IAAA,KAASC,UAAA,CAAWE,KAAA,EAAO;QAC1DzB,QAAA,CAASe,CAAA;MAAA;IAAA;IAKf,OAAO;MACLG,MAAA;MACAC,aAAA;MACAF,OAAA;MACAP,YAAA;MACAG,YAAA;MACAC,OAAA;MACAO,SAAA;MACAxB,IAAA;MACAD,EAAA;MACAO,UAAA;MACAV;IAAA;EAAA;AAAA;;;SA1GGiC,SAAA,IAAEC,WAAA,CAAAC,4BAAA;IACNhC,EAAA,EAAAiC,IAAA,CAAAjC,EAAA;IACA,eAAUiC,IAAA,CAAAC,UAAA;IACVjC,IAAA,EAAAgC,IAAA,CAAAhC,IAAA;IACA,sBAAKgC,IAAA,CAAEE,iBAAA;IACPC,KAAA,EAAIC,cAAA,CAAQJ,IAAA,CAAApC,EAAA,CAAAsB,CAAA;IACZG,MAAA,EAAKW,IAAA,CAAEX,MAAA;IACPJ,OAAA,EAAAe,IAAA,CAAWf,OAAA;IACXoB,aAAA,EAAOL,IAAA,CAAAV,aAAA;IACPF,OAAA,EAAAY,IAAA,CAAYZ,OAAA;IACZP,YAAA,EAAYmB,IAAA,CAAAnB,YAAA;IACZG,YAAA,EAASgB,IAAA,CAAAhB,YAAA;IAAAQ,SAAA,EAAAQ,IAAA,CAAAR;;aAEVc,OAAA,CAAQ,OAAAC,UAAA,CAAAP,IAAA,CAAAQ,MAAA,a"},"metadata":{},"sourceType":"module","externalDependencies":[]}