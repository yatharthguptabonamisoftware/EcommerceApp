{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, nextTick, onMounted, onBeforeUnmount, toRefs, resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createVNode, createElementVNode, createElementBlock, normalizeClass, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, toDisplayString, withKeys, renderSlot, vShow, createTextVNode } from 'vue';\nimport { TwButton } from '../../button/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { TwInput } from '../../input/index.mjs';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { TwIcon } from '../../icon/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useModal } from '../../../hooks/use-modal/index.mjs';\nimport { usePreventGlobal } from '../../../hooks/use-prevent-global/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwMessageBox\",\n  directives: {\n    TrapFocus\n  },\n  components: {\n    TwButton,\n    TwInput,\n    ElOverlay,\n    TwIcon,\n    ...TypeComponents\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean\n    },\n    container: {\n      type: String,\n      default: \"body\"\n    },\n    boxType: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"vanish\", \"action\"],\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const visible = ref(false);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const state = reactive({\n      beforeClose: null,\n      callback: null,\n      cancTwButtonText: \"\",\n      cancTwButtonClass: \"\",\n      confirmButtonText: \"\",\n      confirmButtonClass: \"\",\n      customClass: \"\",\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: \"\",\n      inputPattern: null,\n      inputPlaceholder: \"\",\n      inputType: \"text\",\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: \"\",\n      message: null,\n      modalFade: true,\n      modalClass: \"\",\n      showCancTwButton: false,\n      showConfirmButton: true,\n      type: \"\",\n      title: void 0,\n      showInput: false,\n      action: \"\",\n      confirmButtonLoading: false,\n      cancTwButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: \"\",\n      validateError: false,\n      zIndex: nextZIndex()\n    });\n    const typeClass = computed(() => {\n      const type = state.type;\n      return type && TypeComponentsMap[type] ? `el-message-box-icon--${type}` : \"\";\n    });\n    const btnSize = useSize(computed(() => props.buttonSize), {\n      prop: true,\n      form: true,\n      formItem: true\n    });\n    const iconComponent = computed(() => state.icon || TypeComponentsMap[state.type] || \"\");\n    const hasMessage = computed(() => !!state.message);\n    const rootRef = ref();\n    const headerRef = ref();\n    const inputRef = ref();\n    const confirmRef = ref();\n    const confirmButtonClasses = computed(() => state.confirmButtonClass);\n    watch(() => state.inputValue, async val => {\n      await nextTick();\n      if (props.boxType === \"prompt\" && val !== null) {\n        validate();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => visible.value, val => {\n      if (val) {\n        if (props.boxType === \"alert\" || props.boxType === \"confirm\") {\n          nextTick().then(() => {\n            var _a, _b, _c;\n            (_c = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus) == null ? void 0 : _c.call(_b);\n          });\n        }\n        state.zIndex = nextZIndex();\n      }\n      if (props.boxType !== \"prompt\") return;\n      if (val) {\n        nextTick().then(() => {\n          if (inputRef.value && inputRef.value.$el) {\n            getInputElement().focus();\n          }\n        });\n      } else {\n        state.editorErrorMessage = \"\";\n        state.validateError = false;\n      }\n    });\n    const draggable = computed(() => props.draggable);\n    useDraggable(rootRef, headerRef, draggable);\n    onMounted(async () => {\n      await nextTick();\n      if (props.closeOnHashChange) {\n        on(window, \"hashchange\", doClose);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, \"hashchange\", doClose);\n      }\n    });\n    function doClose() {\n      if (!visible.value) return;\n      visible.value = false;\n      nextTick(() => {\n        if (state.action) emit(\"action\", state.action);\n      });\n    }\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? \"close\" : \"cancel\");\n      }\n    };\n    const overlayEvent = useSameTarget(handleWrapperClick);\n    const handleInputEnter = () => {\n      if (state.inputType !== \"textarea\") {\n        return handleAction(\"confirm\");\n      }\n    };\n    const handleAction = action => {\n      var _a;\n      if (props.boxType === \"prompt\" && action === \"confirm\" && !validate()) {\n        return;\n      }\n      state.action = action;\n      if (state.beforeClose) {\n        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);\n      } else {\n        doClose();\n      }\n    };\n    const validate = () => {\n      if (props.boxType === \"prompt\") {\n        const inputPattern = state.inputPattern;\n        if (inputPattern && !inputPattern.test(state.inputValue || \"\")) {\n          state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n          state.validateError = true;\n          return false;\n        }\n        const inputValidator = state.inputValidator;\n        if (typeof inputValidator === \"function\") {\n          const validateResult = inputValidator(state.inputValue);\n          if (validateResult === false) {\n            state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n            state.validateError = true;\n            return false;\n          }\n          if (typeof validateResult === \"string\") {\n            state.editorErrorMessage = validateResult;\n            state.validateError = true;\n            return false;\n          }\n        }\n      }\n      state.editorErrorMessage = \"\";\n      state.validateError = false;\n      return true;\n    };\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    };\n    const handleClose = () => {\n      handleAction(\"close\");\n    };\n    if (props.closeOnPressEscape) {\n      useModal({\n        handleClose\n      }, visible);\n    } else {\n      usePreventGlobal(visible, \"keydown\", e => e.code === EVENT_CODE.esc);\n    }\n    if (props.lockScroll) {\n      useLockscreen(visible);\n    }\n    useRestoreActive(visible);\n    return {\n      ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose,\n      handleClose,\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  key: 0,\n  ref: \"headerRef\",\n  class: \"el-message-box__header\"\n};\nconst _hoisted_3 = {\n  class: \"el-message-box__title\"\n};\nconst _hoisted_4 = {\n  class: \"el-message-box__content\"\n};\nconst _hoisted_5 = {\n  class: \"el-message-box__container\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"el-message-box__message\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = {\n  class: \"el-message-box__input\"\n};\nconst _hoisted_10 = {\n  class: \"el-message-box__btns\"\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_close = resolveComponent(\"close\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_el_overlay = resolveComponent(\"el-overlay\");\n  const _directive_trap_focus = resolveDirective(\"trap-focus\");\n  return openBlock(), createBlock(Transition, {\n    name: \"fade-in-linear\",\n    onAfterLeave: _cache[11] || (_cache[11] = $event => _ctx.$emit(\"vanish\"))\n  }, {\n    default: withCtx(() => [withDirectives(createVNode(_component_el_overlay, {\n      \"z-index\": _ctx.zIndex,\n      \"overlay-class\": [\"is-message-box\", _ctx.modalClass],\n      mask: _ctx.modal\n    }, {\n      default: withCtx(() => [createElementVNode(\"div\", {\n        class: \"el-overlay-message-box\",\n        onClick: _cache[8] || (_cache[8] = (...args) => _ctx.overlayEvent.onClick && _ctx.overlayEvent.onClick(...args)),\n        onMousedown: _cache[9] || (_cache[9] = (...args) => _ctx.overlayEvent.onMousedown && _ctx.overlayEvent.onMousedown(...args)),\n        onMouseup: _cache[10] || (_cache[10] = (...args) => _ctx.overlayEvent.onMouseup && _ctx.overlayEvent.onMouseup(...args))\n      }, [withDirectives((openBlock(), createElementBlock(\"div\", {\n        ref: \"rootRef\",\n        role: \"dialog\",\n        \"aria-label\": _ctx.title || \"dialog\",\n        \"aria-modal\": \"true\",\n        class: normalizeClass([\"el-message-box\", _ctx.customClass, {\n          \"el-message-box--center\": _ctx.center,\n          \"is-draggable\": _ctx.draggable\n        }]),\n        style: normalizeStyle(_ctx.customStyle),\n        onClick: _cache[7] || (_cache[7] = withModifiers(() => {}, [\"stop\"]))\n      }, [_ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [_ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", null, toDisplayString(_ctx.title), 1)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        class: \"el-message-box__headerbtn\",\n        \"aria-label\": \"Close\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\")),\n        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, [createVNode(_component_el_icon, {\n        class: \"el-message-box__close\"\n      }, {\n        default: withCtx(() => [createVNode(_component_close)]),\n        _: 1\n      })], 32)) : createCommentVNode(\"v-if\", true)], 512)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", _hoisted_4, [createElementVNode(\"div\", _hoisted_5, [_ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.hasMessage ? (openBlock(), createElementBlock(\"div\", _hoisted_6, [renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_7, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(\"p\", {\n        key: 1,\n        innerHTML: _ctx.message\n      }, null, 8, _hoisted_8))])])) : createCommentVNode(\"v-if\", true)]), withDirectives(createElementVNode(\"div\", _hoisted_9, [createVNode(_component_el_input, {\n        ref: \"inputRef\",\n        modelValue: _ctx.inputValue,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.inputValue = $event),\n        type: _ctx.inputType,\n        placeholder: _ctx.inputPlaceholder,\n        class: normalizeClass({\n          invalid: _ctx.validateError\n        }),\n        onKeydown: withKeys(withModifiers(_ctx.handleInputEnter, [\"prevent\"]), [\"enter\"])\n      }, null, 8, [\"modelValue\", \"type\", \"placeholder\", \"class\", \"onKeydown\"]), createElementVNode(\"div\", {\n        class: \"el-message-box__errormsg\",\n        style: normalizeStyle({\n          visibility: !!_ctx.editorErrorMessage ? \"visible\" : \"hidden\"\n        })\n      }, toDisplayString(_ctx.editorErrorMessage), 5)], 512), [[vShow, _ctx.showInput]])]), createElementVNode(\"div\", _hoisted_10, [_ctx.showCancTwButton ? (openBlock(), createBlock(_component_el_button, {\n        key: 0,\n        loading: _ctx.cancTwButtonLoading,\n        class: normalizeClass([_ctx.cancTwButtonClass]),\n        round: _ctx.roundButton,\n        size: _ctx.btnSize,\n        onClick: _cache[3] || (_cache[3] = $event => _ctx.handleAction(\"cancel\")),\n        onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers($event => _ctx.handleAction(\"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.cancTwButtonText || _ctx.t(\"el.messagebox.cancel\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"size\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_button, {\n        ref: \"confirmRef\",\n        type: \"primary\",\n        loading: _ctx.confirmButtonLoading,\n        class: normalizeClass([_ctx.confirmButtonClasses]),\n        round: _ctx.roundButton,\n        disabled: _ctx.confirmButtonDisabled,\n        size: _ctx.btnSize,\n        onClick: _cache[5] || (_cache[5] = $event => _ctx.handleAction(\"confirm\")),\n        onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers($event => _ctx.handleAction(\"confirm\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.confirmButtonText || _ctx.t(\"el.messagebox.confirm\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"disabled\", \"size\"]), [[vShow, _ctx.showConfirmButton]])])], 14, _hoisted_1)), [[_directive_trap_focus]])], 32)]),\n      _: 3\n    }, 8, [\"z-index\", \"overlay-class\", \"mask\"]), [[vShow, _ctx.visible]])]),\n    _: 3\n  });\n}\nvar MessageBoxConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { MessageBoxConstructor as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","directives","TrapFocus","components","TwButton","TwInput","ElOverlay","TwIcon","TypeComponents","inheritAttrs","props","buttonSize","type","String","validator","isValidComponentSize","modal","Boolean","default","lockScroll","showClose","closeOnClickModal","closeOnPressEscape","closeOnHashChange","center","draggable","roundButton","container","boxType","emits","setup","emit","t","useLocale","visible","ref","nextZIndex","useZIndex","state","reactive","beforeClose","callback","cancTwButtonText","cancTwButtonClass","confirmButtonText","confirmButtonClass","customClass","customStyle","dangerouslyUseHTMLString","distinguishCancelAndClose","icon","inputPattern","inputPlaceholder","inputType","inputValue","inputValidator","inputErrorMessage","message","modalFade","modalClass","showCancTwButton","showConfirmButton","title","showInput","action","confirmButtonLoading","cancTwButtonLoading","confirmButtonDisabled","editorErrorMessage","validateError","zIndex","typeClass","computed","TypeComponentsMap","btnSize","useSize","prop","form","formItem","iconComponent","hasMessage","rootRef","headerRef","inputRef","confirmRef","confirmButtonClasses","watch","val","nextTick","validate","immediate","value","then","_a","_b","_c","$el","focus","call","getInputElement","useDraggable","onMounted","on","window","doClose","onBeforeUnmount","off","handleWrapperClick","handleAction","overlayEvent","useSameTarget","handleInputEnter","test","validateResult","inputRefs","$refs","input","textarea","handleClose","useModal","usePreventGlobal","e","code","EVENT_CODE","esc","useLockscreen","useRestoreActive","toRefs","_hoisted_2","key","_hoisted_6","_directive_trap_focus","resolveDirective","openBlock","createBlock","Transition","withCtx","withDirectives","createVNode","_component_el_overlay","_ctx","createElementVNode","class","onClick","_cache","args","createElementBlock","role","normalizeClass","_component_el_icon","_","onKeydown","withKeys","withModifiers","$event","createCommentVNode","_hoisted_4","_hoisted_7","toDisplayString","_hoisted_9","modelValue","placeholder","_component_el_button","loading","round","size","disabled"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/message-box/src/index.vue"],"sourcesContent":["<template>\n  <transition name=\"fade-in-linear\" @after-leave=\"$emit('vanish')\">\n    <el-overlay\n      v-show=\"visible\"\n      :z-index=\"zIndex\"\n      :overlay-class=\"['is-message-box', modalClass]\"\n      :mask=\"modal\"\n    >\n      <div\n        class=\"el-overlay-message-box\"\n        @click=\"overlayEvent.onClick\"\n        @mousedown=\"overlayEvent.onMousedown\"\n        @mouseup=\"overlayEvent.onMouseup\"\n      >\n        <div\n          ref=\"rootRef\"\n          v-trap-focus\n          role=\"dialog\"\n          :aria-label=\"title || 'dialog'\"\n          aria-modal=\"true\"\n          :class=\"[\n            'el-message-box',\n            customClass,\n            { 'el-message-box--center': center, 'is-draggable': draggable },\n          ]\"\n          :style=\"customStyle\"\n          @click.stop=\"\"\n        >\n          <div\n            v-if=\"title !== null && title !== undefined\"\n            ref=\"headerRef\"\n            class=\"el-message-box__header\"\n          >\n            <div class=\"el-message-box__title\">\n              <el-icon\n                v-if=\"iconComponent && center\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <span>{{ title }}</span>\n            </div>\n            <button\n              v-if=\"showClose\"\n              type=\"button\"\n              class=\"el-message-box__headerbtn\"\n              aria-label=\"Close\"\n              @click=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n              @keydown.prevent.enter=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n            >\n              <el-icon class=\"el-message-box__close\">\n                <close />\n              </el-icon>\n            </button>\n          </div>\n          <div class=\"el-message-box__content\">\n            <div class=\"el-message-box__container\">\n              <el-icon\n                v-if=\"iconComponent && !center && hasMessage\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <div v-if=\"hasMessage\" class=\"el-message-box__message\">\n                <slot>\n                  <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n                  <p v-else v-html=\"message\"></p>\n                </slot>\n              </div>\n            </div>\n            <div v-show=\"showInput\" class=\"el-message-box__input\">\n              <el-input\n                ref=\"inputRef\"\n                v-model=\"inputValue\"\n                :type=\"inputType\"\n                :placeholder=\"inputPlaceholder\"\n                :class=\"{ invalid: validateError }\"\n                @keydown.prevent.enter=\"handleInputEnter\"\n              />\n              <div\n                class=\"el-message-box__errormsg\"\n                :style=\"{\n                  visibility: !!editorErrorMessage ? 'visible' : 'hidden',\n                }\"\n              >\n                {{ editorErrorMessage }}\n              </div>\n            </div>\n          </div>\n          <div class=\"el-message-box__btns\">\n            <el-button\n              v-if=\"showCancTwButton\"\n              :loading=\"cancTwButtonLoading\"\n              :class=\"[cancTwButtonClass]\"\n              :round=\"roundButton\"\n              :size=\"btnSize\"\n              @click=\"handleAction('cancel')\"\n              @keydown.prevent.enter=\"handleAction('cancel')\"\n            >\n              {{ cancTwButtonText || t('el.messagebox.cancel') }}\n            </el-button>\n            <el-button\n              v-show=\"showConfirmButton\"\n              ref=\"confirmRef\"\n              type=\"primary\"\n              :loading=\"confirmButtonLoading\"\n              :class=\"[confirmButtonClasses]\"\n              :round=\"roundButton\"\n              :disabled=\"confirmButtonDisabled\"\n              :size=\"btnSize\"\n              @click=\"handleAction('confirm')\"\n              @keydown.prevent.enter=\"handleAction('confirm')\"\n            >\n              {{ confirmButtonText || t('el.messagebox.confirm') }}\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </el-overlay>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  onMounted,\n  onBeforeUnmount,\n  computed,\n  watch,\n  reactive,\n  ref,\n  toRefs,\n} from 'vue'\nimport TwButton from '@tw-element/components/button'\nimport { TrapFocus } from '@tw-element/directives'\nimport {\n  useModal,\n  useLockscreen,\n  useLocale,\n  useRestoreActive,\n  usePreventGlobal,\n  useSize,\n  useDraggable,\n  useSameTarget,\n  useZIndex,\n} from '@tw-element/hooks'\nimport TwInput from '@tw-element/components/input'\nimport { ElOverlay } from '@tw-element/components/overlay'\nimport {\n  on,\n  off,\n  isValidComponentSize,\n  TypeComponents,\n  TypeComponentsMap,\n} from '@tw-element/utils'\nimport { EVENT_CODE } from '@tw-element/constants'\nimport { TwIcon } from '@tw-element/components/icon'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@tw-element/constants'\nimport type {\n  Action,\n  MessageBoxState,\n  MessageBoxType,\n} from './message-box.type'\n\nexport default defineComponent({\n  name: 'TwMessageBox',\n  directives: {\n    TrapFocus,\n  },\n  components: {\n    TwButton,\n    TwInput,\n    ElOverlay,\n    TwIcon,\n    ...TypeComponents,\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    modal: {\n      type: Boolean,\n      default: true,\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true,\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true,\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean,\n    },\n    container: {\n      type: String, // default append to body\n      default: 'body',\n    },\n    boxType: {\n      type: String as PropType<MessageBoxType>,\n      default: '',\n    },\n  },\n  emits: ['vanish', 'action'],\n  setup(props, { emit }) {\n    // const popup = usePopup(props, doClose)\n    const { t } = useLocale()\n    const visible = ref(false)\n    const { nextZIndex } = useZIndex()\n    // s represents state\n    const state = reactive<MessageBoxState>({\n      beforeClose: null,\n      callback: null,\n      cancTwButtonText: '',\n      cancTwButtonClass: '',\n      confirmButtonText: '',\n      confirmButtonClass: '',\n      customClass: '',\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: '',\n      inputPattern: null,\n      inputPlaceholder: '',\n      inputType: 'text',\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: '',\n      message: null,\n      modalFade: true,\n      modalClass: '',\n      showCancTwButton: false,\n      showConfirmButton: true,\n      type: '',\n      title: undefined,\n      showInput: false,\n      action: '' as Action,\n      confirmButtonLoading: false,\n      cancTwButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: '',\n      // refer to: https://github.com/ElemeFE/element/commit/2999279ae34ef10c373ca795c87b020ed6753eed\n      // seemed ok for now without this state.\n      // isOnComposition: false, // temporary remove\n      validateError: false,\n      zIndex: nextZIndex(),\n    })\n\n    const typeClass = computed(() => {\n      const type = state.type\n      return type && TypeComponentsMap[type]\n        ? `el-message-box-icon--${type}`\n        : ''\n    })\n\n    const btnSize = useSize(\n      computed(() => props.buttonSize),\n      { prop: true, form: true, formItem: true }\n    )\n\n    const iconComponent = computed(\n      () => state.icon || TypeComponentsMap[state.type] || ''\n    )\n    const hasMessage = computed(() => !!state.message)\n    const rootRef = ref<HTMLElement>()\n    const headerRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLElement>()\n    const confirmRef = ref<HTMLElement>()\n\n    const confirmButtonClasses = computed(() => state.confirmButtonClass)\n\n    watch(\n      () => state.inputValue,\n      async (val) => {\n        await nextTick()\n        if (props.boxType === 'prompt' && val !== null) {\n          validate()\n        }\n      },\n      { immediate: true }\n    )\n\n    watch(\n      () => visible.value,\n      (val) => {\n        if (val) {\n          if (props.boxType === 'alert' || props.boxType === 'confirm') {\n            nextTick().then(() => {\n              confirmRef.value?.$el?.focus?.()\n            })\n          }\n          state.zIndex = nextZIndex()\n        }\n        if (props.boxType !== 'prompt') return\n        if (val) {\n          nextTick().then(() => {\n            if (inputRef.value && inputRef.value.$el) {\n              getInputElement().focus()\n            }\n          })\n        } else {\n          state.editorErrorMessage = ''\n          state.validateError = false\n        }\n      }\n    )\n\n    const draggable = computed(() => props.draggable)\n    useDraggable(rootRef, headerRef, draggable)\n\n    onMounted(async () => {\n      await nextTick()\n      if (props.closeOnHashChange) {\n        on(window, 'hashchange', doClose)\n      }\n    })\n\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, 'hashchange', doClose)\n      }\n    })\n\n    function doClose() {\n      if (!visible.value) return\n      visible.value = false\n      nextTick(() => {\n        if (state.action) emit('action', state.action)\n      })\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? 'close' : 'cancel')\n      }\n    }\n\n    const overlayEvent = useSameTarget(handleWrapperClick)\n\n    const handleInputEnter = () => {\n      if (state.inputType !== 'textarea') {\n        return handleAction('confirm')\n      }\n    }\n\n    const handleAction = (action: Action) => {\n      if (props.boxType === 'prompt' && action === 'confirm' && !validate()) {\n        return\n      }\n\n      state.action = action\n\n      if (state.beforeClose) {\n        state.beforeClose?.(action, state, doClose)\n      } else {\n        doClose()\n      }\n    }\n\n    const validate = () => {\n      if (props.boxType === 'prompt') {\n        const inputPattern = state.inputPattern\n        if (inputPattern && !inputPattern.test(state.inputValue || '')) {\n          state.editorErrorMessage =\n            state.inputErrorMessage || t('el.messagebox.error')\n          state.validateError = true\n          return false\n        }\n        const inputValidator = state.inputValidator\n        if (typeof inputValidator === 'function') {\n          const validateResult = inputValidator(state.inputValue)\n          if (validateResult === false) {\n            state.editorErrorMessage =\n              state.inputErrorMessage || t('el.messagebox.error')\n            state.validateError = true\n            return false\n          }\n          if (typeof validateResult === 'string') {\n            state.editorErrorMessage = validateResult\n            state.validateError = true\n            return false\n          }\n        }\n      }\n      state.editorErrorMessage = ''\n      state.validateError = false\n      return true\n    }\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs\n      return (inputRefs.input || inputRefs.textarea) as HTMLElement\n    }\n\n    const handleClose = () => {\n      handleAction('close')\n    }\n\n    // when close on press escape is disabled, pressing esc should not callout\n    // any other message box and close any other dialog-ish elements\n    // e.g. Dialog has a close on press esc feature, and when it closes, it calls\n    // props.beforeClose method to make a intermediate state by callout a message box\n    // for some verification or alerting. then if we allow global event liek this\n    // to dispatch, it could callout another message box.\n    if (props.closeOnPressEscape) {\n      useModal(\n        {\n          handleClose,\n        },\n        visible\n      )\n    } else {\n      usePreventGlobal(\n        visible,\n        'keydown',\n        (e: KeyboardEvent) => e.code === EVENT_CODE.esc\n      )\n    }\n\n    // locks the screen to prevent scroll\n    if (props.lockScroll) {\n      useLockscreen(visible)\n    }\n\n    // restore to prev active element.\n    useRestoreActive(visible)\n\n    return {\n      ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose, // for outside usage\n      handleClose, // for out side usage\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}