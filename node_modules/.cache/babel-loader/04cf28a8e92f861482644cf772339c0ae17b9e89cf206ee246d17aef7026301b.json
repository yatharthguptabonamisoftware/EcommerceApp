{"ast":null,"code":"import { defineComponent, inject, ref, computed, onBeforeUnmount, toRef, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, vShow } from 'vue';\nimport { isClient, useEventListener } from '@vueuse/core';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { BAR_MAP, renderThumbStyle } from './util.mjs';\nimport { thumbProps } from './thumb2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { scrollbarContextKey } from '../../../tokens/scrollbar.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst COMPONENT_NAME = \"Thumb\";\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: thumbProps,\n  setup(props) {\n    const scrollbar = inject(scrollbarContextKey);\n    const ns = useNamespace(\"scrollbar\");\n    if (!scrollbar) throwError(COMPONENT_NAME, \"can not inject scrollbar context\");\n    const instance = ref();\n    const thumb = ref();\n    const thumbState = ref({});\n    const visible = ref(false);\n    let cursorDown = false;\n    let cursorLeave = false;\n    let originalOnSelectStart = isClient ? document.onselectstart : null;\n    const bar = computed(() => BAR_MAP[props.vertical ? \"vertical\" : \"horizontal\"]);\n    const thumbStyle = computed(() => renderThumbStyle({\n      size: props.size,\n      move: props.move,\n      bar: bar.value\n    }));\n    const offsetRatio = computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);\n    const clickThumbHandler = e => {\n      var _a;\n      e.stopPropagation();\n      if (e.ctrlKey || [1, 2].includes(e.button)) return;\n      (_a = window.getSelection()) == null ? void 0 : _a.removeAllRanges();\n      startDrag(e);\n      const el = e.currentTarget;\n      if (!el) return;\n      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);\n    };\n    const clickTrackHandler = e => {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement) return;\n      const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);\n      const thumbHalf = thumb.value[bar.value.offset] / 2;\n      const thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n    const startDrag = e => {\n      e.stopImmediatePropagation();\n      cursorDown = true;\n      document.addEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.addEventListener(\"mouseup\", mouseUpDocumentHandler);\n      originalOnSelectStart = document.onselectstart;\n      document.onselectstart = () => false;\n    };\n    const mouseMoveDocumentHandler = e => {\n      if (!instance.value || !thumb.value) return;\n      if (cursorDown === false) return;\n      const prevPage = thumbState.value[bar.value.axis];\n      if (!prevPage) return;\n      const offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;\n      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;\n      const thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n    const mouseUpDocumentHandler = () => {\n      cursorDown = false;\n      thumbState.value[bar.value.axis] = 0;\n      document.removeEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.removeEventListener(\"mouseup\", mouseUpDocumentHandler);\n      restoreOnselectstart();\n      if (cursorLeave) visible.value = false;\n    };\n    const mouseMoveScrollbarHandler = () => {\n      cursorLeave = false;\n      visible.value = !!props.size;\n    };\n    const mouseLeaveScrollbarHandler = () => {\n      cursorLeave = true;\n      visible.value = cursorDown;\n    };\n    onBeforeUnmount(() => {\n      restoreOnselectstart();\n      document.removeEventListener(\"mouseup\", mouseUpDocumentHandler);\n    });\n    const restoreOnselectstart = () => {\n      if (document.onselectstart !== originalOnSelectStart) document.onselectstart = originalOnSelectStart;\n    };\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mousemove\", mouseMoveScrollbarHandler);\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mouseleave\", mouseLeaveScrollbarHandler);\n    return {\n      ns,\n      instance,\n      thumb,\n      bar,\n      thumbStyle,\n      visible,\n      clickTrackHandler,\n      clickThumbHandler\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.ns.b(\"fade\")\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n      ref: \"instance\",\n      class: normalizeClass([_ctx.ns.e(\"bar\"), _ctx.ns.is(_ctx.bar.key)]),\n      onMousedown: _cache[1] || (_cache[1] = (...args) => _ctx.clickTrackHandler && _ctx.clickTrackHandler(...args))\n    }, [createElementVNode(\"div\", {\n      ref: \"thumb\",\n      class: normalizeClass(_ctx.ns.e(\"thumb\")),\n      style: normalizeStyle(_ctx.thumbStyle),\n      onMousedown: _cache[0] || (_cache[0] = (...args) => _ctx.clickThumbHandler && _ctx.clickThumbHandler(...args))\n    }, null, 38)], 34), [[vShow, _ctx.always || _ctx.visible]])]),\n    _: 1\n  }, 8, [\"name\"]);\n}\nvar Thumb = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Thumb as default };","map":{"version":3,"names":["COMPONENT_NAME","_sfc_main","defineComponent","name","props","thumbProps","setup","scrollbar","inject","scrollbarContextKey","ns","useNamespace","throwError","instance","ref","thumb","thumbState","visible","cursorDown","cursorLeave","originalOnSelectStart","isClient","document","onselectstart","bar","computed","BAR_MAP","vertical","thumbStyle","renderThumbStyle","size","move","value","offsetRatio","offset","wrapElement","scrollSize","ratio","clickThumbHandler","e","_a","stopPropagation","ctrlKey","includes","button","window","getSelection","removeAllRanges","startDrag","el","currentTarget","axis","client","getBoundingClientRect","direction","clickTrackHandler","Math","abs","target","thumbHalf","thumbPositionPercentage","scroll","stopImmediatePropagation","addEventListener","mouseMoveDocumentHandler","mouseUpDocumentHandler","prevPage","thumbClickPosition","removeEventListener","restoreOnselectstart","mouseMoveScrollbarHandler","mouseLeaveScrollbarHandler","onBeforeUnmount","useEventListener","toRef","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createBlock","Transition","default","withCtx","withDirectives","createElementVNode","class","normalizeClass","is","key","style","normalizeStyle"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/scrollbar/src/thumb.vue"],"sourcesContent":["<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"always || visible\"\n      ref=\"instance\"\n      :class=\"[ns.e('bar'), ns.is(bar.key)]\"\n      @mousedown=\"clickTrackHandler\"\n    >\n      <div\n        ref=\"thumb\"\n        :class=\"ns.e('thumb')\"\n        :style=\"thumbStyle\"\n        @mousedown=\"clickThumbHandler\"\n      ></div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  ref,\n  toRef,\n} from 'vue'\nimport { useEventListener, isClient } from '@vueuse/core'\nimport { scrollbarContextKey } from '@tw-element/tokens'\nimport { throwError } from '@tw-element/utils'\nimport { useNamespace } from '@tw-element/hooks'\nimport { BAR_MAP, renderThumbStyle } from './util'\n\nimport { thumbProps } from './thumb'\n\nconst COMPONENT_NAME = 'Thumb'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: thumbProps,\n\n  setup(props) {\n    const scrollbar = inject(scrollbarContextKey)\n    const ns = useNamespace('scrollbar')\n\n    if (!scrollbar)\n      throwError(COMPONENT_NAME, 'can not inject scrollbar context')\n\n    const instance = ref<HTMLDivElement>()\n    const thumb = ref<HTMLDivElement>()\n\n    const thumbState = ref({})\n    const visible = ref(false)\n\n    let cursorDown = false\n    let cursorLeave = false\n    let originalOnSelectStart:\n      | ((this: GlobalEventHandlers, ev: Event) => any)\n      | null = isClient ? document.onselectstart : null\n\n    const bar = computed(\n      () => BAR_MAP[props.vertical ? 'vertical' : 'horizontal']\n    )\n\n    const thumbStyle = computed(() =>\n      renderThumbStyle({\n        size: props.size,\n        move: props.move,\n        bar: bar.value,\n      })\n    )\n\n    const offsetRatio = computed(\n      () =>\n        // offsetRatioX = original width of thumb / current width of thumb / ratioX\n        // offsetRatioY = original height of thumb / current height of thumb / ratioY\n        // instance height = wrap height - GAP\n        instance.value![bar.value.offset] ** 2 /\n        scrollbar.wrapElement![bar.value.scrollSize] /\n        props.ratio /\n        thumb.value![bar.value.offset]\n    )\n\n    const clickThumbHandler = (e: MouseEvent) => {\n      // prevent click event of middle and right button\n      e.stopPropagation()\n      if (e.ctrlKey || [1, 2].includes(e.button)) return\n\n      window.getSelection()?.removeAllRanges()\n      startDrag(e)\n\n      const el = e.currentTarget as HTMLDivElement\n      if (!el) return\n      thumbState.value[bar.value.axis] =\n        el[bar.value.offset] -\n        (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction])\n    }\n\n    const clickTrackHandler = (e: MouseEvent) => {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement) return\n\n      const offset = Math.abs(\n        (e.target as HTMLElement).getBoundingClientRect()[bar.value.direction] -\n          e[bar.value.client]\n      )\n      const thumbHalf = thumb.value[bar.value.offset] / 2\n      const thumbPositionPercentage =\n        ((offset - thumbHalf) * 100 * offsetRatio.value) /\n        instance.value[bar.value.offset]\n\n      scrollbar.wrapElement[bar.value.scroll] =\n        (thumbPositionPercentage *\n          scrollbar.wrapElement[bar.value.scrollSize]) /\n        100\n    }\n\n    const startDrag = (e: MouseEvent) => {\n      e.stopImmediatePropagation()\n      cursorDown = true\n      document.addEventListener('mousemove', mouseMoveDocumentHandler)\n      document.addEventListener('mouseup', mouseUpDocumentHandler)\n      originalOnSelectStart = document.onselectstart\n      document.onselectstart = () => false\n    }\n\n    const mouseMoveDocumentHandler = (e: MouseEvent) => {\n      if (!instance.value || !thumb.value) return\n      if (cursorDown === false) return\n\n      const prevPage = thumbState.value[bar.value.axis]\n      if (!prevPage) return\n\n      const offset =\n        (instance.value.getBoundingClientRect()[bar.value.direction] -\n          e[bar.value.client]) *\n        -1\n      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage\n      const thumbPositionPercentage =\n        ((offset - thumbClickPosition) * 100 * offsetRatio.value) /\n        instance.value[bar.value.offset]\n      scrollbar.wrapElement[bar.value.scroll] =\n        (thumbPositionPercentage *\n          scrollbar.wrapElement[bar.value.scrollSize]) /\n        100\n    }\n\n    const mouseUpDocumentHandler = () => {\n      cursorDown = false\n      thumbState.value[bar.value.axis] = 0\n      document.removeEventListener('mousemove', mouseMoveDocumentHandler)\n      document.removeEventListener('mouseup', mouseUpDocumentHandler)\n      restoreOnselectstart()\n      if (cursorLeave) visible.value = false\n    }\n\n    const mouseMoveScrollbarHandler = () => {\n      cursorLeave = false\n      visible.value = !!props.size\n    }\n\n    const mouseLeaveScrollbarHandler = () => {\n      cursorLeave = true\n      visible.value = cursorDown\n    }\n\n    onBeforeUnmount(() => {\n      restoreOnselectstart()\n      document.removeEventListener('mouseup', mouseUpDocumentHandler)\n    })\n\n    const restoreOnselectstart = () => {\n      if (document.onselectstart !== originalOnSelectStart)\n        document.onselectstart = originalOnSelectStart\n    }\n\n    useEventListener(\n      toRef(scrollbar, 'scrollbarElement'),\n      'mousemove',\n      mouseMoveScrollbarHandler\n    )\n    useEventListener(\n      toRef(scrollbar, 'scrollbarElement'),\n      'mouseleave',\n      mouseLeaveScrollbarHandler\n    )\n\n    return {\n      ns,\n      instance,\n      thumb,\n      bar,\n      thumbStyle,\n      visible,\n      clickTrackHandler,\n      clickThumbHandler,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}