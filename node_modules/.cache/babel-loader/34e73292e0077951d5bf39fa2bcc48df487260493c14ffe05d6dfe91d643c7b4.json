{"ast":null,"code":"import { defineComponent, inject, ref, reactive, computed, watch, nextTick, onMounted, provide, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { TwButton } from '../../button/index.mjs';\nimport { TwIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { TwTooltip } from '../../tooltip/index.mjs';\nimport { TwInput } from '../../input/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Close, ArrowDown } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './color.mjs';\nimport { OPTIONS_KEY } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { twFormKey, twFormItemKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwColorPicker\",\n  components: {\n    TwButton,\n    ElTooltip: TwTooltip,\n    TwInput,\n    TwIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    popperClass: String,\n    predefine: Array\n  },\n  emits: [\"change\", \"active-change\", UPDATE_MODEL_EVENT],\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"color\");\n    const TwForm = inject(twFormKey, {});\n    const TwFormItem = inject(twFormItemKey, {});\n    const hue = ref(null);\n    const svPanel = ref(null);\n    const alpha = ref(null);\n    const popper = ref(null);\n    const color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat,\n      value: props.modelValue\n    }));\n    const showPicker = ref(false);\n    const showPanTwColor = ref(false);\n    const customInput = ref(\"\");\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanTwColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color, props.showAlpha);\n    });\n    const colorSize = useSize();\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || TwForm.disabled);\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanTwColor.value ? \"\" : color.value;\n    });\n    watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanTwColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        color.fromString(newVal);\n      }\n    });\n    watch(() => currentColor.value, val => {\n      customInput.value = val;\n      emit(\"active-change\", val);\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanTwColor.value) {\n        showPanTwColor.value = true;\n      }\n    });\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw Error(\"color should be instance of _color Class\");\n      }\n      const {\n        r,\n        g,\n        b\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    const debounceSetShowPicker = debounce(setShowPicker, 100);\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          showPanTwColor.value = false;\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n    function confirmValue() {\n      var _a;\n      const value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      (_a = TwFormItem.validate) == null ? void 0 : _a.call(TwFormItem, \"change\");\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat,\n          value: props.modelValue\n        });\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      var _a;\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n      if (props.modelValue !== null) {\n        (_a = TwFormItem.validate) == null ? void 0 : _a.call(TwFormItem, \"change\");\n      }\n      resetColor();\n    }\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(() => showPicker.value, () => {\n      nextTick(() => {\n        var _a, _b, _c;\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = svPanel.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(OPTIONS_KEY, {\n      currentColor\n    });\n    return {\n      color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanTwColor,\n      showPicker,\n      customInput,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_hue_slider = resolveComponent(\"hue-slider\");\n  const _component_sv_panel = resolveComponent(\"sv-panel\");\n  const _component_alpha_slider = resolveComponent(\"alpha-slider\");\n  const _component_predefine = resolveComponent(\"predefine\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_close = resolveComponent(\"close\");\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"popper\",\n    visible: _ctx.showPicker,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => _ctx.showPicker = $event),\n    \"show-arrow\": false,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    offset: 0,\n    \"gpu-acceleration\": false,\n    \"popper-class\": [_ctx.ns.be(\"picker\", \"panel\"), _ctx.ns.b(\"dropdown\"), _ctx.popperClass],\n    \"stop-popper-mouse-event\": false,\n    effect: \"light\",\n    trigger: \"click\",\n    transition: \"el-zoom-in-top\",\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"main-wrapper\"))\n    }, [createVNode(_component_hue_slider, {\n      ref: \"hue\",\n      class: \"hue-slider\",\n      color: _ctx.color,\n      vertical: \"\"\n    }, null, 8, [\"color\"]), createVNode(_component_sv_panel, {\n      ref: \"svPanel\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(_component_alpha_slider, {\n      key: 0,\n      ref: \"alpha\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(_component_predefine, {\n      key: 1,\n      ref: \"predefine\",\n      color: _ctx.color,\n      colors: _ctx.predefine\n    }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btns\"))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"value\"))\n    }, [createVNode(_component_el_input, {\n      modelValue: _ctx.customInput,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.customInput = $event),\n      \"validate-event\": false,\n      size: \"small\",\n      onKeyup: withKeys(_ctx.handleConfirm, [\"enter\"]),\n      onBlur: _ctx.handleConfirm\n    }, null, 8, [\"modelValue\", \"onKeyup\", \"onBlur\"])], 2), createVNode(_component_el_button, {\n      size: \"small\",\n      type: \"text\",\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"link-btn\")),\n      onClick: _ctx.clear\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.clear\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"]), createVNode(_component_el_button, {\n      plain: \"\",\n      size: \"small\",\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btn\")),\n      onClick: _ctx.confirmValue\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.confirm\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])], 2)])), [[_directive_click_outside, _ctx.hide]])]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass([_ctx.ns.b(\"picker\"), _ctx.ns.is(\"disabled\", _ctx.colorDisabled), _ctx.ns.bm(\"picker\", _ctx.colorSize)])\n    }, [_ctx.colorDisabled ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"mask\"))\n    }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"trigger\")),\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"color\"), _ctx.ns.is(\"alpha\", _ctx.showAlpha)])\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"color-inner\")),\n      style: normalizeStyle({\n        backgroundColor: _ctx.displayedColor\n      })\n    }, [withDirectives(createVNode(_component_el_icon, {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"icon\"), _ctx.ns.is(\"icon-arrow-down\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    }, 8, [\"class\"]), [[vShow, _ctx.modelValue || _ctx.showPanTwColor]]), !_ctx.modelValue && !_ctx.showPanTwColor ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"empty\"), _ctx.ns.is(\"icon-close\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 2)]),\n    _: 1\n  }, 8, [\"visible\", \"popper-class\"]);\n}\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { ColorPicker as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","TwButton","ElTooltip","TwTooltip","TwInput","TwIcon","Close","ArrowDown","SvPanel","HueSlider","AlphaSlider","Predefine","directives","ClickOutside","props","modelValue","String","showAlpha","Boolean","colorFormat","disabled","size","type","validator","isValidComponentSize","popperClass","predefine","Array","emits","UPDATE_MODEL_EVENT","setup","emit","t","useLocale","ns","useNamespace","TwForm","inject","twFormKey","TwFormItem","twFormItemKey","hue","ref","svPanel","alpha","popper","color","reactive","Color","enableAlpha","format","value","showPicker","showPanTwColor","customInput","displayedColor","computed","displayedRgb","colorSize","useSize","colorDisabled","currentColor","watch","newVal","fromString","val","color2","Error","r","g","b","toRgb","get","setShowPicker","debounceSetShowPicker","debounce","hide","resetColor","nextTick","handleTrigger","handleConfirm","confirmValue","_a","validate","call","newColor","compare","clear","onMounted","_b","_c","update","provide","OPTIONS_KEY","_component_el_tooltip","resolveComponent","_directive_click_outside","resolveDirective","visible","_ctx","_cache","$event","offset","be","effect","transition","content","withCtx","createElementVNode","class","normalizeClass","createVNode","_component_hue_slider","vertical","openBlock","createBlock","_component_alpha_slider","createCommentVNode","_component_predefine","key","colors","_component_el_input","onBlur","_component_el_button","_","plain","default","bm","onClick","args","is","vShow"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/color-picker/src/index.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    v-model:visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    transition=\"el-zoom-in-top\"\n    persistent\n  >\n    <template #content>\n      <div v-click-outside=\"hide\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            size=\"small\"\n            type=\"text\"\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :class=\"[\n          ns.b('picker'),\n          ns.is('disabled', colorDisabled),\n          ns.bm('picker', colorSize),\n        ]\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\"></div>\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanTwColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-if=\"!modelValue && !showPanTwColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport TwButton from '@tw-element/components/button'\nimport TwIcon from '@tw-element/components/icon'\nimport { ClickOutside } from '@tw-element/directives'\nimport { twFormItemKey, twFormKey } from '@tw-element/tokens'\nimport { useLocale, useSize, useNamespace } from '@tw-element/hooks'\nimport ElTooltip from '@tw-element/components/tooltip'\nimport TwInput from '@tw-element/components/input'\nimport { UPDATE_MODEL_EVENT } from '@tw-element/constants'\nimport { isValidComponentSize } from '@tw-element/utils'\nimport { Close, ArrowDown } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './color'\nimport { OPTIONS_KEY } from './useOption'\n\nimport type { PropType } from 'vue'\nimport type { TwFormContext, TwFormItemContext } from '@tw-element/tokens'\nimport type { ComponentSize } from '@tw-element/constants'\nimport type { IUseOptions } from './useOption'\n\nexport default defineComponent({\n  name: 'TwColorPicker',\n  components: {\n    TwButton,\n    ElTooltip,\n    TwInput,\n    TwIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine,\n  },\n  directives: {\n    ClickOutside,\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    popperClass: String,\n    predefine: Array,\n  },\n  emits: ['change', 'active-change', UPDATE_MODEL_EVENT],\n  setup(props, { emit }) {\n    const { t } = useLocale()\n    const ns = useNamespace('color')\n    const TwForm = inject(twFormKey, {} as TwFormContext)\n    const TwFormItem = inject(twFormItemKey, {} as TwFormItemContext)\n\n    const hue = ref(null)\n    const svPanel = ref(null)\n    const alpha = ref(null)\n    const popper = ref(null)\n    // data\n    const color = reactive(\n      new Color({\n        enableAlpha: props.showAlpha,\n        format: props.colorFormat,\n        value: props.modelValue,\n      })\n    )\n    const showPicker = ref(false)\n    const showPanTwColor = ref(false)\n    const customInput = ref('')\n    // computed\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanTwColor.value) {\n        return 'transparent'\n      }\n      return displayedRgb(color, props.showAlpha)\n    })\n    const colorSize = useSize()\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || TwForm.disabled)\n    })\n\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanTwColor.value ? '' : color.value\n    })\n    // watch\n    watch(\n      () => props.modelValue,\n      (newVal) => {\n        if (!newVal) {\n          showPanTwColor.value = false\n        } else if (newVal && newVal !== color.value) {\n          color.fromString(newVal)\n        }\n      }\n    )\n    watch(\n      () => currentColor.value,\n      (val) => {\n        customInput.value = val\n        emit('active-change', val)\n      }\n    )\n\n    watch(\n      () => color.value,\n      () => {\n        if (!props.modelValue && !showPanTwColor.value) {\n          showPanTwColor.value = true\n        }\n      }\n    )\n\n    // methods\n    function displayedRgb(color, showAlpha) {\n      if (!(color instanceof Color)) {\n        throw Error('color should be instance of _color Class')\n      }\n\n      const { r, g, b } = color.toRgb()\n      return showAlpha\n        ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n        : `rgb(${r}, ${g}, ${b})`\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100)\n\n    function hide() {\n      debounceSetShowPicker(false)\n      resetColor()\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue)\n        } else {\n          showPanTwColor.value = false\n        }\n      })\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return\n      debounceSetShowPicker(!showPicker.value)\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value)\n    }\n\n    function confirmValue() {\n      const value = color.value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('change', value)\n      TwFormItem.validate?.('change')\n      debounceSetShowPicker(false)\n      // check if modelValue change, if not change, then reset color.\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat,\n          value: props.modelValue,\n        })\n        if (!color.compare(newColor)) {\n          resetColor()\n        }\n      })\n    }\n\n    function clear() {\n      debounceSetShowPicker(false)\n      emit(UPDATE_MODEL_EVENT, null)\n      emit('change', null)\n      if (props.modelValue !== null) {\n        TwFormItem.validate?.('change')\n      }\n      resetColor()\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value\n      }\n    })\n    watch(\n      () => showPicker.value,\n      () => {\n        nextTick(() => {\n          hue.value?.update()\n          svPanel.value?.update()\n          alpha.value?.update()\n        })\n      }\n    )\n\n    provide<IUseOptions>(OPTIONS_KEY, {\n      currentColor,\n    })\n\n    return {\n      color: color as Color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanTwColor,\n      showPicker,\n      customInput,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA,MAAKA,SAAA,GAAaC,eAAA,CAAa;EAC7BC,IAAA,EAAM;EACNC,UAAA,EAAY;IACVC,QAAA;IAAAC,SAAA,EACAC,SAAA;IACAC,OAAA;IACAC,MAAA;IACAC,KAAA;IACAC,SAAA;IACAC,OAAA;IACAC,SAAA;IACAC,WAAA;IACAC;EAAA;EAEFC,UAAA,EAAY;IACVC;EAAA;EAEFC,KAAA,EAAO;IACLC,UAAA,EAAYC,MAAA;IACZC,SAAA,EAAWC,OAAA;IACXC,WAAA,EAAaH,MAAA;IACbI,QAAA,EAAUF,OAAA;IACVG,IAAA,EAAM;MACJC,IAAA,EAAMN,MAAA;MACNO,SAAA,EAAWC;IAAA;IAEbC,WAAA,EAAaT,MAAA;IACbU,SAAA,EAAWC;EAAA;EAEbC,KAAA,EAAO,CAAC,UAAU,iBAAiBC,kBAAA;EACnCC,MAAMhB,KAAA,EAAO;IAAEiB;EAAA,GAAQ;IACrB,MAAM;MAAEC;IAAA,IAAMC,SAAA;IACd,MAAMC,EAAA,GAAKC,YAAA,CAAa;IACxB,MAAMC,MAAA,GAASC,MAAA,CAAOC,SAAA,EAAW;IACjC,MAAMC,UAAA,GAAaF,MAAA,CAAOG,aAAA,EAAe;IAEzC,MAAMC,GAAA,GAAMC,GAAA,CAAI;IAChB,MAAMC,OAAA,GAAUD,GAAA,CAAI;IACpB,MAAME,KAAA,GAAQF,GAAA,CAAI;IAClB,MAAMG,MAAA,GAASH,GAAA,CAAI;IAEnB,MAAMI,KAAA,GAAQC,QAAA,CACZ,IAAIC,KAAA,CAAM;MACRC,WAAA,EAAanC,KAAA,CAAMG,SAAA;MACnBiC,MAAA,EAAQpC,KAAA,CAAMK,WAAA;MACdgC,KAAA,EAAOrC,KAAA,CAAMC;IAAA;IAGjB,MAAMqC,UAAA,GAAaV,GAAA,CAAI;IACvB,MAAMW,cAAA,GAAiBX,GAAA,CAAI;IAC3B,MAAMY,WAAA,GAAcZ,GAAA,CAAI;IAExB,MAAMa,cAAA,GAAiBC,QAAA,CAAS,MAAM;MACpC,IAAI,CAAC1C,KAAA,CAAMC,UAAA,IAAc,CAACsC,cAAA,CAAeF,KAAA,EAAO;QAC9C,OAAO;MAAA;MAET,OAAOM,YAAA,CAAaX,KAAA,EAAOhC,KAAA,CAAMG,SAAA;IAAA;IAEnC,MAAMyC,SAAA,GAAYC,OAAA;IAClB,MAAMC,aAAA,GAAgBJ,QAAA,CAAS,MAAM;MACnC,OAAO,CAAC,EAAA1C,KAAA,CAAQM,QAAA,IAAYgB,MAAA,CAAOhB,QAAA;IAAA;IAGrC,MAAMyC,YAAA,GAAeL,QAAA,CAAS,MAAM;MAClC,OAAO,CAAC1C,KAAA,CAAMC,UAAA,IAAc,CAACsC,cAAA,CAAeF,KAAA,GAAQ,KAAKL,KAAA,CAAMK,KAAA;IAAA;IAGjEW,KAAA,CACE,MAAMhD,KAAA,CAAMC,UAAA,EACXgD,MAAA,IAAW;MACV,IAAI,CAACA,MAAA,EAAQ;QACXV,cAAA,CAAeF,KAAA,GAAQ;MAAA,WACdY,MAAA,IAAUA,MAAA,KAAWjB,KAAA,CAAMK,KAAA,EAAO;QAC3CL,KAAA,CAAMkB,UAAA,CAAWD,MAAA;MAAA;IAAA;IAIvBD,KAAA,CACE,MAAMD,YAAA,CAAaV,KAAA,EAClBc,GAAA,IAAQ;MACPX,WAAA,CAAYH,KAAA,GAAQc,GAAA;MACpBlC,IAAA,CAAK,iBAAiBkC,GAAA;IAAA;IAI1BH,KAAA,CACE,MAAMhB,KAAA,CAAMK,KAAA,EACZ,MAAM;MACJ,IAAI,CAACrC,KAAA,CAAMC,UAAA,IAAc,CAACsC,cAAA,CAAeF,KAAA,EAAO;QAC9CE,cAAA,CAAeF,KAAA,GAAQ;MAAA;IAAA;IAM7B,SAAAM,aAAsBS,MAAA,EAAOjD,SAAA,EAAW;MACtC,IAAI,EAAAiD,MAAA,YAAmBlB,KAAA,GAAQ;QAC7B,MAAMmB,KAAA,CAAM;MAAA;MAGd,MAAM;QAAEC,CAAA;QAAGC,CAAA;QAAGC;MAAA,IAAMJ,MAAA,CAAMK,KAAA;MAC1B,OAAOtD,SAAA,GACH,QAAQmD,CAAA,KAAMC,CAAA,KAAMC,CAAA,KAAMJ,MAAA,CAAMM,GAAA,CAAI,WAAW,SAC/C,OAAOJ,CAAA,KAAMC,CAAA,KAAMC,CAAA;IAAA;IAGzB,SAAAG,cAAuBtB,KAAA,EAAO;MAC5BC,UAAA,CAAWD,KAAA,GAAQA,KAAA;IAAA;IAGrB,MAAMuB,qBAAA,GAAwBC,QAAA,CAASF,aAAA,EAAe;IAEtD,SAAAG,KAAA,EAAgB;MACdF,qBAAA,CAAsB;MACtBG,UAAA;IAAA;IAGF,SAAAA,WAAA,EAAsB;MACpBC,QAAA,CAAS,MAAM;QACb,IAAIhE,KAAA,CAAMC,UAAA,EAAY;UACpB+B,KAAA,CAAMkB,UAAA,CAAWlD,KAAA,CAAMC,UAAA;QAAA,OAClB;UACLsC,cAAA,CAAeF,KAAA,GAAQ;QAAA;MAAA;IAAA;IAK7B,SAAA4B,cAAA,EAAyB;MACvB,IAAInB,aAAA,CAAcT,KAAA,EAAO;MACzBuB,qBAAA,CAAsB,CAACtB,UAAA,CAAWD,KAAA;IAAA;IAGpC,SAAA6B,cAAA,EAAyB;MACvBlC,KAAA,CAAMkB,UAAA,CAAWV,WAAA,CAAYH,KAAA;IAAA;IAG/B,SAAA8B,aAAA,EAAwB;MACtB,IAAAC,EAAM;MACN,MAAA/B,KAAA,GAAAL,KAAA,CAAAK,KAAyB;MACzBpB,IAAA,CAAKF,kBAAA,EAAAsB,KAAA;MACLpB,IAAA,WAAAoB,KAAA;MACA,CAAA+B,EAAA,GAAA3C,UAAA,CAAA4C,QAAA,qBAAAD,EAAA,CAAAE,IAAA,CAAA7C,UAAA;MAEAmC,qBAAA;MACEI,QAAM;QAAqB,MAAAO,QAAA,OACNrC,KAAA;UACnBC,WAAA,EAAAnC,KAAA,CAAAG,SAAA;UACAiC,MAAA,EAAApC,KAAa,CAAAK,WAAA;UAAAgC,KAAA,EAAArC,KAAA,CAAAC;QAEf;QACE,KAAA+B,KAAA,CAAAwC,OAAA,CAAAD,QAAA;UAAAR,UAAA;QAAA;MAAA;IAKN;IACE,SAAAU,MAAA;MACA,IAAAL,EAAA;MACAR,qBAAA;MACA3C,IAAI,CAAAF,kBAAA,EAAqB;MACvBE,IAAA,SAAW;MAAW,IAAAjB,KAAA,CAAAC,UAAA;QAExB,CAAAmE,EAAA,GAAA3C,UAAA,CAAA4C,QAAA,qBAAAD,EAAA,CAAAE,IAAA,CAAA7C,UAAA;MAAA;MAGFsC,UAAA;IACE;IACEW,SAAA,OAAY;MAAqB,IAAA1E,KAAA,CAAAC,UAAA;QAAAuC,WAAA,CAAAH,KAAA,GAAAU,YAAA,CAAAV,KAAA;MAGrC;IAGI;IACEW,KAAA,OAAAV,UAAA,CAAAD,KAAA;MACA2B,QAAA;QACA,IAAAI,EAAM,EAAAO,EAAA,EAAAC,EAAA;QAAO,CAAAR,EAAA,GAAAzC,GAAA,CAAAU,KAAA,qBAAA+B,EAAA,CAAAS,MAAA;QAAA,CAAAF,EAAA,GAAA9C,OAAA,CAAAQ,KAAA,qBAAAsC,EAAA,CAAAE,MAAA;QAKnB,CAAAD,EAAA,GAAA9C,KAAA,CAAAO,KAAkC,qBAAAuC,EAAA,CAAAC,MAAA;MAAA;IAChC;IAGFC,OAAO,CAAAC,WAAA;MACLhC;IAAA,EACA;IAAA;MAEAf,KAAA;MACAc,aAAA;MACAF,SAAA;MACAH,cAAA;MACAF,cAAA;MACAD,UAAA;MACAE,WAAA;MACA0B,aAAA;MACAJ,IAAA;MACAG,aAAA;MACAQ,KAAA;MACAN,YAAA;MACAjD,CAAA;MACAE,EAAA;MACAO,GAAA;MAAAE,OAAA;MAAAC,KAAA;MAAAC;;;;;;;;;;;;;;EA1UU,MAAAiD,qBAAA,GAAAC,gBAAA;EACJ,MAAAC,wBAAA,GAAAC,gBAAA;;IAEPvD,GAAA;IACAwD,OAAA,EAAAC,IAAA,CAAA/C,UAAA;IACA,oBAAAgD,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAAF,IAAA,CAAA/C,UAAA,GAAAiD,MAAA;IACA;IACA;IACDC,MAAA;IACA;IACA,iBAAAH,IAAA,CAAAjE,EAAA,CAAAqE,EAAA,qBAAAJ,IAAA,CAAAjE,EAAA,CAAAoC,CAAA,cAAA6B,IAAA,CAAA1E,WAAA;IACA;IAAA+E,MAAA;;IAEWC,UAAA;;EAKD;IAHOC,OAAA,EAAAC,OAAA,Q,8DACXC,kBAAA;MAAqBC,KAAA,EAAMC,cAAA,CAAAX,IAAA,CAAAjE,EAAA,CAAAqE,EAAA;IAAA,IAAsBQ,WAAA,CAAAC,qBAAA;MAAetE,GAAA;;MACvBI,KAAA,EAAAqD,IAA3B,CAAArD,KAAA;MAAWmE,QAAA;IAAK,wB;;MAEZnE,KAAA,EAAAqD,IAAA,CAAArD;2BAAe,MAAcqD,IAAA,CAAAlF,SAAA,IAAAiG,SAAA,IAAAC,WAAA,CAAAC,uBAAA;;MAEhC1E,GAAA;MACfI,KAAI,EAAAqD,IAAA,CAAArD;IAAA,OACE,mBAAAuE,kBAAA,gBAAAlB,IAAA,CAAAzE,SACG,IAAAwF,SAAA,IAAAC,WAAA,CAAAG,oBAAA;MAAAC,GAAA;;MA4BLzE,KAAA,EAAAqD,IAAA,CAAArD,KAAA;MA1BO0E,MAAA,EAAArB,IAAA,CAAAzE;OACX,iCAAA2F,kBAAA,gBAAAT,kBAAA;MAAcC,KAAA,EAAAC,cAAA,CAAAX,IAAA,CAAAjE,EAAA,CAAAqE,EAAA;QACZK,kBAAA;MACsBC,KAAA,EAAAC,cAAA,CAAAX,IAAA,CAAAjE,EAAA,CAAAqE,EAAA;QACEQ,WAAA,CAAAU,mBAAA;MAErB1G,UAAA,EAAAoF,IAAA,CAAA7C,WAAA;MACA,uBAAA8C,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAAF,IAAA,CAAA7C,WAAA,GAAA+C,MAAA;MAAmB;;;MAGxBqB,MAAA,EAAAvB,IAAA,CAAAnB;IACc,iDACP,MACC+B,WAAA,CAAAY,oBAAA;MACOtG,IAAA;;;;;kGAWH;MALVuG,CAAA;IAAK,6BACCb,WAAA,CAAAY,oBAAA;MACcE,KAAA;;;;;;;gFAuCpB,EA9BE;IAAkBC,OAAA,EAAAnB,OAAA,QAA2BC,kBAAA,QAAuD;MAAAC,KAAA,EAAAC,cAAA,E,iEAM/FX,IAAA,CAAAjE,EAAA,CAAA6F,EAAA,WAAA5B,IAAA,CAAAzC,SAAA,E;IAAqB,I;MAuB1B6D,GAAA;MAtBoCV,KAAA,EAAKC,cAAA,CAAAX,IAAA,CAAAjE,EAAA,CAAAqE,EAAA;IAAA,eAAAc,kBAAA,gB;MAC7CR,KAAA,EAAAC,cAAA,CAAAX,IAAA,CAAejE,EAAA,CAAAqE,EAAA;MAAAyB,OAAA,EAAA5B,MAAA,QAAAA,MAAA,UAAA6B,IAAA,KAAA9B,IAAA,CAAApB,aAAA,IAAAoB,IAAA,CAAApB,aAAA,IAAAkD,IAAA;QACbrB,kBAAA;MACUC,KAAA,EAAAC,cAAA,EAAAX,IAAA,CAAAjE,EAAA,CAAAqE,EAAA,qBAAAJ,IAAA,CAAAjE,EAAA,CAAAgG,EAAA,UAAA/B,IAAA,CAAAlF,SAAA;IACF,IAAqC2F,kBAAA;;;;MAM3B;;MAEAC,KAAA,EAAAC,cAAA,EAAAX,IAAA,CAAAjE,EAAA,CAAAqE,EAAA,oBAAAJ,IAAA,CAAAjE,EAAA,CAAAgG,EAAA;;iEAHQ;;uBAOrB,CAAAC,KAAA,EAAAhC,IAAA,CAAApF,UAAA,IAAAoF,IAAA,CAAA9C,cAAA,EAAK,G;;MAEGwD,KAAA,EAAAC,cAAA,EAAAX,IAAA,CAAAjE,EAAA,CAAAqE,EAAA,qBAAAJ,IAAA,CAAAjE,EAAA,CAAAgG,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}