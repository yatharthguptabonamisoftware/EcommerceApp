{"ast":null,"code":"import { defineComponent, inject, ref, getCurrentInstance, provide, watch, nextTick, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nimport { isFunction, isString } from '@vue/shared';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport { TwCheckbox } from '../../checkbox/index.mjs';\nimport { TwIcon } from '../../icon/index.mjs';\nimport { Loading, CaretRight } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _sfc_main$1 from './tree-node-content.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { dragEventsKey } from './model/useDragNode.mjs';\nimport Node from './model/node.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwTreeNode\",\n  components: {\n    TwCollapseTransition: _CollapseTransition,\n    TwCheckbox,\n    NodeContent: _sfc_main$1,\n    TwIcon,\n    Loading\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n  setup(props, ctx) {\n    const ns = useNamespace(\"tree\");\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const dragEvents = inject(dragEventsKey);\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n    if (!tree) {\n      debugWarn(\"Tree\", \"Can not find node's tree.\");\n    }\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n    const childrenKey = tree.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.expanded, val => {\n      nextTick(() => expanded.value = val);\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n    const getNodeKey$1 = node => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n    const getNodeClass = node => {\n      const nodeClassFunc = props.props.class;\n      if (!nodeClassFunc) {\n        return {};\n      }\n      let className;\n      if (isFunction(nodeClassFunc)) {\n        const {\n          data\n        } = node;\n        className = nodeClassFunc(data, node);\n      } else {\n        className = nodeClassFunc;\n      }\n      if (isString(className)) {\n        return {\n          [className]: true\n        };\n      } else {\n        return className;\n      }\n    };\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n    const handleClick = e => {\n      const store = tree.store.value;\n      store.setCurrentNode(props.node);\n      tree.ctx.emit(\"current-change\", store.currentNode ? store.currentNode.data : null, store.currentNode);\n      tree.currentNode.value = props.node;\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance, e);\n    };\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragStart({\n        event,\n        treeNode: props\n      });\n    };\n    const handleDragOver = event => {\n      event.preventDefault();\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n    };\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragEnd(event);\n    };\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey: getNodeKey$1,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nconst _hoisted_2 = [\"aria-expanded\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_node_content = resolveComponent(\"node-content\");\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.node.isCurrent), _ctx.ns.is(\"hidden\", !_ctx.node.visible), _ctx.ns.is(\"focusable\", !_ctx.node.disabled), _ctx.ns.is(\"checked\", !_ctx.node.disabled && _ctx.node.checked), _ctx.getNodeClass(_ctx.node)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"expand-icon\"), _ctx.ns.is(\"leaf\", _ctx.node.isLeaf), {\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"loading-icon\"), _ctx.ns.is(\"loading\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 6), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"node\", \"children\")),\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        accordion: _ctx.accordion,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"accordion\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 10, _hoisted_2)), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, _hoisted_1)), [[vShow, _ctx.node.visible]]);\n}\nvar TwTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TwTreeNode as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","TwCollapseTransition","_CollapseTransition","TwCheckbox","NodeContent","_sfc_main$1","TwIcon","Loading","props","node","type","Node","default","Object","accordion","Boolean","renderContent","Function","renderAfterExpand","showCheckbox","emits","setup","ctx","ns","useNamespace","broadcastExpanded","useNodeExpandEventBroadcast","tree","inject","expanded","ref","childNodeRendered","oldChecked","oldIndeterminate","node$","dragEvents","dragEventsKey","instance","getCurrentInstance","provide","debugWarn","value","childrenKey","watch","children","data","updateChildren","indeterminate","val","handleSelectChange","checked","nextTick","getNodeKey$1","getNodeKey","nodeKey","getNodeClass","nodeClassFunc","class","className","isFunction","isString","emit","handleClick","e","store","setCurrentNode","currentNode","expandOnClickNode","handleExpandIconClick","checkOnClickNode","disabled","handleCheckChange","target","handleContextMenu","event","vnode","stopPropagation","preventDefault","isLeaf","collapse","expand","ev","setChecked","checkStrictly","checkedNodes","getCheckedNodes","checkedKeys","getCheckedKeys","halfCheckedNodes","getHalfCheckedNodes","halfCheckedKeys","getHalfCheckedKeys","handleChildNodeExpand","nodeData","instance2","handleDragStart","draggable","treeNodeDragStart","treeNode","handleDragOver","treeNodeDragOver","$el","handleDrop","handleDragEnd","treeNodeDragEnd","CaretRight","withDirectives","openBlock","createElementBlock","normalizeClass","_ctx","b","is","isCurrent","visible","role","tabindex","onClick","_cache","withModifiers","args","onContextmenu","onDragstart","onDragover","onDragend","onDrop","createElementVNode","be","style","normalizeStyle","paddingLeft","level","indent","icon","createBlock","_component_el_icon","key","resolveDynamicComponent","createCommentVNode","_component_el_checkbox","onChange","loading","withCtx","createVNode","_component_loading","_component_node_content","_component_el_collapse_transition","Fragment","renderList","childNodes","child","_component_el_tree_node","onNodeExpand","_hoisted_2","vShow","_hoisted_1"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\"></component>\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  ref,\n  watch,\n  nextTick,\n  inject,\n  provide,\n} from 'vue'\nimport { isString, isFunction } from '@vue/shared'\nimport TwCollapseTransition from '@tw-element/components/collapse-transition'\nimport TwCheckbox from '@tw-element/components/checkbox'\nimport { TwIcon } from '@tw-element/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@tw-element/utils'\nimport { useNamespace } from '@tw-element/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@tw-element/utils'\nimport type { TreeOptionProps, TreeNodeData, RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'TwTreeNode',\n  components: {\n    TwCollapseTransition,\n    TwCheckbox,\n    NodeContent,\n    TwIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      const store = tree.store.value\n      store.setCurrentNode(props.node)\n      tree.ctx.emit(\n        'current-change',\n        store.currentNode ? store.currentNode.data : null,\n        store.currentNode\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}