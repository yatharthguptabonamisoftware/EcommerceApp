{"ast":null,"code":"import { defineComponent, inject, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode } from 'vue';\nimport { CaretRight } from '@element-plus/icons-vue';\nimport { TwIcon } from '../../icon/index.mjs';\nimport { TwCheckbox } from '../../checkbox/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElNodeContent from './tree-node-content.mjs';\nimport { treeNodeProps, treeNodeEmits, ROOT_TREE_INJECTION_KEY, NODE_CONTEXTMENU } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst DEFAULT_ICON = \"caret-right\";\nconst _sfc_main = defineComponent({\n  name: \"TwTreeNode\",\n  components: {\n    TwIcon,\n    CaretRight,\n    TwCheckbox,\n    ElNodeContent\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n  setup(props, {\n    emit\n  }) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY);\n    const ns = useNamespace(\"tree\");\n    const indent = computed(() => {\n      var _a;\n      return (_a = tree == null ? void 0 : tree.props.indent) != null ? _a : 16;\n    });\n    const icon = computed(() => {\n      var _a;\n      return (_a = tree == null ? void 0 : tree.props.icon) != null ? _a : DEFAULT_ICON;\n    });\n    const handleClick = e => {\n      emit(\"click\", props.node, e);\n    };\n    const handleExpandIconClick = () => {\n      emit(\"toggle\", props.node);\n    };\n    const handleCheckChange = value => {\n      emit(\"check\", props.node, value);\n    };\n    const handleContextMenu = event => {\n      var _a, _b, _c, _d;\n      if ((_c = (_b = (_a = tree == null ? void 0 : tree.instance) == null ? void 0 : _a.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props.node) == null ? void 0 : _d.data, props.node);\n    };\n    return {\n      ns,\n      indent,\n      icon,\n      handleClick,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleContextMenu\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"data-key\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a, _b, _c;\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_el_node_content = resolveComponent(\"el-node-content\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.current), _ctx.ns.is(\"focusable\", !_ctx.disabled), _ctx.ns.is(\"checked\", !_ctx.disabled && _ctx.checked)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.disabled,\n    \"aria-checked\": _ctx.checked,\n    \"data-key\": (_a = _ctx.node) == null ? void 0 : _a.key,\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: `${(_ctx.node.level - 1) * _ctx.indent}px`\n    })\n  }, [_ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.is(\"leaf\", !!((_b = _ctx.node) == null ? void 0 : _b.isLeaf)), _ctx.ns.is(\"hidden\", _ctx.hiddenExpandIcon), {\n      expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded\n    }, _ctx.ns.be(\"node\", \"expand-icon\")]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.checked,\n    indeterminate: _ctx.indeterminate,\n    disabled: _ctx.disabled,\n    onChange: _ctx.handleCheckChange,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"]))\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_el_node_content, {\n    node: _ctx.node\n  }, null, 8, [\"node\"])], 6)], 42, _hoisted_1);\n}\nvar TwTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { TwTreeNode as default };","map":{"version":3,"names":["DEFAULT_ICON","_sfc_main","defineComponent","name","components","TwIcon","CaretRight","TwCheckbox","ElNodeContent","props","treeNodeProps","emits","treeNodeEmits","setup","emit","tree","inject","ROOT_TREE_INJECTION_KEY","ns","useNamespace","indent","computed","_a","icon","handleClick","e","node","handleExpandIconClick","handleCheckChange","value","handleContextMenu","event","_b","_c","_d","instance","vnode","stopPropagation","preventDefault","ctx","NODE_CONTEXTMENU","data","_component_el_icon","resolveComponent","_component_el_checkbox","_component_el_node_content","openBlock","createElementBlock","ref","class","normalizeClass","_ctx","b","is","disabled","checked","role","tabindex","expanded","key","onClick","_cache","withModifiers","args","onContextmenu","createElementVNode","be","style","normalizeStyle","paddingLeft","level","createBlock","resolveDynamicComponent","_","createCommentVNode","showCheckbox","onChange"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/tree-v2/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', current),\n      ns.is('focusable', !disabled),\n      ns.is('checked', !disabled && checked),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"disabled\"\n    :aria-checked=\"checked\"\n    :data-key=\"node?.key\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: `${(node.level - 1) * indent}px` }\"\n    >\n      <el-icon\n        v-if=\"icon\"\n        :class=\"[\n          ns.is('leaf', !!node?.isLeaf),\n          ns.is('hidden', hiddenExpandIcon),\n          {\n            expanded: !node?.isLeaf && expanded,\n          },\n          ns.be('node', 'expand-icon'),\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"icon\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"checked\"\n        :indeterminate=\"indeterminate\"\n        :disabled=\"disabled\"\n        @change=\"handleCheckChange\"\n        @click.stop\n      />\n      <el-node-content :node=\"node\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject } from 'vue'\nimport { CaretRight } from '@element-plus/icons-vue'\nimport TwIcon from '@tw-element/components/icon'\nimport TwCheckbox from '@tw-element/components/checkbox'\nimport { useNamespace } from '@tw-element/hooks'\nimport ElNodeContent from './tree-node-content'\nimport {\n  ROOT_TREE_INJECTION_KEY,\n  NODE_CONTEXTMENU,\n  treeNodeEmits,\n  treeNodeProps,\n} from './virtual-tree'\n\nconst DEFAULT_ICON = 'caret-right'\n\nexport default defineComponent({\n  name: 'TwTreeNode',\n  components: {\n    TwIcon,\n    CaretRight,\n    TwCheckbox,\n    ElNodeContent,\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n  setup(props, { emit }) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY)\n    const ns = useNamespace('tree')\n\n    const indent = computed(() => {\n      return tree?.props.indent ?? 16\n    })\n\n    const icon = computed(() => {\n      return tree?.props.icon ?? DEFAULT_ICON\n    })\n\n    const handleClick = (e: MouseEvent) => {\n      emit('click', props.node, e)\n    }\n    const handleExpandIconClick = () => {\n      emit('toggle', props.node)\n    }\n    const handleCheckChange = (value: boolean) => {\n      emit('check', props.node, value)\n    }\n    const handleContextMenu = (event: Event) => {\n      if (tree?.instance?.vnode?.props?.['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree?.ctx.emit(NODE_CONTEXTMENU, event, props.node?.data, props.node)\n    }\n\n    return {\n      ns,\n      indent,\n      icon,\n      handleClick,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleContextMenu,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}