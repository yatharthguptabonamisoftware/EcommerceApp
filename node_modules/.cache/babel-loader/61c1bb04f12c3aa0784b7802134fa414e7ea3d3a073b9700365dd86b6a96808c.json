{"ast":null,"code":"import { inject, computed, unref } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\nconst defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 1e4),\n  current: 0\n};\nconst ID_INJECTION_KEY = Symbol(\"twIdInjection\");\nconst useId = deterministicId => {\n  const idInjection = inject(ID_INJECTION_KEY, defaultIdInjection);\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\"IdInjection\", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\nusage: app.provide(ID_INJECTION_KEY, {\n  prefix: number,\n  current: number,\n})`);\n  }\n  const idRef = computed(() => unref(deterministicId) || `tw-id-${idInjection.prefix}-${idInjection.current++}`);\n  return idRef;\n};\nexport { ID_INJECTION_KEY, useId };","map":{"version":3,"names":["defaultIdInjection","prefix","Math","floor","random","current","ID_INJECTION_KEY","Symbol","useId","deterministicId","idInjection","inject","isClient","debugWarn","idRef","computed","unref"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/hooks/use-id/index.ts"],"sourcesContent":["import { computed, inject, unref } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { debugWarn } from '@tw-element/utils'\n\nimport type { InjectionKey, Ref } from 'vue'\nimport type { MaybeRef } from '@vueuse/core'\n\nexport type ElIdInjectionContext = {\n  prefix: number\n  current: number\n}\n\nconst defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 10000),\n  current: 0,\n}\n\nexport const ID_INJECTION_KEY: InjectionKey<ElIdInjectionContext> =\n  Symbol('twIdInjection')\n\nexport const useId = (deterministicId?: MaybeRef<string>): Ref<string> => {\n  const idInjection = inject(ID_INJECTION_KEY, defaultIdInjection)\n\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\n      'IdInjection',\n      `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\nusage: app.provide(ID_INJECTION_KEY, {\n  prefix: number,\n  current: number,\n})`\n    )\n  }\n\n  const idRef = computed(\n    () =>\n      unref(deterministicId) ||\n      `tw-id-${idInjection.prefix}-${idInjection.current++}`\n  )\n\n  return idRef\n}\n"],"mappings":";;;;AAGA,MAAMA,kBAAkB,GAAG;EACzBC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;EACvCC,OAAO,EAAE;AACX,CAAC;AACW,MAACC,gBAAgB,GAAGC,MAAM,CAAC,eAAe;AAC1C,MAACC,KAAK,GAAIC,eAAe,IAAK;EACxC,MAAMC,WAAW,GAAGC,MAAM,CAACL,gBAAgB,EAAEN,kBAAkB,CAAC;EAChE,IAAI,CAACY,QAAQ,IAAIF,WAAW,KAAKV,kBAAkB,EAAE;IACnDa,SAAS,CAAC,aAAa,EAAG;AAC9B;AACA;AACA;AACA,GAAG,CAAC;EACJ;EACE,MAAMC,KAAK,GAAGC,QAAQ,CAAC,MAAMC,KAAK,CAACP,eAAe,CAAC,IAAK,SAAQC,WAAW,CAACT,MAAO,IAAGS,WAAW,CAACL,OAAO,EAAG,EAAC,CAAC;EAC9G,OAAOS,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}