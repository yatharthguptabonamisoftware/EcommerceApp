{"ast":null,"code":"import { defineComponent, computed, ref, unref, toRef, provide, readonly, resolveComponent, openBlock, createBlock, withCtx, createVNode, renderSlot, createCommentVNode, createElementBlock, toDisplayString } from 'vue';\nimport { TwPopper } from '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElTooltipContent from './content.mjs';\nimport ElTooltipTrigger from './trigger.mjs';\nimport { useTooltipContentProps, useTooltipTriggerProps, useTooltipProps } from './tooltip.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { createModelToggleComposable } from '../../../hooks/use-model-toggle/index.mjs';\nimport TwPopperArrow from '../../popper/src/arrow.mjs';\nimport { usePopperArrowProps } from '../../popper/src/popper.mjs';\nimport { usePopperContainer } from '../../../hooks/use-popper-container/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isBoolean } from '@vueuse/core';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useDelayedToggle } from '../../../hooks/use-delayed-toggle/index.mjs';\nconst {\n  useModelToggleProps,\n  useModelToggle,\n  useModelToggleEmits\n} = createModelToggleComposable(\"visible\");\nconst _sfc_main = defineComponent({\n  name: \"ElTooltip\",\n  components: {\n    TwPopper,\n    TwPopperArrow,\n    ElTooltipContent,\n    ElTooltipTrigger\n  },\n  props: {\n    ...useModelToggleProps,\n    ...useTooltipContentProps,\n    ...useTooltipTriggerProps,\n    ...usePopperArrowProps,\n    ...useTooltipProps\n  },\n  emits: [...useModelToggleEmits, \"show\", \"hide\"],\n  setup(props, {\n    emit\n  }) {\n    usePopperContainer();\n    const compatShowAfter = computed(() => {\n      if (!isUndefined(props.openDelay)) {\n        debugWarn(\"ElTooltip\", \"open-delay is about to be deprecated in the next major version, please use `show-after` instead\");\n      }\n      return props.openDelay || props.showAfter;\n    });\n    const compatShowArrow = computed(() => {\n      if (!isUndefined(props.visibleArrow)) {\n        debugWarn(\"ElTooltip\", \"`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead\");\n      }\n      return isBoolean(props.visibleArrow) ? props.visibleArrow : props.showArrow;\n    });\n    const id = useId();\n    const popperRef = ref(null);\n    const updatePopper = () => {\n      var _a;\n      const popperComponent = unref(popperRef);\n      if (popperComponent) {\n        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();\n      }\n    };\n    const open = ref(false);\n    const {\n      show,\n      hide\n    } = useModelToggle({\n      indicator: open\n    });\n    const {\n      onOpen,\n      onClose\n    } = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: toRef(props, \"hideAfter\"),\n      open: show,\n      close: hide\n    });\n    const controlled = computed(() => isBoolean(props.visible));\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled,\n      id,\n      open: readonly(open),\n      trigger: toRef(props, \"trigger\"),\n      onOpen,\n      onClose,\n      onToggle: () => {\n        if (unref(open)) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      },\n      onShow: () => {\n        emit(\"show\");\n      },\n      onHide: () => {\n        emit(\"hide\");\n      },\n      updatePopper\n    });\n    return {\n      compatShowAfter,\n      compatShowArrow,\n      popperRef,\n      open,\n      hide,\n      updatePopper,\n      onOpen,\n      onClose\n    };\n  }\n});\nconst _hoisted_1 = [\"innerHTML\"];\nconst _hoisted_2 = {\n  key: 1\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip_trigger = resolveComponent(\"el-tooltip-trigger\");\n  const _component_el_popper_arrow = resolveComponent(\"el-popper-arrow\");\n  const _component_el_tooltip_content = resolveComponent(\"el-tooltip-content\");\n  const _component_el_popper = resolveComponent(\"el-popper\");\n  return openBlock(), createBlock(_component_el_popper, {\n    ref: \"popperRef\"\n  }, {\n    default: withCtx(() => [createVNode(_component_el_tooltip_trigger, {\n      disabled: _ctx.disabled,\n      trigger: _ctx.trigger,\n      \"virtual-ref\": _ctx.virtualRef,\n      \"virtual-triggering\": _ctx.virtualTriggering\n    }, {\n      default: withCtx(() => [_ctx.$slots.default ? renderSlot(_ctx.$slots, \"default\", {\n        key: 0\n      }) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 8, [\"disabled\", \"trigger\", \"virtual-ref\", \"virtual-triggering\"]), createVNode(_component_el_tooltip_content, {\n      \"aria-label\": _ctx.ariaLabel,\n      \"boundaries-padding\": _ctx.boundariesPadding,\n      content: _ctx.content,\n      disabled: _ctx.disabled,\n      effect: _ctx.effect,\n      enterable: _ctx.enterable,\n      \"fallback-placements\": _ctx.fallbackPlacements,\n      \"hide-after\": _ctx.hideAfter,\n      \"gpu-acceleration\": _ctx.gpuAcceleration,\n      offset: _ctx.offset,\n      persistent: _ctx.persistent,\n      \"popper-class\": _ctx.popperClass,\n      \"popper-style\": _ctx.popperStyle,\n      placement: _ctx.placement,\n      \"popper-options\": _ctx.popperOptions,\n      pure: _ctx.pure,\n      \"raw-content\": _ctx.rawContent,\n      \"reference-el\": _ctx.referenceEl,\n      \"show-after\": _ctx.compatShowAfter,\n      strategy: _ctx.strategy,\n      teleported: _ctx.teleported,\n      transition: _ctx.transition,\n      \"z-index\": _ctx.zIndex\n    }, {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"content\", {}, () => [_ctx.rawContent ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        innerHTML: _ctx.content\n      }, null, 8, _hoisted_1)) : (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(_ctx.content), 1))]), _ctx.compatShowArrow ? (openBlock(), createBlock(_component_el_popper_arrow, {\n        key: 0,\n        \"arrow-offset\": _ctx.arrowOffset\n      }, null, 8, [\"arrow-offset\"])) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 8, [\"aria-label\", \"boundaries-padding\", \"content\", \"disabled\", \"effect\", \"enterable\", \"fallback-placements\", \"hide-after\", \"gpu-acceleration\", \"offset\", \"persistent\", \"popper-class\", \"popper-style\", \"placement\", \"popper-options\", \"pure\", \"raw-content\", \"reference-el\", \"show-after\", \"strategy\", \"teleported\", \"transition\", \"z-index\"])]),\n    _: 3\n  }, 512);\n}\nvar Tooltip = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { Tooltip as default };","map":{"version":3,"names":["useModelToggleProps","useModelToggle","useModelToggleEmits","createModelToggleComposable","_sfc_main","defineComponent","name","components","TwPopper","TwPopperArrow","ElTooltipContent","ElTooltipTrigger","props","useTooltipContentProps","useTooltipTriggerProps","usePopperArrowProps","useTooltipProps","emits","setup","emit","usePopperContainer","compatShowAfter","computed","isUndefined","openDelay","debugWarn","showAfter","compatShowArrow","visibleArrow","isBoolean","showArrow","id","useId","popperRef","ref","updatePopper","_a","popperComponent","unref","popperInstanceRef","update","open","show","hide","indicator","onOpen","onClose","useDelayedToggle","hideAfter","toRef","close","controlled","visible","provide","TOOLTIP_INJECTION_KEY","readonly","trigger","onToggle","onShow","onHide","openBlock","createBlock","_component_el_popper","default","withCtx","createVNode","_component_el_tooltip_trigger","disabled","_ctx","virtualRef","_component_el_tooltip_content","ariaLabel","boundariesPadding","content","effect","enterable","fallbackPlacements","gpuAcceleration","offset","persistent","popperClass","popperStyle","placement","popperOptions","pure","rawContent","referenceEl","strategy","teleported","transition","renderSlot","$slots","key"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/tooltip/src/tooltip.vue"],"sourcesContent":["<template>\n  <el-popper ref=\"popperRef\">\n    <el-tooltip-trigger\n      :disabled=\"disabled\"\n      :trigger=\"trigger\"\n      :virtual-ref=\"virtualRef\"\n      :virtual-triggering=\"virtualTriggering\"\n    >\n      <slot v-if=\"$slots.default\" />\n    </el-tooltip-trigger>\n    <el-tooltip-content\n      :aria-label=\"ariaLabel\"\n      :boundaries-padding=\"boundariesPadding\"\n      :content=\"content\"\n      :disabled=\"disabled\"\n      :effect=\"effect\"\n      :enterable=\"enterable\"\n      :fallback-placements=\"fallbackPlacements\"\n      :hide-after=\"hideAfter\"\n      :gpu-acceleration=\"gpuAcceleration\"\n      :offset=\"offset\"\n      :persistent=\"persistent\"\n      :popper-class=\"popperClass\"\n      :popper-style=\"popperStyle\"\n      :placement=\"placement\"\n      :popper-options=\"popperOptions\"\n      :pure=\"pure\"\n      :raw-content=\"rawContent\"\n      :reference-el=\"referenceEl\"\n      :show-after=\"compatShowAfter\"\n      :strategy=\"strategy\"\n      :teleported=\"teleported\"\n      :transition=\"transition\"\n      :z-index=\"zIndex\"\n    >\n      <slot name=\"content\">\n        <span v-if=\"rawContent\" v-html=\"content\"></span>\n        <span v-else>{{ content }}</span>\n      </slot>\n      <el-popper-arrow v-if=\"compatShowArrow\" :arrow-offset=\"arrowOffset\" />\n    </el-tooltip-content>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  ref,\n  provide,\n  toRef,\n  readonly,\n  unref,\n} from 'vue'\nimport {\n  TwPopper,\n  TwPopperArrow,\n  usePopperArrowProps,\n} from '@tw-element/components/popper'\n\nimport { debugWarn, isBoolean, isUndefined } from '@tw-element/utils'\nimport {\n  usePopperContainer,\n  useId,\n  createModelToggleComposable,\n  useDelayedToggle,\n} from '@tw-element/hooks'\nimport ElTooltipContent from './content.vue'\nimport ElTooltipTrigger from './trigger.vue'\nimport {\n  useTooltipContentProps,\n  useTooltipTriggerProps,\n  useTooltipProps,\n} from './tooltip'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\n\nconst { useModelToggleProps, useModelToggle, useModelToggleEmits } =\n  createModelToggleComposable('visible' as const)\n\nexport default defineComponent({\n  name: 'ElTooltip',\n  components: {\n    TwPopper,\n    TwPopperArrow,\n    ElTooltipContent,\n    ElTooltipTrigger,\n  },\n  props: {\n    ...useModelToggleProps,\n    ...useTooltipContentProps,\n    ...useTooltipTriggerProps,\n    ...usePopperArrowProps,\n    ...useTooltipProps,\n  },\n  emits: [...useModelToggleEmits, 'show', 'hide'],\n  setup(props, { emit }) {\n    usePopperContainer()\n    const compatShowAfter = computed(() => {\n      if (!isUndefined(props.openDelay)) {\n        debugWarn(\n          'ElTooltip',\n          'open-delay is about to be deprecated in the next major version, please use `show-after` instead'\n        )\n      }\n      return props.openDelay || (props.showAfter as number)\n    })\n    const compatShowArrow = computed(() => {\n      if (!isUndefined(props.visibleArrow)) {\n        debugWarn(\n          'ElTooltip',\n          '`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead'\n        )\n      }\n      return isBoolean(props.visibleArrow)\n        ? props.visibleArrow\n        : props.showArrow\n    })\n\n    const id = useId()\n    const popperRef = ref<InstanceType<typeof TwPopper> | null>(null)\n\n    const updatePopper = () => {\n      const popperComponent = unref(popperRef)\n      if (popperComponent) {\n        popperComponent.popperInstanceRef?.update()\n      }\n    }\n    const open = ref(false)\n\n    const { show, hide } = useModelToggle({\n      indicator: open,\n    })\n\n    const { onOpen, onClose } = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: toRef(props, 'hideAfter'),\n      open: show,\n      close: hide,\n    })\n\n    const controlled = computed(() => isBoolean(props.visible))\n\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled,\n      id,\n      open: readonly(open),\n      trigger: toRef(props, 'trigger'),\n      onOpen,\n      onClose,\n      onToggle: () => {\n        if (unref(open)) {\n          onClose()\n        } else {\n          onOpen()\n        }\n      },\n      onShow: () => {\n        emit('show')\n      },\n      onHide: () => {\n        emit('hide')\n      },\n      updatePopper,\n    })\n\n    return {\n      compatShowAfter,\n      compatShowArrow,\n      popperRef,\n      open,\n      hide,\n      updatePopper,\n      onOpen,\n      onClose,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}