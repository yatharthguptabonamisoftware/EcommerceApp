{"ast":null,"code":"import { defineComponent, getCurrentInstance, shallowRef, ref, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nconst _sfc_main = defineComponent({\n  name: \"TwColorAlphaSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const thumb = shallowRef(null);\n    const bar = shallowRef(null);\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const background = ref(null);\n    watch(() => props.color.get(\"alpha\"), () => {\n      update();\n    });\n    watch(() => props.color.value, () => {\n      update();\n    });\n    function getThumbLeft() {\n      if (props.vertical) return 0;\n      const el = instance.vnode.el;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n    }\n    function getThumbTop() {\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n    }\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const {\n          r,\n          g,\n          b\n        } = props.color.toRgb();\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`;\n      }\n      return null;\n    }\n    function handleClick(event) {\n      const target = event.target;\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n      } else {\n        let top = clientY - rect.top;\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n      }\n    }\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n      background.value = getBackground();\n    }\n    onMounted(() => {\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-color-alpha-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: \"el-color-alpha-slider__bar\",\n    style: normalizeStyle({\n      background: _ctx.background\n    }),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 4), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: \"el-color-alpha-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\nvar AlphaSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { AlphaSlider as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","props","color","type","Object","required","vertical","Boolean","default","setup","instance","getCurrentInstance","thumb","shallowRef","bar","thumbLeft","ref","thumbTop","background","watch","get","update","value","getThumbLeft","el","vnode","alpha","Math","round","offsetWidth","getThumbTop","offsetHeight","getBackground","r","g","b","toRgb","handleClick","event","target","handleDrag","rect","getBoundingClientRect","clientX","clientY","getClientXY","left","max","min","width","set","top","height","onMounted","dragConfig","drag","end","draggable","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","class","normalizeClass","_ctx","createElementVNode","style","normalizeStyle"],"sources":["/home/bonami/Desktop/Projects/ECommerce/packages/components/color-picker/src/components/alpha-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-alpha-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div\n      ref=\"bar\"\n      class=\"el-color-alpha-slider__bar\"\n      :style=\"{\n        background,\n      }\"\n      @click=\"handleClick\"\n    ></div>\n    <div\n      ref=\"thumb\"\n      class=\"el-color-alpha-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    ></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  watch,\n  ref,\n  onMounted,\n  getCurrentInstance,\n  shallowRef,\n} from 'vue'\nimport { getClientXY } from '@tw-element/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@tw-element/utils'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'TwColorAlphaSlider',\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = shallowRef<Nullable<HTMLElement>>(null)\n    const bar = shallowRef<Nullable<HTMLElement>>(null)\n\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    const background = ref<Nullable<string>>(null)\n\n    watch(\n      () => props.color.get('alpha'),\n      () => {\n        update()\n      }\n    )\n    watch(\n      () => props.color.value,\n      () => {\n        update()\n      }\n    )\n\n    //methods\n    function getThumbLeft() {\n      if (props.vertical) return 0\n      const el = instance.vnode.el\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 100\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el\n      if (!props.vertical) return 0\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 100\n      )\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const { r, g, b } = props.color.toRgb()\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`\n      }\n      return null\n    }\n\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((left - thumb.value.offsetWidth / 2) /\n              (rect.width - thumb.value.offsetWidth)) *\n              100\n          )\n        )\n      } else {\n        let top = clientY - rect.top\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((top - thumb.value.offsetHeight / 2) /\n              (rect.height - thumb.value.offsetHeight)) *\n              100\n          )\n        )\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n      background.value = getBackground()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}